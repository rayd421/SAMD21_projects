
Motorcontrol_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000044  20000000  000048ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003c98  20000044  000048f0  00020044  2**2
                  ALLOC
  3 .stack        00002004  20003cdc  00008588  00020044  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000171ab  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024cb  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004d9e  00000000  00000000  0003973b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000598  00000000  00000000  0003e4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  0003ea71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016005  00000000  00000000  0003f0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007483  00000000  00000000  000550a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d89c  00000000  00000000  0005c529  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001134  00000000  00000000  000e9dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 5c 00 20 45 1b 00 00 41 1b 00 00 41 1b 00 00     .\. E...A...A...
	...
      2c:	69 01 00 00 00 00 00 00 00 00 00 00 cd 01 00 00     i...............
      3c:	11 02 00 00 41 1b 00 00 41 1b 00 00 41 1b 00 00     ....A...A...A...
      4c:	41 1b 00 00 71 26 00 00 41 1b 00 00 41 1b 00 00     A...q&..A...A...
      5c:	41 1b 00 00 41 1b 00 00 41 1b 00 00 41 1b 00 00     A...A...A...A...
      6c:	41 1b 00 00 41 1b 00 00 41 1b 00 00 41 1b 00 00     A...A...A...A...
      7c:	41 1b 00 00 41 1b 00 00 41 1b 00 00 41 1b 00 00     A...A...A...A...
      8c:	41 1b 00 00 41 1b 00 00 41 1b 00 00 41 1b 00 00     A...A...A...A...
      9c:	41 1b 00 00 41 1b 00 00 41 1b 00 00 41 1b 00 00     A...A...A...A...
      ac:	41 1b 00 00 00 00 00 00                             A.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000044 	.word	0x20000044
      d4:	00000000 	.word	0x00000000
      d8:	000048ac 	.word	0x000048ac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000048 	.word	0x20000048
     108:	000048ac 	.word	0x000048ac
     10c:	000048ac 	.word	0x000048ac
     110:	00000000 	.word	0x00000000

00000114 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     114:	4b03      	ldr	r3, [pc, #12]	; (124 <prvTaskExitError+0x10>)
     116:	681b      	ldr	r3, [r3, #0]
     118:	3301      	adds	r3, #1
     11a:	d001      	beq.n	120 <prvTaskExitError+0xc>
     11c:	b672      	cpsid	i
     11e:	e7fe      	b.n	11e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     120:	b672      	cpsid	i
     122:	e7fe      	b.n	122 <prvTaskExitError+0xe>
     124:	20000000 	.word	0x20000000

00000128 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     128:	4a06      	ldr	r2, [pc, #24]	; (144 <pxCurrentTCBConst2>)
     12a:	6813      	ldr	r3, [r2, #0]
     12c:	6818      	ldr	r0, [r3, #0]
     12e:	3020      	adds	r0, #32
     130:	f380 8809 	msr	PSP, r0
     134:	2002      	movs	r0, #2
     136:	f380 8814 	msr	CONTROL, r0
     13a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     13c:	46ae      	mov	lr, r5
     13e:	b662      	cpsie	i
     140:	bd00      	pop	{pc}
     142:	46c0      	nop			; (mov r8, r8)

00000144 <pxCurrentTCBConst2>:
     144:	20003b00 	.word	0x20003b00

00000148 <pxPortInitialiseStack>:
{
     148:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     14a:	1f03      	subs	r3, r0, #4
     14c:	2480      	movs	r4, #128	; 0x80
     14e:	0464      	lsls	r4, r4, #17
     150:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     152:	3b04      	subs	r3, #4
     154:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     156:	3b04      	subs	r3, #4
     158:	4902      	ldr	r1, [pc, #8]	; (164 <pxPortInitialiseStack+0x1c>)
     15a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     15c:	3b14      	subs	r3, #20
     15e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
     160:	3840      	subs	r0, #64	; 0x40
}
     162:	bd10      	pop	{r4, pc}
     164:	00000115 	.word	0x00000115

00000168 <SVC_Handler>:
}
     168:	4770      	bx	lr
	...

0000016c <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     16c:	2280      	movs	r2, #128	; 0x80
     16e:	0552      	lsls	r2, r2, #21
     170:	4b03      	ldr	r3, [pc, #12]	; (180 <vPortYield+0x14>)
     172:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     174:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     178:	f3bf 8f6f 	isb	sy
}
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	e000ed04 	.word	0xe000ed04

00000184 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     184:	b672      	cpsid	i
    uxCriticalNesting++;
     186:	4a04      	ldr	r2, [pc, #16]	; (198 <vPortEnterCritical+0x14>)
     188:	6813      	ldr	r3, [r2, #0]
     18a:	3301      	adds	r3, #1
     18c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
     18e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     192:	f3bf 8f6f 	isb	sy
}
     196:	4770      	bx	lr
     198:	20000000 	.word	0x20000000

0000019c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     19c:	4b06      	ldr	r3, [pc, #24]	; (1b8 <vPortExitCritical+0x1c>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	2b00      	cmp	r3, #0
     1a2:	d101      	bne.n	1a8 <vPortExitCritical+0xc>
     1a4:	b672      	cpsid	i
     1a6:	e7fe      	b.n	1a6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
     1a8:	3b01      	subs	r3, #1
     1aa:	4a03      	ldr	r2, [pc, #12]	; (1b8 <vPortExitCritical+0x1c>)
     1ac:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     1ae:	2b00      	cmp	r3, #0
     1b0:	d100      	bne.n	1b4 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     1b2:	b662      	cpsie	i
    }
}
     1b4:	4770      	bx	lr
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	20000000 	.word	0x20000000

000001bc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     1bc:	f3ef 8010 	mrs	r0, PRIMASK
     1c0:	b672      	cpsid	i
     1c2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     1c4:	2000      	movs	r0, #0

000001c6 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     1c6:	f380 8810 	msr	PRIMASK, r0
     1ca:	4770      	bx	lr

000001cc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     1cc:	f3ef 8009 	mrs	r0, PSP
     1d0:	4b0e      	ldr	r3, [pc, #56]	; (20c <pxCurrentTCBConst>)
     1d2:	681a      	ldr	r2, [r3, #0]
     1d4:	3820      	subs	r0, #32
     1d6:	6010      	str	r0, [r2, #0]
     1d8:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     1da:	4644      	mov	r4, r8
     1dc:	464d      	mov	r5, r9
     1de:	4656      	mov	r6, sl
     1e0:	465f      	mov	r7, fp
     1e2:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     1e4:	b508      	push	{r3, lr}
     1e6:	b672      	cpsid	i
     1e8:	f000 ff50 	bl	108c <vTaskSwitchContext>
     1ec:	b662      	cpsie	i
     1ee:	bc0c      	pop	{r2, r3}
     1f0:	6811      	ldr	r1, [r2, #0]
     1f2:	6808      	ldr	r0, [r1, #0]
     1f4:	3010      	adds	r0, #16
     1f6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     1f8:	46a0      	mov	r8, r4
     1fa:	46a9      	mov	r9, r5
     1fc:	46b2      	mov	sl, r6
     1fe:	46bb      	mov	fp, r7
     200:	f380 8809 	msr	PSP, r0
     204:	3820      	subs	r0, #32
     206:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     208:	4718      	bx	r3
     20a:	46c0      	nop			; (mov r8, r8)

0000020c <pxCurrentTCBConst>:
     20c:	20003b00 	.word	0x20003b00

00000210 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     210:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     212:	4b07      	ldr	r3, [pc, #28]	; (230 <SysTick_Handler+0x20>)
     214:	4798      	blx	r3
     216:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     218:	4b06      	ldr	r3, [pc, #24]	; (234 <SysTick_Handler+0x24>)
     21a:	4798      	blx	r3
     21c:	2800      	cmp	r0, #0
     21e:	d003      	beq.n	228 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     220:	2280      	movs	r2, #128	; 0x80
     222:	0552      	lsls	r2, r2, #21
     224:	4b04      	ldr	r3, [pc, #16]	; (238 <SysTick_Handler+0x28>)
     226:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     228:	0020      	movs	r0, r4
     22a:	4b04      	ldr	r3, [pc, #16]	; (23c <SysTick_Handler+0x2c>)
     22c:	4798      	blx	r3
}
     22e:	bd10      	pop	{r4, pc}
     230:	000001bd 	.word	0x000001bd
     234:	00000d7d 	.word	0x00000d7d
     238:	e000ed04 	.word	0xe000ed04
     23c:	000001c7 	.word	0x000001c7

00000240 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     240:	2200      	movs	r2, #0
     242:	4b04      	ldr	r3, [pc, #16]	; (254 <vPortSetupTimerInterrupt+0x14>)
     244:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     246:	4a04      	ldr	r2, [pc, #16]	; (258 <vPortSetupTimerInterrupt+0x18>)
     248:	4b04      	ldr	r3, [pc, #16]	; (25c <vPortSetupTimerInterrupt+0x1c>)
     24a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     24c:	2207      	movs	r2, #7
     24e:	4b04      	ldr	r3, [pc, #16]	; (260 <vPortSetupTimerInterrupt+0x20>)
     250:	601a      	str	r2, [r3, #0]
}
     252:	4770      	bx	lr
     254:	e000e018 	.word	0xe000e018
     258:	0000031f 	.word	0x0000031f
     25c:	e000e014 	.word	0xe000e014
     260:	e000e010 	.word	0xe000e010

00000264 <xPortStartScheduler>:
{
     264:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     266:	4b0a      	ldr	r3, [pc, #40]	; (290 <xPortStartScheduler+0x2c>)
     268:	6819      	ldr	r1, [r3, #0]
     26a:	22ff      	movs	r2, #255	; 0xff
     26c:	0412      	lsls	r2, r2, #16
     26e:	430a      	orrs	r2, r1
     270:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     272:	6819      	ldr	r1, [r3, #0]
     274:	22ff      	movs	r2, #255	; 0xff
     276:	0612      	lsls	r2, r2, #24
     278:	430a      	orrs	r2, r1
     27a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
     27c:	4b05      	ldr	r3, [pc, #20]	; (294 <xPortStartScheduler+0x30>)
     27e:	4798      	blx	r3
	uxCriticalNesting = 0;
     280:	2200      	movs	r2, #0
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <xPortStartScheduler+0x34>)
     284:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <xPortStartScheduler+0x38>)
     288:	4798      	blx	r3
	prvTaskExitError();
     28a:	4b05      	ldr	r3, [pc, #20]	; (2a0 <xPortStartScheduler+0x3c>)
     28c:	4798      	blx	r3
     28e:	46c0      	nop			; (mov r8, r8)
     290:	e000ed20 	.word	0xe000ed20
     294:	00000241 	.word	0x00000241
     298:	20000000 	.word	0x20000000
     29c:	00000129 	.word	0x00000129
     2a0:	00000115 	.word	0x00000115

000002a4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2a4:	b570      	push	{r4, r5, r6, lr}
     2a6:	0004      	movs	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     2a8:	0743      	lsls	r3, r0, #29
     2aa:	d002      	beq.n	2b2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     2ac:	2307      	movs	r3, #7
     2ae:	439c      	bics	r4, r3
     2b0:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     2b2:	4b11      	ldr	r3, [pc, #68]	; (2f8 <pvPortMalloc+0x54>)
     2b4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     2b6:	4b11      	ldr	r3, [pc, #68]	; (2fc <pvPortMalloc+0x58>)
     2b8:	681b      	ldr	r3, [r3, #0]
     2ba:	2b00      	cmp	r3, #0
     2bc:	d010      	beq.n	2e0 <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     2be:	4b10      	ldr	r3, [pc, #64]	; (300 <pvPortMalloc+0x5c>)
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	18e4      	adds	r4, r4, r3
     2c4:	4a0f      	ldr	r2, [pc, #60]	; (304 <pvPortMalloc+0x60>)
     2c6:	4294      	cmp	r4, r2
     2c8:	d811      	bhi.n	2ee <pvPortMalloc+0x4a>
     2ca:	42a3      	cmp	r3, r4
     2cc:	d211      	bcs.n	2f2 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     2ce:	4a0b      	ldr	r2, [pc, #44]	; (2fc <pvPortMalloc+0x58>)
     2d0:	6815      	ldr	r5, [r2, #0]
     2d2:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     2d4:	4b0a      	ldr	r3, [pc, #40]	; (300 <pvPortMalloc+0x5c>)
     2d6:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     2d8:	4b0b      	ldr	r3, [pc, #44]	; (308 <pvPortMalloc+0x64>)
     2da:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     2dc:	0028      	movs	r0, r5
     2de:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     2e0:	2207      	movs	r2, #7
     2e2:	4b0a      	ldr	r3, [pc, #40]	; (30c <pvPortMalloc+0x68>)
     2e4:	3308      	adds	r3, #8
     2e6:	4393      	bics	r3, r2
     2e8:	4a04      	ldr	r2, [pc, #16]	; (2fc <pvPortMalloc+0x58>)
     2ea:	6013      	str	r3, [r2, #0]
     2ec:	e7e7      	b.n	2be <pvPortMalloc+0x1a>
void *pvReturn = NULL;
     2ee:	2500      	movs	r5, #0
     2f0:	e7f2      	b.n	2d8 <pvPortMalloc+0x34>
     2f2:	2500      	movs	r5, #0
     2f4:	e7f0      	b.n	2d8 <pvPortMalloc+0x34>
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	00000d4d 	.word	0x00000d4d
     2fc:	20000060 	.word	0x20000060
     300:	20003afc 	.word	0x20003afc
     304:	00003a8f 	.word	0x00003a8f
     308:	00000ea1 	.word	0x00000ea1
     30c:	20000064 	.word	0x20000064

00000310 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     310:	2800      	cmp	r0, #0
     312:	d001      	beq.n	318 <vPortFree+0x8>
     314:	b672      	cpsid	i
     316:	e7fe      	b.n	316 <vPortFree+0x6>
}
     318:	4770      	bx	lr

0000031a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     31a:	0003      	movs	r3, r0
     31c:	3308      	adds	r3, #8
     31e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     320:	2201      	movs	r2, #1
     322:	4252      	negs	r2, r2
     324:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     326:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     328:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     32a:	2300      	movs	r3, #0
     32c:	6003      	str	r3, [r0, #0]
}
     32e:	4770      	bx	lr

00000330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     330:	2300      	movs	r3, #0
     332:	6103      	str	r3, [r0, #16]
}
     334:	4770      	bx	lr

00000336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     336:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     338:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     33a:	689a      	ldr	r2, [r3, #8]
     33c:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     33e:	689a      	ldr	r2, [r3, #8]
     340:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     342:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     344:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     346:	6803      	ldr	r3, [r0, #0]
     348:	3301      	adds	r3, #1
     34a:	6003      	str	r3, [r0, #0]
}
     34c:	4770      	bx	lr

0000034e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     34e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     350:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     352:	0002      	movs	r2, r0
     354:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
     356:	1c63      	adds	r3, r4, #1
     358:	d102      	bne.n	360 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
     35a:	6902      	ldr	r2, [r0, #16]
     35c:	e004      	b.n	368 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     35e:	001a      	movs	r2, r3
     360:	6853      	ldr	r3, [r2, #4]
     362:	681d      	ldr	r5, [r3, #0]
     364:	42ac      	cmp	r4, r5
     366:	d2fa      	bcs.n	35e <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     368:	6853      	ldr	r3, [r2, #4]
     36a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     36c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     36e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     370:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     372:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     374:	6803      	ldr	r3, [r0, #0]
     376:	3301      	adds	r3, #1
     378:	6003      	str	r3, [r0, #0]
}
     37a:	bd30      	pop	{r4, r5, pc}

0000037c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     37c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     37e:	6842      	ldr	r2, [r0, #4]
     380:	6881      	ldr	r1, [r0, #8]
     382:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     384:	6882      	ldr	r2, [r0, #8]
     386:	6841      	ldr	r1, [r0, #4]
     388:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     38a:	685a      	ldr	r2, [r3, #4]
     38c:	4290      	cmp	r0, r2
     38e:	d005      	beq.n	39c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     390:	2200      	movs	r2, #0
     392:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     394:	681a      	ldr	r2, [r3, #0]
     396:	1e50      	subs	r0, r2, #1
     398:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     39a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     39c:	6882      	ldr	r2, [r0, #8]
     39e:	605a      	str	r2, [r3, #4]
     3a0:	e7f6      	b.n	390 <uxListRemove+0x14>
	...

000003a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     3a4:	b570      	push	{r4, r5, r6, lr}
     3a6:	0004      	movs	r4, r0
     3a8:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     3aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
     3ac:	2a00      	cmp	r2, #0
     3ae:	d10b      	bne.n	3c8 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     3b0:	6803      	ldr	r3, [r0, #0]
     3b2:	2b00      	cmp	r3, #0
     3b4:	d104      	bne.n	3c0 <prvCopyDataToQueue+0x1c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     3b6:	6840      	ldr	r0, [r0, #4]
     3b8:	4b17      	ldr	r3, [pc, #92]	; (418 <prvCopyDataToQueue+0x74>)
     3ba:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     3bc:	2300      	movs	r3, #0
     3be:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     3c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     3c2:	3301      	adds	r3, #1
     3c4:	63a3      	str	r3, [r4, #56]	; 0x38
}
     3c6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
     3c8:	2d00      	cmp	r5, #0
     3ca:	d10d      	bne.n	3e8 <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     3cc:	6880      	ldr	r0, [r0, #8]
     3ce:	4b13      	ldr	r3, [pc, #76]	; (41c <prvCopyDataToQueue+0x78>)
     3d0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     3d2:	68a3      	ldr	r3, [r4, #8]
     3d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
     3d6:	4694      	mov	ip, r2
     3d8:	4463      	add	r3, ip
     3da:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     3dc:	6862      	ldr	r2, [r4, #4]
     3de:	4293      	cmp	r3, r2
     3e0:	d3ee      	bcc.n	3c0 <prvCopyDataToQueue+0x1c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     3e2:	6823      	ldr	r3, [r4, #0]
     3e4:	60a3      	str	r3, [r4, #8]
     3e6:	e7eb      	b.n	3c0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     3e8:	68c0      	ldr	r0, [r0, #12]
     3ea:	4b0c      	ldr	r3, [pc, #48]	; (41c <prvCopyDataToQueue+0x78>)
     3ec:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
     3f0:	425b      	negs	r3, r3
     3f2:	68e2      	ldr	r2, [r4, #12]
     3f4:	18d2      	adds	r2, r2, r3
     3f6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     3f8:	6821      	ldr	r1, [r4, #0]
     3fa:	428a      	cmp	r2, r1
     3fc:	d203      	bcs.n	406 <prvCopyDataToQueue+0x62>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     3fe:	6862      	ldr	r2, [r4, #4]
     400:	4694      	mov	ip, r2
     402:	4463      	add	r3, ip
     404:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
     406:	2d02      	cmp	r5, #2
     408:	d1da      	bne.n	3c0 <prvCopyDataToQueue+0x1c>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     40a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     40c:	2b00      	cmp	r3, #0
     40e:	d0d7      	beq.n	3c0 <prvCopyDataToQueue+0x1c>
				--( pxQueue->uxMessagesWaiting );
     410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     412:	3b01      	subs	r3, #1
     414:	63a3      	str	r3, [r4, #56]	; 0x38
     416:	e7d3      	b.n	3c0 <prvCopyDataToQueue+0x1c>
     418:	000013a5 	.word	0x000013a5
     41c:	000046a1 	.word	0x000046a1

00000420 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     420:	b510      	push	{r4, lr}
     422:	b082      	sub	sp, #8
     424:	9001      	str	r0, [sp, #4]
     426:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     428:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     42a:	2c00      	cmp	r4, #0
     42c:	d005      	beq.n	43a <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     42e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     432:	4299      	cmp	r1, r3
     434:	d303      	bcc.n	43e <prvNotifyQueueSetContainer+0x1e>
     436:	b672      	cpsid	i
     438:	e7fe      	b.n	438 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
     43a:	b672      	cpsid	i
     43c:	e7fe      	b.n	43c <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     43e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
     440:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     442:	428b      	cmp	r3, r1
     444:	d801      	bhi.n	44a <prvNotifyQueueSetContainer+0x2a>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     446:	b002      	add	sp, #8
     448:	bd10      	pop	{r4, pc}
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     44a:	a901      	add	r1, sp, #4
     44c:	0020      	movs	r0, r4
     44e:	4b06      	ldr	r3, [pc, #24]	; (468 <prvNotifyQueueSetContainer+0x48>)
     450:	4798      	blx	r3
	BaseType_t xReturn = pdFALSE;
     452:	2000      	movs	r0, #0
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     454:	6a63      	ldr	r3, [r4, #36]	; 0x24
     456:	2b00      	cmp	r3, #0
     458:	d0f5      	beq.n	446 <prvNotifyQueueSetContainer+0x26>
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     45a:	0020      	movs	r0, r4
     45c:	3024      	adds	r0, #36	; 0x24
     45e:	4b03      	ldr	r3, [pc, #12]	; (46c <prvNotifyQueueSetContainer+0x4c>)
     460:	4798      	blx	r3
	BaseType_t xReturn = pdFALSE;
     462:	1e43      	subs	r3, r0, #1
     464:	4198      	sbcs	r0, r3
     466:	e7ee      	b.n	446 <prvNotifyQueueSetContainer+0x26>
     468:	000003a5 	.word	0x000003a5
     46c:	000011d5 	.word	0x000011d5

00000470 <prvCopyDataFromQueue>:
{
     470:	b570      	push	{r4, r5, r6, lr}
     472:	000c      	movs	r4, r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     474:	6801      	ldr	r1, [r0, #0]
     476:	2900      	cmp	r1, #0
     478:	d00b      	beq.n	492 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     47a:	6c02      	ldr	r2, [r0, #64]	; 0x40
     47c:	68c3      	ldr	r3, [r0, #12]
     47e:	189b      	adds	r3, r3, r2
     480:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     482:	6845      	ldr	r5, [r0, #4]
     484:	42ab      	cmp	r3, r5
     486:	d300      	bcc.n	48a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     488:	60c1      	str	r1, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     48a:	68c1      	ldr	r1, [r0, #12]
     48c:	0020      	movs	r0, r4
     48e:	4b01      	ldr	r3, [pc, #4]	; (494 <prvCopyDataFromQueue+0x24>)
     490:	4798      	blx	r3
}
     492:	bd70      	pop	{r4, r5, r6, pc}
     494:	000046a1 	.word	0x000046a1

00000498 <prvUnlockQueue>:
{
     498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     49a:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
     49c:	4b25      	ldr	r3, [pc, #148]	; (534 <prvUnlockQueue+0x9c>)
     49e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     4a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4a2:	2b00      	cmp	r3, #0
     4a4:	dd1e      	ble.n	4e4 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     4a6:	4d24      	ldr	r5, [pc, #144]	; (538 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     4a8:	4e24      	ldr	r6, [pc, #144]	; (53c <prvUnlockQueue+0xa4>)
     4aa:	e00d      	b.n	4c8 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
     4ae:	2b00      	cmp	r3, #0
     4b0:	d018      	beq.n	4e4 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     4b2:	0020      	movs	r0, r4
     4b4:	3024      	adds	r0, #36	; 0x24
     4b6:	47b0      	blx	r6
     4b8:	2800      	cmp	r0, #0
     4ba:	d110      	bne.n	4de <prvUnlockQueue+0x46>
			--( pxQueue->xTxLock );
     4bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4be:	3b01      	subs	r3, #1
     4c0:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     4c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4c4:	2b00      	cmp	r3, #0
     4c6:	dd0d      	ble.n	4e4 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
     4c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     4ca:	2b00      	cmp	r3, #0
     4cc:	d0ee      	beq.n	4ac <prvUnlockQueue+0x14>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     4ce:	2100      	movs	r1, #0
     4d0:	0020      	movs	r0, r4
     4d2:	47a8      	blx	r5
     4d4:	2801      	cmp	r0, #1
     4d6:	d1f1      	bne.n	4bc <prvUnlockQueue+0x24>
						vTaskMissedYield();
     4d8:	4b19      	ldr	r3, [pc, #100]	; (540 <prvUnlockQueue+0xa8>)
     4da:	4798      	blx	r3
     4dc:	e7ee      	b.n	4bc <prvUnlockQueue+0x24>
							vTaskMissedYield();
     4de:	4b18      	ldr	r3, [pc, #96]	; (540 <prvUnlockQueue+0xa8>)
     4e0:	4798      	blx	r3
     4e2:	e7eb      	b.n	4bc <prvUnlockQueue+0x24>
		pxQueue->xTxLock = queueUNLOCKED;
     4e4:	2301      	movs	r3, #1
     4e6:	425b      	negs	r3, r3
     4e8:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
     4ea:	4b16      	ldr	r3, [pc, #88]	; (544 <prvUnlockQueue+0xac>)
     4ec:	4798      	blx	r3
	taskENTER_CRITICAL();
     4ee:	4b11      	ldr	r3, [pc, #68]	; (534 <prvUnlockQueue+0x9c>)
     4f0:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     4f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
     4f4:	2b00      	cmp	r3, #0
     4f6:	dd16      	ble.n	526 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     4f8:	6923      	ldr	r3, [r4, #16]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d013      	beq.n	526 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4fe:	0025      	movs	r5, r4
     500:	3510      	adds	r5, #16
     502:	4f0e      	ldr	r7, [pc, #56]	; (53c <prvUnlockQueue+0xa4>)
					vTaskMissedYield();
     504:	4e0e      	ldr	r6, [pc, #56]	; (540 <prvUnlockQueue+0xa8>)
     506:	e008      	b.n	51a <prvUnlockQueue+0x82>
				--( pxQueue->xRxLock );
     508:	6c63      	ldr	r3, [r4, #68]	; 0x44
     50a:	3b01      	subs	r3, #1
     50c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     50e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     510:	2b00      	cmp	r3, #0
     512:	dd08      	ble.n	526 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     514:	6923      	ldr	r3, [r4, #16]
     516:	2b00      	cmp	r3, #0
     518:	d005      	beq.n	526 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     51a:	0028      	movs	r0, r5
     51c:	47b8      	blx	r7
     51e:	2800      	cmp	r0, #0
     520:	d0f2      	beq.n	508 <prvUnlockQueue+0x70>
					vTaskMissedYield();
     522:	47b0      	blx	r6
     524:	e7f0      	b.n	508 <prvUnlockQueue+0x70>
		pxQueue->xRxLock = queueUNLOCKED;
     526:	2301      	movs	r3, #1
     528:	425b      	negs	r3, r3
     52a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
     52c:	4b05      	ldr	r3, [pc, #20]	; (544 <prvUnlockQueue+0xac>)
     52e:	4798      	blx	r3
}
     530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     532:	46c0      	nop			; (mov r8, r8)
     534:	00000185 	.word	0x00000185
     538:	00000421 	.word	0x00000421
     53c:	000011d5 	.word	0x000011d5
     540:	000012ed 	.word	0x000012ed
     544:	0000019d 	.word	0x0000019d

00000548 <xQueueGenericReset>:
{
     548:	b570      	push	{r4, r5, r6, lr}
     54a:	0004      	movs	r4, r0
     54c:	000d      	movs	r5, r1
	configASSERT( pxQueue );
     54e:	2800      	cmp	r0, #0
     550:	d020      	beq.n	594 <xQueueGenericReset+0x4c>
	taskENTER_CRITICAL();
     552:	4b17      	ldr	r3, [pc, #92]	; (5b0 <xQueueGenericReset+0x68>)
     554:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     556:	6822      	ldr	r2, [r4, #0]
     558:	6c21      	ldr	r1, [r4, #64]	; 0x40
     55a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     55c:	434b      	muls	r3, r1
     55e:	18d0      	adds	r0, r2, r3
     560:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     562:	2000      	movs	r0, #0
     564:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     566:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     568:	1a5b      	subs	r3, r3, r1
     56a:	18d3      	adds	r3, r2, r3
     56c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     56e:	2301      	movs	r3, #1
     570:	425b      	negs	r3, r3
     572:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     574:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
     576:	2d00      	cmp	r5, #0
     578:	d111      	bne.n	59e <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     57a:	6923      	ldr	r3, [r4, #16]
     57c:	2b00      	cmp	r3, #0
     57e:	d005      	beq.n	58c <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     580:	0020      	movs	r0, r4
     582:	3010      	adds	r0, #16
     584:	4b0b      	ldr	r3, [pc, #44]	; (5b4 <xQueueGenericReset+0x6c>)
     586:	4798      	blx	r3
     588:	2801      	cmp	r0, #1
     58a:	d005      	beq.n	598 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
     58c:	4b0a      	ldr	r3, [pc, #40]	; (5b8 <xQueueGenericReset+0x70>)
     58e:	4798      	blx	r3
}
     590:	2001      	movs	r0, #1
     592:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
     594:	b672      	cpsid	i
     596:	e7fe      	b.n	596 <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
     598:	4b08      	ldr	r3, [pc, #32]	; (5bc <xQueueGenericReset+0x74>)
     59a:	4798      	blx	r3
     59c:	e7f6      	b.n	58c <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     59e:	0020      	movs	r0, r4
     5a0:	3010      	adds	r0, #16
     5a2:	4d07      	ldr	r5, [pc, #28]	; (5c0 <xQueueGenericReset+0x78>)
     5a4:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     5a6:	0020      	movs	r0, r4
     5a8:	3024      	adds	r0, #36	; 0x24
     5aa:	47a8      	blx	r5
     5ac:	e7ee      	b.n	58c <xQueueGenericReset+0x44>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	00000185 	.word	0x00000185
     5b4:	000011d5 	.word	0x000011d5
     5b8:	0000019d 	.word	0x0000019d
     5bc:	0000016d 	.word	0x0000016d
     5c0:	0000031b 	.word	0x0000031b

000005c4 <xQueueGenericCreate>:
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	0005      	movs	r5, r0
     5c8:	000e      	movs	r6, r1
	if( uxQueueLength > ( UBaseType_t ) 0 )
     5ca:	2800      	cmp	r0, #0
     5cc:	d019      	beq.n	602 <xQueueGenericCreate+0x3e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     5ce:	2050      	movs	r0, #80	; 0x50
     5d0:	4b0d      	ldr	r3, [pc, #52]	; (608 <xQueueGenericCreate+0x44>)
     5d2:	4798      	blx	r3
     5d4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     5d6:	d014      	beq.n	602 <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     5d8:	0030      	movs	r0, r6
     5da:	4368      	muls	r0, r5
     5dc:	3001      	adds	r0, #1
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
     5de:	4b0a      	ldr	r3, [pc, #40]	; (608 <xQueueGenericCreate+0x44>)
     5e0:	4798      	blx	r3
     5e2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     5e4:	2800      	cmp	r0, #0
     5e6:	d009      	beq.n	5fc <xQueueGenericCreate+0x38>
				pxNewQueue->uxLength = uxQueueLength;
     5e8:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     5ea:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     5ec:	2101      	movs	r1, #1
     5ee:	0020      	movs	r0, r4
     5f0:	4b06      	ldr	r3, [pc, #24]	; (60c <xQueueGenericCreate+0x48>)
     5f2:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
     5f4:	2300      	movs	r3, #0
     5f6:	64e3      	str	r3, [r4, #76]	; 0x4c
}
     5f8:	0020      	movs	r0, r4
     5fa:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxNewQueue );
     5fc:	0020      	movs	r0, r4
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <xQueueGenericCreate+0x4c>)
     600:	4798      	blx	r3
	configASSERT( xReturn );
     602:	b672      	cpsid	i
     604:	e7fe      	b.n	604 <xQueueGenericCreate+0x40>
     606:	46c0      	nop			; (mov r8, r8)
     608:	000002a5 	.word	0x000002a5
     60c:	00000549 	.word	0x00000549
     610:	00000311 	.word	0x00000311

00000614 <xQueueGenericSend>:
{
     614:	b5f0      	push	{r4, r5, r6, r7, lr}
     616:	46ce      	mov	lr, r9
     618:	4647      	mov	r7, r8
     61a:	b580      	push	{r7, lr}
     61c:	b085      	sub	sp, #20
     61e:	0004      	movs	r4, r0
     620:	000f      	movs	r7, r1
     622:	9201      	str	r2, [sp, #4]
     624:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     626:	2800      	cmp	r0, #0
     628:	d00c      	beq.n	644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     62a:	2900      	cmp	r1, #0
     62c:	d00c      	beq.n	648 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     62e:	2d02      	cmp	r5, #2
     630:	d00f      	beq.n	652 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     632:	4b48      	ldr	r3, [pc, #288]	; (754 <xQueueGenericSend+0x140>)
     634:	4798      	blx	r3
     636:	2800      	cmp	r0, #0
     638:	d110      	bne.n	65c <xQueueGenericSend+0x48>
     63a:	9b01      	ldr	r3, [sp, #4]
     63c:	2b00      	cmp	r3, #0
     63e:	d011      	beq.n	664 <xQueueGenericSend+0x50>
     640:	b672      	cpsid	i
     642:	e7fe      	b.n	642 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
     644:	b672      	cpsid	i
     646:	e7fe      	b.n	646 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     648:	6c03      	ldr	r3, [r0, #64]	; 0x40
     64a:	2b00      	cmp	r3, #0
     64c:	d0ef      	beq.n	62e <xQueueGenericSend+0x1a>
     64e:	b672      	cpsid	i
     650:	e7fe      	b.n	650 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     652:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     654:	2b01      	cmp	r3, #1
     656:	d0ec      	beq.n	632 <xQueueGenericSend+0x1e>
     658:	b672      	cpsid	i
     65a:	e7fe      	b.n	65a <xQueueGenericSend+0x46>
     65c:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
     65e:	4b3e      	ldr	r3, [pc, #248]	; (758 <xQueueGenericSend+0x144>)
     660:	4698      	mov	r8, r3
     662:	e047      	b.n	6f4 <xQueueGenericSend+0xe0>
     664:	2600      	movs	r6, #0
     666:	e7fa      	b.n	65e <xQueueGenericSend+0x4a>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     668:	002a      	movs	r2, r5
     66a:	0039      	movs	r1, r7
     66c:	0020      	movs	r0, r4
     66e:	4b3b      	ldr	r3, [pc, #236]	; (75c <xQueueGenericSend+0x148>)
     670:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
     672:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     674:	2b00      	cmp	r3, #0
     676:	d00f      	beq.n	698 <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     678:	0029      	movs	r1, r5
     67a:	0020      	movs	r0, r4
     67c:	4b38      	ldr	r3, [pc, #224]	; (760 <xQueueGenericSend+0x14c>)
     67e:	4798      	blx	r3
     680:	2801      	cmp	r0, #1
     682:	d101      	bne.n	688 <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
     684:	4b37      	ldr	r3, [pc, #220]	; (764 <xQueueGenericSend+0x150>)
     686:	4798      	blx	r3
				taskEXIT_CRITICAL();
     688:	4b37      	ldr	r3, [pc, #220]	; (768 <xQueueGenericSend+0x154>)
     68a:	4798      	blx	r3
				return pdPASS;
     68c:	2001      	movs	r0, #1
}
     68e:	b005      	add	sp, #20
     690:	bc0c      	pop	{r2, r3}
     692:	4690      	mov	r8, r2
     694:	4699      	mov	r9, r3
     696:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     698:	6a63      	ldr	r3, [r4, #36]	; 0x24
     69a:	2b00      	cmp	r3, #0
     69c:	d0f4      	beq.n	688 <xQueueGenericSend+0x74>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     69e:	0020      	movs	r0, r4
     6a0:	3024      	adds	r0, #36	; 0x24
     6a2:	4b32      	ldr	r3, [pc, #200]	; (76c <xQueueGenericSend+0x158>)
     6a4:	4798      	blx	r3
     6a6:	2801      	cmp	r0, #1
     6a8:	d1ee      	bne.n	688 <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
     6aa:	4b2e      	ldr	r3, [pc, #184]	; (764 <xQueueGenericSend+0x150>)
     6ac:	4798      	blx	r3
     6ae:	e7eb      	b.n	688 <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
     6b0:	4b2d      	ldr	r3, [pc, #180]	; (768 <xQueueGenericSend+0x154>)
     6b2:	4798      	blx	r3
					return errQUEUE_FULL;
     6b4:	2000      	movs	r0, #0
     6b6:	e7ea      	b.n	68e <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
     6b8:	4b2b      	ldr	r3, [pc, #172]	; (768 <xQueueGenericSend+0x154>)
     6ba:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     6bc:	a901      	add	r1, sp, #4
     6be:	a802      	add	r0, sp, #8
     6c0:	4b2b      	ldr	r3, [pc, #172]	; (770 <xQueueGenericSend+0x15c>)
     6c2:	4798      	blx	r3
     6c4:	2800      	cmp	r0, #0
     6c6:	d13e      	bne.n	746 <xQueueGenericSend+0x132>
	taskENTER_CRITICAL();
     6c8:	4b23      	ldr	r3, [pc, #140]	; (758 <xQueueGenericSend+0x144>)
     6ca:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     6cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6ce:	4699      	mov	r9, r3
     6d0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
     6d2:	4b25      	ldr	r3, [pc, #148]	; (768 <xQueueGenericSend+0x154>)
     6d4:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     6d6:	45b1      	cmp	r9, r6
     6d8:	d12f      	bne.n	73a <xQueueGenericSend+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     6da:	0020      	movs	r0, r4
     6dc:	3010      	adds	r0, #16
     6de:	9901      	ldr	r1, [sp, #4]
     6e0:	4b24      	ldr	r3, [pc, #144]	; (774 <xQueueGenericSend+0x160>)
     6e2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     6e4:	0020      	movs	r0, r4
     6e6:	4b24      	ldr	r3, [pc, #144]	; (778 <xQueueGenericSend+0x164>)
     6e8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     6ea:	4b24      	ldr	r3, [pc, #144]	; (77c <xQueueGenericSend+0x168>)
     6ec:	4798      	blx	r3
     6ee:	2800      	cmp	r0, #0
     6f0:	d020      	beq.n	734 <xQueueGenericSend+0x120>
     6f2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     6f4:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     6f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     6fa:	4293      	cmp	r3, r2
     6fc:	d3b4      	bcc.n	668 <xQueueGenericSend+0x54>
     6fe:	2d02      	cmp	r5, #2
     700:	d0b2      	beq.n	668 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
     702:	9b01      	ldr	r3, [sp, #4]
     704:	2b00      	cmp	r3, #0
     706:	d0d3      	beq.n	6b0 <xQueueGenericSend+0x9c>
				else if( xEntryTimeSet == pdFALSE )
     708:	2e00      	cmp	r6, #0
     70a:	d102      	bne.n	712 <xQueueGenericSend+0xfe>
					vTaskSetTimeOutState( &xTimeOut );
     70c:	a802      	add	r0, sp, #8
     70e:	4b1c      	ldr	r3, [pc, #112]	; (780 <xQueueGenericSend+0x16c>)
     710:	4798      	blx	r3
		taskEXIT_CRITICAL();
     712:	4b15      	ldr	r3, [pc, #84]	; (768 <xQueueGenericSend+0x154>)
     714:	4798      	blx	r3
		vTaskSuspendAll();
     716:	4b1b      	ldr	r3, [pc, #108]	; (784 <xQueueGenericSend+0x170>)
     718:	4798      	blx	r3
		prvLockQueue( pxQueue );
     71a:	4b0f      	ldr	r3, [pc, #60]	; (758 <xQueueGenericSend+0x144>)
     71c:	4798      	blx	r3
     71e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     720:	3301      	adds	r3, #1
     722:	d101      	bne.n	728 <xQueueGenericSend+0x114>
     724:	2300      	movs	r3, #0
     726:	6463      	str	r3, [r4, #68]	; 0x44
     728:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     72a:	3301      	adds	r3, #1
     72c:	d1c4      	bne.n	6b8 <xQueueGenericSend+0xa4>
     72e:	2300      	movs	r3, #0
     730:	64a3      	str	r3, [r4, #72]	; 0x48
     732:	e7c1      	b.n	6b8 <xQueueGenericSend+0xa4>
					portYIELD_WITHIN_API();
     734:	4b0b      	ldr	r3, [pc, #44]	; (764 <xQueueGenericSend+0x150>)
     736:	4798      	blx	r3
     738:	e7db      	b.n	6f2 <xQueueGenericSend+0xde>
				prvUnlockQueue( pxQueue );
     73a:	0020      	movs	r0, r4
     73c:	4b0e      	ldr	r3, [pc, #56]	; (778 <xQueueGenericSend+0x164>)
     73e:	4798      	blx	r3
				( void ) xTaskResumeAll();
     740:	4b0e      	ldr	r3, [pc, #56]	; (77c <xQueueGenericSend+0x168>)
     742:	4798      	blx	r3
     744:	e7d5      	b.n	6f2 <xQueueGenericSend+0xde>
			prvUnlockQueue( pxQueue );
     746:	0020      	movs	r0, r4
     748:	4b0b      	ldr	r3, [pc, #44]	; (778 <xQueueGenericSend+0x164>)
     74a:	4798      	blx	r3
			( void ) xTaskResumeAll();
     74c:	4b0b      	ldr	r3, [pc, #44]	; (77c <xQueueGenericSend+0x168>)
     74e:	4798      	blx	r3
			return errQUEUE_FULL;
     750:	2000      	movs	r0, #0
     752:	e79c      	b.n	68e <xQueueGenericSend+0x7a>
     754:	00001305 	.word	0x00001305
     758:	00000185 	.word	0x00000185
     75c:	000003a5 	.word	0x000003a5
     760:	00000421 	.word	0x00000421
     764:	0000016d 	.word	0x0000016d
     768:	0000019d 	.word	0x0000019d
     76c:	000011d5 	.word	0x000011d5
     770:	0000127d 	.word	0x0000127d
     774:	0000113d 	.word	0x0000113d
     778:	00000499 	.word	0x00000499
     77c:	00000ea1 	.word	0x00000ea1
     780:	0000125d 	.word	0x0000125d
     784:	00000d4d 	.word	0x00000d4d

00000788 <xQueueCreateMutex>:
	{
     788:	b570      	push	{r4, r5, r6, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     78a:	2050      	movs	r0, #80	; 0x50
     78c:	4b10      	ldr	r3, [pc, #64]	; (7d0 <xQueueCreateMutex+0x48>)
     78e:	4798      	blx	r3
     790:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     792:	d01a      	beq.n	7ca <xQueueCreateMutex+0x42>
			pxNewQueue->pxMutexHolder = NULL;
     794:	2300      	movs	r3, #0
     796:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     798:	6003      	str	r3, [r0, #0]
			pxNewQueue->pcWriteTo = NULL;
     79a:	6083      	str	r3, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
     79c:	60c3      	str	r3, [r0, #12]
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     79e:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
     7a0:	2201      	movs	r2, #1
     7a2:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
     7a4:	6403      	str	r3, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
     7a6:	3a02      	subs	r2, #2
     7a8:	6442      	str	r2, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
     7aa:	6482      	str	r2, [r0, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
     7ac:	64c3      	str	r3, [r0, #76]	; 0x4c
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     7ae:	3010      	adds	r0, #16
     7b0:	4d08      	ldr	r5, [pc, #32]	; (7d4 <xQueueCreateMutex+0x4c>)
     7b2:	47a8      	blx	r5
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     7b4:	0020      	movs	r0, r4
     7b6:	3024      	adds	r0, #36	; 0x24
     7b8:	47a8      	blx	r5
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     7ba:	2300      	movs	r3, #0
     7bc:	2200      	movs	r2, #0
     7be:	2100      	movs	r1, #0
     7c0:	0020      	movs	r0, r4
     7c2:	4d05      	ldr	r5, [pc, #20]	; (7d8 <xQueueCreateMutex+0x50>)
     7c4:	47a8      	blx	r5
	}
     7c6:	0020      	movs	r0, r4
     7c8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxNewQueue );
     7ca:	b672      	cpsid	i
     7cc:	e7fe      	b.n	7cc <xQueueCreateMutex+0x44>
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	000002a5 	.word	0x000002a5
     7d4:	0000031b 	.word	0x0000031b
     7d8:	00000615 	.word	0x00000615

000007dc <xQueueGenericSendFromISR>:
{
     7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7de:	b083      	sub	sp, #12
     7e0:	0004      	movs	r4, r0
     7e2:	000f      	movs	r7, r1
     7e4:	0016      	movs	r6, r2
     7e6:	001d      	movs	r5, r3
	configASSERT( pxQueue );
     7e8:	2800      	cmp	r0, #0
     7ea:	d011      	beq.n	810 <xQueueGenericSendFromISR+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     7ec:	2900      	cmp	r1, #0
     7ee:	d011      	beq.n	814 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     7f0:	2d02      	cmp	r5, #2
     7f2:	d014      	beq.n	81e <xQueueGenericSendFromISR+0x42>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     7f4:	4b26      	ldr	r3, [pc, #152]	; (890 <xQueueGenericSendFromISR+0xb4>)
     7f6:	4798      	blx	r3
     7f8:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     7fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     7fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     7fe:	429a      	cmp	r2, r3
     800:	d82e      	bhi.n	860 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
     802:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     804:	9801      	ldr	r0, [sp, #4]
     806:	4b23      	ldr	r3, [pc, #140]	; (894 <xQueueGenericSendFromISR+0xb8>)
     808:	4798      	blx	r3
}
     80a:	0028      	movs	r0, r5
     80c:	b003      	add	sp, #12
     80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
     810:	b672      	cpsid	i
     812:	e7fe      	b.n	812 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     814:	6c03      	ldr	r3, [r0, #64]	; 0x40
     816:	2b00      	cmp	r3, #0
     818:	d0ea      	beq.n	7f0 <xQueueGenericSendFromISR+0x14>
     81a:	b672      	cpsid	i
     81c:	e7fe      	b.n	81c <xQueueGenericSendFromISR+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     81e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     820:	2b01      	cmp	r3, #1
     822:	d019      	beq.n	858 <xQueueGenericSendFromISR+0x7c>
     824:	b672      	cpsid	i
     826:	e7fe      	b.n	826 <xQueueGenericSendFromISR+0x4a>
			xReturn = pdPASS;
     828:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     82c:	2b00      	cmp	r3, #0
     82e:	d0e9      	beq.n	804 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     830:	0020      	movs	r0, r4
     832:	3024      	adds	r0, #36	; 0x24
     834:	4b18      	ldr	r3, [pc, #96]	; (898 <xQueueGenericSendFromISR+0xbc>)
     836:	4798      	blx	r3
     838:	2800      	cmp	r0, #0
     83a:	d0e3      	beq.n	804 <xQueueGenericSendFromISR+0x28>
								if( pxHigherPriorityTaskWoken != NULL )
     83c:	2e00      	cmp	r6, #0
     83e:	d009      	beq.n	854 <xQueueGenericSendFromISR+0x78>
									*pxHigherPriorityTaskWoken = pdTRUE;
     840:	2301      	movs	r3, #1
     842:	6033      	str	r3, [r6, #0]
     844:	e7de      	b.n	804 <xQueueGenericSendFromISR+0x28>
				++( pxQueue->xTxLock );
     846:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     848:	3301      	adds	r3, #1
     84a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
     84c:	2501      	movs	r5, #1
     84e:	e7d9      	b.n	804 <xQueueGenericSendFromISR+0x28>
     850:	2501      	movs	r5, #1
     852:	e7d7      	b.n	804 <xQueueGenericSendFromISR+0x28>
     854:	2501      	movs	r5, #1
     856:	e7d5      	b.n	804 <xQueueGenericSendFromISR+0x28>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     858:	4b0d      	ldr	r3, [pc, #52]	; (890 <xQueueGenericSendFromISR+0xb4>)
     85a:	4798      	blx	r3
     85c:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     85e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     860:	002a      	movs	r2, r5
     862:	0039      	movs	r1, r7
     864:	0020      	movs	r0, r4
     866:	4b0d      	ldr	r3, [pc, #52]	; (89c <xQueueGenericSendFromISR+0xc0>)
     868:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
     86a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     86c:	3301      	adds	r3, #1
     86e:	d1ea      	bne.n	846 <xQueueGenericSendFromISR+0x6a>
					if( pxQueue->pxQueueSetContainer != NULL )
     870:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     872:	2b00      	cmp	r3, #0
     874:	d0d8      	beq.n	828 <xQueueGenericSendFromISR+0x4c>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     876:	0029      	movs	r1, r5
     878:	0020      	movs	r0, r4
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <xQueueGenericSendFromISR+0xc4>)
     87c:	4798      	blx	r3
			xReturn = pdPASS;
     87e:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     880:	2801      	cmp	r0, #1
     882:	d1bf      	bne.n	804 <xQueueGenericSendFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
     884:	2e00      	cmp	r6, #0
     886:	d0e3      	beq.n	850 <xQueueGenericSendFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
     888:	2301      	movs	r3, #1
     88a:	6033      	str	r3, [r6, #0]
     88c:	e7ba      	b.n	804 <xQueueGenericSendFromISR+0x28>
     88e:	46c0      	nop			; (mov r8, r8)
     890:	000001bd 	.word	0x000001bd
     894:	000001c7 	.word	0x000001c7
     898:	000011d5 	.word	0x000011d5
     89c:	000003a5 	.word	0x000003a5
     8a0:	00000421 	.word	0x00000421

000008a4 <xQueueGenericReceive>:
{
     8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8a6:	46c6      	mov	lr, r8
     8a8:	b500      	push	{lr}
     8aa:	b084      	sub	sp, #16
     8ac:	0004      	movs	r4, r0
     8ae:	000e      	movs	r6, r1
     8b0:	9201      	str	r2, [sp, #4]
     8b2:	001f      	movs	r7, r3
	configASSERT( pxQueue );
     8b4:	2800      	cmp	r0, #0
     8b6:	d00a      	beq.n	8ce <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     8b8:	2900      	cmp	r1, #0
     8ba:	d00a      	beq.n	8d2 <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     8bc:	4b4d      	ldr	r3, [pc, #308]	; (9f4 <xQueueGenericReceive+0x150>)
     8be:	4798      	blx	r3
     8c0:	2800      	cmp	r0, #0
     8c2:	d10b      	bne.n	8dc <xQueueGenericReceive+0x38>
     8c4:	9b01      	ldr	r3, [sp, #4]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d00c      	beq.n	8e4 <xQueueGenericReceive+0x40>
     8ca:	b672      	cpsid	i
     8cc:	e7fe      	b.n	8cc <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
     8ce:	b672      	cpsid	i
     8d0:	e7fe      	b.n	8d0 <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     8d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
     8d4:	2b00      	cmp	r3, #0
     8d6:	d0f1      	beq.n	8bc <xQueueGenericReceive+0x18>
     8d8:	b672      	cpsid	i
     8da:	e7fe      	b.n	8da <xQueueGenericReceive+0x36>
     8dc:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
     8de:	4b46      	ldr	r3, [pc, #280]	; (9f8 <xQueueGenericReceive+0x154>)
     8e0:	4698      	mov	r8, r3
     8e2:	e042      	b.n	96a <xQueueGenericReceive+0xc6>
     8e4:	2500      	movs	r5, #0
     8e6:	e7fa      	b.n	8de <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     8e8:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     8ea:	0031      	movs	r1, r6
     8ec:	0020      	movs	r0, r4
     8ee:	4b43      	ldr	r3, [pc, #268]	; (9fc <xQueueGenericReceive+0x158>)
     8f0:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
     8f2:	2f00      	cmp	r7, #0
     8f4:	d11a      	bne.n	92c <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
     8f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     8f8:	3b01      	subs	r3, #1
     8fa:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     8fc:	6823      	ldr	r3, [r4, #0]
     8fe:	2b00      	cmp	r3, #0
     900:	d102      	bne.n	908 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     902:	4b3f      	ldr	r3, [pc, #252]	; (a00 <xQueueGenericReceive+0x15c>)
     904:	4798      	blx	r3
     906:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     908:	6923      	ldr	r3, [r4, #16]
     90a:	2b00      	cmp	r3, #0
     90c:	d007      	beq.n	91e <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     90e:	0020      	movs	r0, r4
     910:	3010      	adds	r0, #16
     912:	4b3c      	ldr	r3, [pc, #240]	; (a04 <xQueueGenericReceive+0x160>)
     914:	4798      	blx	r3
     916:	2801      	cmp	r0, #1
     918:	d101      	bne.n	91e <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
     91a:	4b3b      	ldr	r3, [pc, #236]	; (a08 <xQueueGenericReceive+0x164>)
     91c:	4798      	blx	r3
				taskEXIT_CRITICAL();
     91e:	4b3b      	ldr	r3, [pc, #236]	; (a0c <xQueueGenericReceive+0x168>)
     920:	4798      	blx	r3
				return pdPASS;
     922:	2001      	movs	r0, #1
}
     924:	b004      	add	sp, #16
     926:	bc04      	pop	{r2}
     928:	4690      	mov	r8, r2
     92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     92c:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
     930:	2b00      	cmp	r3, #0
     932:	d0f4      	beq.n	91e <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     934:	0020      	movs	r0, r4
     936:	3024      	adds	r0, #36	; 0x24
     938:	4b32      	ldr	r3, [pc, #200]	; (a04 <xQueueGenericReceive+0x160>)
     93a:	4798      	blx	r3
     93c:	2800      	cmp	r0, #0
     93e:	d0ee      	beq.n	91e <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
     940:	4b31      	ldr	r3, [pc, #196]	; (a08 <xQueueGenericReceive+0x164>)
     942:	4798      	blx	r3
     944:	e7eb      	b.n	91e <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
     946:	4b31      	ldr	r3, [pc, #196]	; (a0c <xQueueGenericReceive+0x168>)
     948:	4798      	blx	r3
					return errQUEUE_EMPTY;
     94a:	2000      	movs	r0, #0
     94c:	e7ea      	b.n	924 <xQueueGenericReceive+0x80>
						taskENTER_CRITICAL();
     94e:	4b2a      	ldr	r3, [pc, #168]	; (9f8 <xQueueGenericReceive+0x154>)
     950:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     952:	6860      	ldr	r0, [r4, #4]
     954:	4b2e      	ldr	r3, [pc, #184]	; (a10 <xQueueGenericReceive+0x16c>)
     956:	4798      	blx	r3
						taskEXIT_CRITICAL();
     958:	4b2c      	ldr	r3, [pc, #176]	; (a0c <xQueueGenericReceive+0x168>)
     95a:	4798      	blx	r3
     95c:	e033      	b.n	9c6 <xQueueGenericReceive+0x122>
				prvUnlockQueue( pxQueue );
     95e:	0020      	movs	r0, r4
     960:	4b2c      	ldr	r3, [pc, #176]	; (a14 <xQueueGenericReceive+0x170>)
     962:	4798      	blx	r3
				( void ) xTaskResumeAll();
     964:	4b2c      	ldr	r3, [pc, #176]	; (a18 <xQueueGenericReceive+0x174>)
     966:	4798      	blx	r3
     968:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
     96a:	47c0      	blx	r8
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     96c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     96e:	2b00      	cmp	r3, #0
     970:	d1ba      	bne.n	8e8 <xQueueGenericReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
     972:	9b01      	ldr	r3, [sp, #4]
     974:	2b00      	cmp	r3, #0
     976:	d0e6      	beq.n	946 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
     978:	2d00      	cmp	r5, #0
     97a:	d102      	bne.n	982 <xQueueGenericReceive+0xde>
					vTaskSetTimeOutState( &xTimeOut );
     97c:	a802      	add	r0, sp, #8
     97e:	4b27      	ldr	r3, [pc, #156]	; (a1c <xQueueGenericReceive+0x178>)
     980:	4798      	blx	r3
		taskEXIT_CRITICAL();
     982:	4b22      	ldr	r3, [pc, #136]	; (a0c <xQueueGenericReceive+0x168>)
     984:	4798      	blx	r3
		vTaskSuspendAll();
     986:	4b26      	ldr	r3, [pc, #152]	; (a20 <xQueueGenericReceive+0x17c>)
     988:	4798      	blx	r3
		prvLockQueue( pxQueue );
     98a:	4b1b      	ldr	r3, [pc, #108]	; (9f8 <xQueueGenericReceive+0x154>)
     98c:	4798      	blx	r3
     98e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     990:	3301      	adds	r3, #1
     992:	d101      	bne.n	998 <xQueueGenericReceive+0xf4>
     994:	2300      	movs	r3, #0
     996:	6463      	str	r3, [r4, #68]	; 0x44
     998:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     99a:	3301      	adds	r3, #1
     99c:	d101      	bne.n	9a2 <xQueueGenericReceive+0xfe>
     99e:	2300      	movs	r3, #0
     9a0:	64a3      	str	r3, [r4, #72]	; 0x48
     9a2:	4b1a      	ldr	r3, [pc, #104]	; (a0c <xQueueGenericReceive+0x168>)
     9a4:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     9a6:	a901      	add	r1, sp, #4
     9a8:	a802      	add	r0, sp, #8
     9aa:	4b1e      	ldr	r3, [pc, #120]	; (a24 <xQueueGenericReceive+0x180>)
     9ac:	4798      	blx	r3
     9ae:	2800      	cmp	r0, #0
     9b0:	d118      	bne.n	9e4 <xQueueGenericReceive+0x140>
	taskENTER_CRITICAL();
     9b2:	4b11      	ldr	r3, [pc, #68]	; (9f8 <xQueueGenericReceive+0x154>)
     9b4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     9b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     9b8:	4b14      	ldr	r3, [pc, #80]	; (a0c <xQueueGenericReceive+0x168>)
     9ba:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     9bc:	2d00      	cmp	r5, #0
     9be:	d1ce      	bne.n	95e <xQueueGenericReceive+0xba>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     9c0:	6823      	ldr	r3, [r4, #0]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d0c3      	beq.n	94e <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     9c6:	0020      	movs	r0, r4
     9c8:	3024      	adds	r0, #36	; 0x24
     9ca:	9901      	ldr	r1, [sp, #4]
     9cc:	4b16      	ldr	r3, [pc, #88]	; (a28 <xQueueGenericReceive+0x184>)
     9ce:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     9d0:	0020      	movs	r0, r4
     9d2:	4b10      	ldr	r3, [pc, #64]	; (a14 <xQueueGenericReceive+0x170>)
     9d4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     9d6:	4b10      	ldr	r3, [pc, #64]	; (a18 <xQueueGenericReceive+0x174>)
     9d8:	4798      	blx	r3
     9da:	2800      	cmp	r0, #0
     9dc:	d1c4      	bne.n	968 <xQueueGenericReceive+0xc4>
					portYIELD_WITHIN_API();
     9de:	4b0a      	ldr	r3, [pc, #40]	; (a08 <xQueueGenericReceive+0x164>)
     9e0:	4798      	blx	r3
     9e2:	e7c1      	b.n	968 <xQueueGenericReceive+0xc4>
			prvUnlockQueue( pxQueue );
     9e4:	0020      	movs	r0, r4
     9e6:	4b0b      	ldr	r3, [pc, #44]	; (a14 <xQueueGenericReceive+0x170>)
     9e8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     9ea:	4b0b      	ldr	r3, [pc, #44]	; (a18 <xQueueGenericReceive+0x174>)
     9ec:	4798      	blx	r3
			return errQUEUE_EMPTY;
     9ee:	2000      	movs	r0, #0
     9f0:	e798      	b.n	924 <xQueueGenericReceive+0x80>
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	00001305 	.word	0x00001305
     9f8:	00000185 	.word	0x00000185
     9fc:	00000471 	.word	0x00000471
     a00:	000012f9 	.word	0x000012f9
     a04:	000011d5 	.word	0x000011d5
     a08:	0000016d 	.word	0x0000016d
     a0c:	0000019d 	.word	0x0000019d
     a10:	00001325 	.word	0x00001325
     a14:	00000499 	.word	0x00000499
     a18:	00000ea1 	.word	0x00000ea1
     a1c:	0000125d 	.word	0x0000125d
     a20:	00000d4d 	.word	0x00000d4d
     a24:	0000127d 	.word	0x0000127d
     a28:	0000113d 	.word	0x0000113d

00000a2c <vQueueWaitForMessageRestricted>:
	{
     a2c:	b570      	push	{r4, r5, r6, lr}
     a2e:	0004      	movs	r4, r0
     a30:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
     a32:	4b0e      	ldr	r3, [pc, #56]	; (a6c <vQueueWaitForMessageRestricted+0x40>)
     a34:	4798      	blx	r3
     a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
     a38:	3301      	adds	r3, #1
     a3a:	d00b      	beq.n	a54 <vQueueWaitForMessageRestricted+0x28>
     a3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     a3e:	3301      	adds	r3, #1
     a40:	d00b      	beq.n	a5a <vQueueWaitForMessageRestricted+0x2e>
     a42:	4b0b      	ldr	r3, [pc, #44]	; (a70 <vQueueWaitForMessageRestricted+0x44>)
     a44:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a48:	2b00      	cmp	r3, #0
     a4a:	d009      	beq.n	a60 <vQueueWaitForMessageRestricted+0x34>
		prvUnlockQueue( pxQueue );
     a4c:	0020      	movs	r0, r4
     a4e:	4b09      	ldr	r3, [pc, #36]	; (a74 <vQueueWaitForMessageRestricted+0x48>)
     a50:	4798      	blx	r3
	}
     a52:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
     a54:	2300      	movs	r3, #0
     a56:	6463      	str	r3, [r4, #68]	; 0x44
     a58:	e7f0      	b.n	a3c <vQueueWaitForMessageRestricted+0x10>
     a5a:	2300      	movs	r3, #0
     a5c:	64a3      	str	r3, [r4, #72]	; 0x48
     a5e:	e7f0      	b.n	a42 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     a60:	0020      	movs	r0, r4
     a62:	3024      	adds	r0, #36	; 0x24
     a64:	0029      	movs	r1, r5
     a66:	4b04      	ldr	r3, [pc, #16]	; (a78 <vQueueWaitForMessageRestricted+0x4c>)
     a68:	4798      	blx	r3
     a6a:	e7ef      	b.n	a4c <vQueueWaitForMessageRestricted+0x20>
     a6c:	00000185 	.word	0x00000185
     a70:	0000019d 	.word	0x0000019d
     a74:	00000499 	.word	0x00000499
     a78:	00001195 	.word	0x00001195

00000a7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     a7c:	4b08      	ldr	r3, [pc, #32]	; (aa0 <prvResetNextTaskUnblockTime+0x24>)
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	2b00      	cmp	r3, #0
     a84:	d007      	beq.n	a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     a86:	4b06      	ldr	r3, [pc, #24]	; (aa0 <prvResetNextTaskUnblockTime+0x24>)
     a88:	681b      	ldr	r3, [r3, #0]
     a8a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
     a8c:	68db      	ldr	r3, [r3, #12]
     a8e:	685a      	ldr	r2, [r3, #4]
     a90:	4b04      	ldr	r3, [pc, #16]	; (aa4 <prvResetNextTaskUnblockTime+0x28>)
     a92:	601a      	str	r2, [r3, #0]
	}
}
     a94:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
     a96:	2201      	movs	r2, #1
     a98:	4252      	negs	r2, r2
     a9a:	4b02      	ldr	r3, [pc, #8]	; (aa4 <prvResetNextTaskUnblockTime+0x28>)
     a9c:	601a      	str	r2, [r3, #0]
     a9e:	e7f9      	b.n	a94 <prvResetNextTaskUnblockTime+0x18>
     aa0:	20003b04 	.word	0x20003b04
     aa4:	20000004 	.word	0x20000004

00000aa8 <prvAddCurrentTaskToDelayedList>:
{
     aa8:	b510      	push	{r4, lr}
     aaa:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     aac:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <prvAddCurrentTaskToDelayedList+0x40>)
     aae:	681b      	ldr	r3, [r3, #0]
     ab0:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
     ab2:	4b0e      	ldr	r3, [pc, #56]	; (aec <prvAddCurrentTaskToDelayedList+0x44>)
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	4298      	cmp	r0, r3
     ab8:	d30d      	bcc.n	ad6 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
     aba:	4b0d      	ldr	r3, [pc, #52]	; (af0 <prvAddCurrentTaskToDelayedList+0x48>)
     abc:	6818      	ldr	r0, [r3, #0]
     abe:	4b0a      	ldr	r3, [pc, #40]	; (ae8 <prvAddCurrentTaskToDelayedList+0x40>)
     ac0:	6819      	ldr	r1, [r3, #0]
     ac2:	3104      	adds	r1, #4
     ac4:	4b0b      	ldr	r3, [pc, #44]	; (af4 <prvAddCurrentTaskToDelayedList+0x4c>)
     ac6:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
     ac8:	4b0b      	ldr	r3, [pc, #44]	; (af8 <prvAddCurrentTaskToDelayedList+0x50>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	429c      	cmp	r4, r3
     ace:	d209      	bcs.n	ae4 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
     ad0:	4b09      	ldr	r3, [pc, #36]	; (af8 <prvAddCurrentTaskToDelayedList+0x50>)
     ad2:	601c      	str	r4, [r3, #0]
}
     ad4:	e006      	b.n	ae4 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
     ad6:	4b09      	ldr	r3, [pc, #36]	; (afc <prvAddCurrentTaskToDelayedList+0x54>)
     ad8:	6818      	ldr	r0, [r3, #0]
     ada:	4b03      	ldr	r3, [pc, #12]	; (ae8 <prvAddCurrentTaskToDelayedList+0x40>)
     adc:	6819      	ldr	r1, [r3, #0]
     ade:	3104      	adds	r1, #4
     ae0:	4b04      	ldr	r3, [pc, #16]	; (af4 <prvAddCurrentTaskToDelayedList+0x4c>)
     ae2:	4798      	blx	r3
}
     ae4:	bd10      	pop	{r4, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	20003b00 	.word	0x20003b00
     aec:	20003bf4 	.word	0x20003bf4
     af0:	20003b04 	.word	0x20003b04
     af4:	0000034f 	.word	0x0000034f
     af8:	20000004 	.word	0x20000004
     afc:	20003b08 	.word	0x20003b08

00000b00 <xTaskGenericCreate>:
{
     b00:	b5f0      	push	{r4, r5, r6, r7, lr}
     b02:	46d6      	mov	lr, sl
     b04:	b500      	push	{lr}
     b06:	b082      	sub	sp, #8
     b08:	0005      	movs	r5, r0
     b0a:	000f      	movs	r7, r1
     b0c:	0016      	movs	r6, r2
     b0e:	9301      	str	r3, [sp, #4]
     b10:	9b08      	ldr	r3, [sp, #32]
     b12:	469a      	mov	sl, r3
	configASSERT( pxTaskCode );
     b14:	2800      	cmp	r0, #0
     b16:	d003      	beq.n	b20 <xTaskGenericCreate+0x20>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     b18:	2b04      	cmp	r3, #4
     b1a:	d903      	bls.n	b24 <xTaskGenericCreate+0x24>
     b1c:	b672      	cpsid	i
     b1e:	e7fe      	b.n	b1e <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
     b20:	b672      	cpsid	i
     b22:	e7fe      	b.n	b22 <xTaskGenericCreate+0x22>
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
     b24:	2040      	movs	r0, #64	; 0x40
     b26:	4b5a      	ldr	r3, [pc, #360]	; (c90 <xTaskGenericCreate+0x190>)
     b28:	4798      	blx	r3
     b2a:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
     b2c:	d00d      	beq.n	b4a <xTaskGenericCreate+0x4a>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b30:	2b00      	cmp	r3, #0
     b32:	d000      	beq.n	b36 <xTaskGenericCreate+0x36>
     b34:	e094      	b.n	c60 <xTaskGenericCreate+0x160>
     b36:	00b0      	lsls	r0, r6, #2
     b38:	4b55      	ldr	r3, [pc, #340]	; (c90 <xTaskGenericCreate+0x190>)
     b3a:	4798      	blx	r3
     b3c:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
     b3e:	2800      	cmp	r0, #0
     b40:	d000      	beq.n	b44 <xTaskGenericCreate+0x44>
     b42:	e08f      	b.n	c64 <xTaskGenericCreate+0x164>
			vPortFree( pxNewTCB );
     b44:	0020      	movs	r0, r4
     b46:	4b53      	ldr	r3, [pc, #332]	; (c94 <xTaskGenericCreate+0x194>)
     b48:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     b4a:	2001      	movs	r0, #1
     b4c:	4240      	negs	r0, r0
     b4e:	e077      	b.n	c40 <xTaskGenericCreate+0x140>
     b50:	3701      	adds	r7, #1
     b52:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     b54:	428b      	cmp	r3, r1
     b56:	d004      	beq.n	b62 <xTaskGenericCreate+0x62>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
     b58:	7838      	ldrb	r0, [r7, #0]
     b5a:	7018      	strb	r0, [r3, #0]
		if( pcName[ x ] == 0x00 )
     b5c:	7838      	ldrb	r0, [r7, #0]
     b5e:	2800      	cmp	r0, #0
     b60:	d1f6      	bne.n	b50 <xTaskGenericCreate+0x50>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     b62:	2200      	movs	r2, #0
     b64:	233b      	movs	r3, #59	; 0x3b
     b66:	54e2      	strb	r2, [r4, r3]
	pxTCB->uxPriority = uxPriority;
     b68:	4653      	mov	r3, sl
     b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
     b6c:	63e3      	str	r3, [r4, #60]	; 0x3c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     b6e:	1d23      	adds	r3, r4, #4
     b70:	9300      	str	r3, [sp, #0]
     b72:	0018      	movs	r0, r3
     b74:	4f48      	ldr	r7, [pc, #288]	; (c98 <xTaskGenericCreate+0x198>)
     b76:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     b78:	0020      	movs	r0, r4
     b7a:	3018      	adds	r0, #24
     b7c:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     b7e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     b80:	2305      	movs	r3, #5
     b82:	4652      	mov	r2, sl
     b84:	1a9b      	subs	r3, r3, r2
     b86:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     b88:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     b8a:	9a01      	ldr	r2, [sp, #4]
     b8c:	0029      	movs	r1, r5
     b8e:	0030      	movs	r0, r6
     b90:	4b42      	ldr	r3, [pc, #264]	; (c9c <xTaskGenericCreate+0x19c>)
     b92:	4798      	blx	r3
     b94:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
     b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b98:	2b00      	cmp	r3, #0
     b9a:	d000      	beq.n	b9e <xTaskGenericCreate+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     b9c:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
     b9e:	4b40      	ldr	r3, [pc, #256]	; (ca0 <xTaskGenericCreate+0x1a0>)
     ba0:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
     ba2:	4a40      	ldr	r2, [pc, #256]	; (ca4 <xTaskGenericCreate+0x1a4>)
     ba4:	6813      	ldr	r3, [r2, #0]
     ba6:	3301      	adds	r3, #1
     ba8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
     baa:	4b3f      	ldr	r3, [pc, #252]	; (ca8 <xTaskGenericCreate+0x1a8>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d14a      	bne.n	c48 <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
     bb2:	4b3d      	ldr	r3, [pc, #244]	; (ca8 <xTaskGenericCreate+0x1a8>)
     bb4:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     bb6:	6813      	ldr	r3, [r2, #0]
     bb8:	2b01      	cmp	r3, #1
     bba:	d11f      	bne.n	bfc <xTaskGenericCreate+0xfc>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     bbc:	4e3b      	ldr	r6, [pc, #236]	; (cac <xTaskGenericCreate+0x1ac>)
     bbe:	0030      	movs	r0, r6
     bc0:	4d3b      	ldr	r5, [pc, #236]	; (cb0 <xTaskGenericCreate+0x1b0>)
     bc2:	47a8      	blx	r5
     bc4:	0030      	movs	r0, r6
     bc6:	3014      	adds	r0, #20
     bc8:	47a8      	blx	r5
     bca:	0030      	movs	r0, r6
     bcc:	3028      	adds	r0, #40	; 0x28
     bce:	47a8      	blx	r5
     bd0:	0030      	movs	r0, r6
     bd2:	303c      	adds	r0, #60	; 0x3c
     bd4:	47a8      	blx	r5
     bd6:	0030      	movs	r0, r6
     bd8:	3050      	adds	r0, #80	; 0x50
     bda:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
     bdc:	4f35      	ldr	r7, [pc, #212]	; (cb4 <xTaskGenericCreate+0x1b4>)
     bde:	0038      	movs	r0, r7
     be0:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
     be2:	4e35      	ldr	r6, [pc, #212]	; (cb8 <xTaskGenericCreate+0x1b8>)
     be4:	0030      	movs	r0, r6
     be6:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
     be8:	4834      	ldr	r0, [pc, #208]	; (cbc <xTaskGenericCreate+0x1bc>)
     bea:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
     bec:	4834      	ldr	r0, [pc, #208]	; (cc0 <xTaskGenericCreate+0x1c0>)
     bee:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
     bf0:	4834      	ldr	r0, [pc, #208]	; (cc4 <xTaskGenericCreate+0x1c4>)
     bf2:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
     bf4:	4b34      	ldr	r3, [pc, #208]	; (cc8 <xTaskGenericCreate+0x1c8>)
     bf6:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     bf8:	4b34      	ldr	r3, [pc, #208]	; (ccc <xTaskGenericCreate+0x1cc>)
     bfa:	601e      	str	r6, [r3, #0]
			uxTaskNumber++;
     bfc:	4a34      	ldr	r2, [pc, #208]	; (cd0 <xTaskGenericCreate+0x1d0>)
     bfe:	6813      	ldr	r3, [r2, #0]
     c00:	3301      	adds	r3, #1
     c02:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyList( pxNewTCB );
     c04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     c06:	4a33      	ldr	r2, [pc, #204]	; (cd4 <xTaskGenericCreate+0x1d4>)
     c08:	6812      	ldr	r2, [r2, #0]
     c0a:	4293      	cmp	r3, r2
     c0c:	d901      	bls.n	c12 <xTaskGenericCreate+0x112>
     c0e:	4a31      	ldr	r2, [pc, #196]	; (cd4 <xTaskGenericCreate+0x1d4>)
     c10:	6013      	str	r3, [r2, #0]
     c12:	0098      	lsls	r0, r3, #2
     c14:	18c0      	adds	r0, r0, r3
     c16:	0080      	lsls	r0, r0, #2
     c18:	4b24      	ldr	r3, [pc, #144]	; (cac <xTaskGenericCreate+0x1ac>)
     c1a:	1818      	adds	r0, r3, r0
     c1c:	9900      	ldr	r1, [sp, #0]
     c1e:	4b2e      	ldr	r3, [pc, #184]	; (cd8 <xTaskGenericCreate+0x1d8>)
     c20:	4798      	blx	r3
		taskEXIT_CRITICAL();
     c22:	4b2e      	ldr	r3, [pc, #184]	; (cdc <xTaskGenericCreate+0x1dc>)
     c24:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
     c26:	4b2e      	ldr	r3, [pc, #184]	; (ce0 <xTaskGenericCreate+0x1e0>)
     c28:	681b      	ldr	r3, [r3, #0]
     c2a:	2001      	movs	r0, #1
     c2c:	2b00      	cmp	r3, #0
     c2e:	d007      	beq.n	c40 <xTaskGenericCreate+0x140>
			if( pxCurrentTCB->uxPriority < uxPriority )
     c30:	4b1d      	ldr	r3, [pc, #116]	; (ca8 <xTaskGenericCreate+0x1a8>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c36:	459a      	cmp	sl, r3
     c38:	d902      	bls.n	c40 <xTaskGenericCreate+0x140>
				taskYIELD_IF_USING_PREEMPTION();
     c3a:	4b2a      	ldr	r3, [pc, #168]	; (ce4 <xTaskGenericCreate+0x1e4>)
     c3c:	4798      	blx	r3
     c3e:	2001      	movs	r0, #1
}
     c40:	b002      	add	sp, #8
     c42:	bc04      	pop	{r2}
     c44:	4692      	mov	sl, r2
     c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
     c48:	4b25      	ldr	r3, [pc, #148]	; (ce0 <xTaskGenericCreate+0x1e0>)
     c4a:	681b      	ldr	r3, [r3, #0]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d1d5      	bne.n	bfc <xTaskGenericCreate+0xfc>
					if( pxCurrentTCB->uxPriority <= uxPriority )
     c50:	4b15      	ldr	r3, [pc, #84]	; (ca8 <xTaskGenericCreate+0x1a8>)
     c52:	681b      	ldr	r3, [r3, #0]
     c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c56:	459a      	cmp	sl, r3
     c58:	d3d0      	bcc.n	bfc <xTaskGenericCreate+0xfc>
						pxCurrentTCB = pxNewTCB;
     c5a:	4b13      	ldr	r3, [pc, #76]	; (ca8 <xTaskGenericCreate+0x1a8>)
     c5c:	601c      	str	r4, [r3, #0]
     c5e:	e7cd      	b.n	bfc <xTaskGenericCreate+0xfc>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c62:	6303      	str	r3, [r0, #48]	; 0x30
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
     c64:	4b20      	ldr	r3, [pc, #128]	; (ce8 <xTaskGenericCreate+0x1e8>)
     c66:	18f3      	adds	r3, r6, r3
     c68:	009b      	lsls	r3, r3, #2
     c6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
     c6c:	4694      	mov	ip, r2
     c6e:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     c70:	2207      	movs	r2, #7
     c72:	4393      	bics	r3, r2
     c74:	001e      	movs	r6, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
     c76:	783a      	ldrb	r2, [r7, #0]
     c78:	2334      	movs	r3, #52	; 0x34
     c7a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
     c7c:	783b      	ldrb	r3, [r7, #0]
     c7e:	2b00      	cmp	r3, #0
     c80:	d100      	bne.n	c84 <xTaskGenericCreate+0x184>
     c82:	e76e      	b.n	b62 <xTaskGenericCreate+0x62>
     c84:	3701      	adds	r7, #1
     c86:	0023      	movs	r3, r4
     c88:	3335      	adds	r3, #53	; 0x35
     c8a:	0021      	movs	r1, r4
     c8c:	313c      	adds	r1, #60	; 0x3c
     c8e:	e763      	b.n	b58 <xTaskGenericCreate+0x58>
     c90:	000002a5 	.word	0x000002a5
     c94:	00000311 	.word	0x00000311
     c98:	00000331 	.word	0x00000331
     c9c:	00000149 	.word	0x00000149
     ca0:	00000185 	.word	0x00000185
     ca4:	20003b70 	.word	0x20003b70
     ca8:	20003b00 	.word	0x20003b00
     cac:	20003b0c 	.word	0x20003b0c
     cb0:	0000031b 	.word	0x0000031b
     cb4:	20003b88 	.word	0x20003b88
     cb8:	20003b9c 	.word	0x20003b9c
     cbc:	20003bb4 	.word	0x20003bb4
     cc0:	20003be0 	.word	0x20003be0
     cc4:	20003bcc 	.word	0x20003bcc
     cc8:	20003b04 	.word	0x20003b04
     ccc:	20003b08 	.word	0x20003b08
     cd0:	20003b7c 	.word	0x20003b7c
     cd4:	20003b84 	.word	0x20003b84
     cd8:	00000337 	.word	0x00000337
     cdc:	0000019d 	.word	0x0000019d
     ce0:	20003bc8 	.word	0x20003bc8
     ce4:	0000016d 	.word	0x0000016d
     ce8:	3fffffff 	.word	0x3fffffff

00000cec <vTaskStartScheduler>:
{
     cec:	b510      	push	{r4, lr}
     cee:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
     cf0:	2300      	movs	r3, #0
     cf2:	9303      	str	r3, [sp, #12]
     cf4:	9302      	str	r3, [sp, #8]
     cf6:	9301      	str	r3, [sp, #4]
     cf8:	9300      	str	r3, [sp, #0]
     cfa:	2264      	movs	r2, #100	; 0x64
     cfc:	490c      	ldr	r1, [pc, #48]	; (d30 <vTaskStartScheduler+0x44>)
     cfe:	480d      	ldr	r0, [pc, #52]	; (d34 <vTaskStartScheduler+0x48>)
     d00:	4c0d      	ldr	r4, [pc, #52]	; (d38 <vTaskStartScheduler+0x4c>)
     d02:	47a0      	blx	r4
		if( xReturn == pdPASS )
     d04:	2801      	cmp	r0, #1
     d06:	d003      	beq.n	d10 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
     d08:	2800      	cmp	r0, #0
     d0a:	d10e      	bne.n	d2a <vTaskStartScheduler+0x3e>
     d0c:	b672      	cpsid	i
     d0e:	e7fe      	b.n	d0e <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
     d10:	4b0a      	ldr	r3, [pc, #40]	; (d3c <vTaskStartScheduler+0x50>)
     d12:	4798      	blx	r3
	if( xReturn == pdPASS )
     d14:	2801      	cmp	r0, #1
     d16:	d1f7      	bne.n	d08 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
     d18:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
     d1a:	2201      	movs	r2, #1
     d1c:	4b08      	ldr	r3, [pc, #32]	; (d40 <vTaskStartScheduler+0x54>)
     d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
     d20:	2200      	movs	r2, #0
     d22:	4b08      	ldr	r3, [pc, #32]	; (d44 <vTaskStartScheduler+0x58>)
     d24:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
     d26:	4b08      	ldr	r3, [pc, #32]	; (d48 <vTaskStartScheduler+0x5c>)
     d28:	4798      	blx	r3
}
     d2a:	b004      	add	sp, #16
     d2c:	bd10      	pop	{r4, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	000046b4 	.word	0x000046b4
     d34:	00000ffd 	.word	0x00000ffd
     d38:	00000b01 	.word	0x00000b01
     d3c:	000014a9 	.word	0x000014a9
     d40:	20003bc8 	.word	0x20003bc8
     d44:	20003bf4 	.word	0x20003bf4
     d48:	00000265 	.word	0x00000265

00000d4c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
     d4c:	4a02      	ldr	r2, [pc, #8]	; (d58 <vTaskSuspendAll+0xc>)
     d4e:	6813      	ldr	r3, [r2, #0]
     d50:	3301      	adds	r3, #1
     d52:	6013      	str	r3, [r2, #0]
}
     d54:	4770      	bx	lr
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	20003b78 	.word	0x20003b78

00000d5c <xTaskGetTickCount>:
{
     d5c:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
     d5e:	4b04      	ldr	r3, [pc, #16]	; (d70 <xTaskGetTickCount+0x14>)
     d60:	4798      	blx	r3
		xTicks = xTickCount;
     d62:	4b04      	ldr	r3, [pc, #16]	; (d74 <xTaskGetTickCount+0x18>)
     d64:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <xTaskGetTickCount+0x1c>)
     d68:	4798      	blx	r3
}
     d6a:	0020      	movs	r0, r4
     d6c:	bd10      	pop	{r4, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	00000185 	.word	0x00000185
     d74:	20003bf4 	.word	0x20003bf4
     d78:	0000019d 	.word	0x0000019d

00000d7c <xTaskIncrementTick>:
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     d80:	4b39      	ldr	r3, [pc, #228]	; (e68 <xTaskIncrementTick+0xec>)
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	2b00      	cmp	r3, #0
     d86:	d161      	bne.n	e4c <xTaskIncrementTick+0xd0>
		++xTickCount;
     d88:	4b38      	ldr	r3, [pc, #224]	; (e6c <xTaskIncrementTick+0xf0>)
     d8a:	681a      	ldr	r2, [r3, #0]
     d8c:	3201      	adds	r2, #1
     d8e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
     d90:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
     d92:	2e00      	cmp	r6, #0
     d94:	d112      	bne.n	dbc <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
     d96:	4b36      	ldr	r3, [pc, #216]	; (e70 <xTaskIncrementTick+0xf4>)
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	681b      	ldr	r3, [r3, #0]
     d9c:	2b00      	cmp	r3, #0
     d9e:	d001      	beq.n	da4 <xTaskIncrementTick+0x28>
     da0:	b672      	cpsid	i
     da2:	e7fe      	b.n	da2 <xTaskIncrementTick+0x26>
     da4:	4a32      	ldr	r2, [pc, #200]	; (e70 <xTaskIncrementTick+0xf4>)
     da6:	6811      	ldr	r1, [r2, #0]
     da8:	4b32      	ldr	r3, [pc, #200]	; (e74 <xTaskIncrementTick+0xf8>)
     daa:	6818      	ldr	r0, [r3, #0]
     dac:	6010      	str	r0, [r2, #0]
     dae:	6019      	str	r1, [r3, #0]
     db0:	4a31      	ldr	r2, [pc, #196]	; (e78 <xTaskIncrementTick+0xfc>)
     db2:	6813      	ldr	r3, [r2, #0]
     db4:	3301      	adds	r3, #1
     db6:	6013      	str	r3, [r2, #0]
     db8:	4b30      	ldr	r3, [pc, #192]	; (e7c <xTaskIncrementTick+0x100>)
     dba:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
     dbc:	4b30      	ldr	r3, [pc, #192]	; (e80 <xTaskIncrementTick+0x104>)
     dbe:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
     dc0:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
     dc2:	429e      	cmp	r6, r3
     dc4:	d333      	bcc.n	e2e <xTaskIncrementTick+0xb2>
     dc6:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     dc8:	4f29      	ldr	r7, [pc, #164]	; (e70 <xTaskIncrementTick+0xf4>)
     dca:	683b      	ldr	r3, [r7, #0]
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	d029      	beq.n	e26 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     dd2:	4b27      	ldr	r3, [pc, #156]	; (e70 <xTaskIncrementTick+0xf4>)
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	68db      	ldr	r3, [r3, #12]
     dd8:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     dda:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
     ddc:	429e      	cmp	r6, r3
     dde:	d332      	bcc.n	e46 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
     de0:	1d2b      	adds	r3, r5, #4
     de2:	9301      	str	r3, [sp, #4]
     de4:	0018      	movs	r0, r3
     de6:	4b27      	ldr	r3, [pc, #156]	; (e84 <xTaskIncrementTick+0x108>)
     de8:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     dea:	6aab      	ldr	r3, [r5, #40]	; 0x28
     dec:	2b00      	cmp	r3, #0
     dee:	d003      	beq.n	df8 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     df0:	0028      	movs	r0, r5
     df2:	3018      	adds	r0, #24
     df4:	4b23      	ldr	r3, [pc, #140]	; (e84 <xTaskIncrementTick+0x108>)
     df6:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
     df8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     dfa:	4a23      	ldr	r2, [pc, #140]	; (e88 <xTaskIncrementTick+0x10c>)
     dfc:	6812      	ldr	r2, [r2, #0]
     dfe:	4293      	cmp	r3, r2
     e00:	d901      	bls.n	e06 <xTaskIncrementTick+0x8a>
     e02:	4a21      	ldr	r2, [pc, #132]	; (e88 <xTaskIncrementTick+0x10c>)
     e04:	6013      	str	r3, [r2, #0]
     e06:	0098      	lsls	r0, r3, #2
     e08:	18c0      	adds	r0, r0, r3
     e0a:	0080      	lsls	r0, r0, #2
     e0c:	4b1f      	ldr	r3, [pc, #124]	; (e8c <xTaskIncrementTick+0x110>)
     e0e:	1818      	adds	r0, r3, r0
     e10:	9901      	ldr	r1, [sp, #4]
     e12:	4b1f      	ldr	r3, [pc, #124]	; (e90 <xTaskIncrementTick+0x114>)
     e14:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     e16:	4b1f      	ldr	r3, [pc, #124]	; (e94 <xTaskIncrementTick+0x118>)
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e1e:	429a      	cmp	r2, r3
     e20:	d3d3      	bcc.n	dca <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
     e22:	2401      	movs	r4, #1
     e24:	e7d1      	b.n	dca <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
     e26:	2201      	movs	r2, #1
     e28:	4252      	negs	r2, r2
     e2a:	4b15      	ldr	r3, [pc, #84]	; (e80 <xTaskIncrementTick+0x104>)
     e2c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     e2e:	4b19      	ldr	r3, [pc, #100]	; (e94 <xTaskIncrementTick+0x118>)
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e34:	0093      	lsls	r3, r2, #2
     e36:	189b      	adds	r3, r3, r2
     e38:	009b      	lsls	r3, r3, #2
     e3a:	4a14      	ldr	r2, [pc, #80]	; (e8c <xTaskIncrementTick+0x110>)
     e3c:	589b      	ldr	r3, [r3, r2]
     e3e:	2b01      	cmp	r3, #1
     e40:	d909      	bls.n	e56 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
     e42:	2401      	movs	r4, #1
     e44:	e007      	b.n	e56 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
     e46:	4a0e      	ldr	r2, [pc, #56]	; (e80 <xTaskIncrementTick+0x104>)
     e48:	6013      	str	r3, [r2, #0]
							break;
     e4a:	e7f0      	b.n	e2e <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
     e4c:	4a12      	ldr	r2, [pc, #72]	; (e98 <xTaskIncrementTick+0x11c>)
     e4e:	6813      	ldr	r3, [r2, #0]
     e50:	3301      	adds	r3, #1
     e52:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
     e54:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
     e56:	4b11      	ldr	r3, [pc, #68]	; (e9c <xTaskIncrementTick+0x120>)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d000      	beq.n	e60 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
     e5e:	2401      	movs	r4, #1
}
     e60:	0020      	movs	r0, r4
     e62:	b003      	add	sp, #12
     e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	20003b78 	.word	0x20003b78
     e6c:	20003bf4 	.word	0x20003bf4
     e70:	20003b04 	.word	0x20003b04
     e74:	20003b08 	.word	0x20003b08
     e78:	20003bb0 	.word	0x20003bb0
     e7c:	00000a7d 	.word	0x00000a7d
     e80:	20000004 	.word	0x20000004
     e84:	0000037d 	.word	0x0000037d
     e88:	20003b84 	.word	0x20003b84
     e8c:	20003b0c 	.word	0x20003b0c
     e90:	00000337 	.word	0x00000337
     e94:	20003b00 	.word	0x20003b00
     e98:	20003b74 	.word	0x20003b74
     e9c:	20003bf8 	.word	0x20003bf8

00000ea0 <xTaskResumeAll>:
{
     ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
     ea2:	4b31      	ldr	r3, [pc, #196]	; (f68 <xTaskResumeAll+0xc8>)
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	2b00      	cmp	r3, #0
     ea8:	d101      	bne.n	eae <xTaskResumeAll+0xe>
     eaa:	b672      	cpsid	i
     eac:	e7fe      	b.n	eac <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
     eae:	4b2f      	ldr	r3, [pc, #188]	; (f6c <xTaskResumeAll+0xcc>)
     eb0:	4798      	blx	r3
		--uxSchedulerSuspended;
     eb2:	4b2d      	ldr	r3, [pc, #180]	; (f68 <xTaskResumeAll+0xc8>)
     eb4:	681a      	ldr	r2, [r3, #0]
     eb6:	3a01      	subs	r2, #1
     eb8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     eba:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
     ebc:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     ebe:	2b00      	cmp	r3, #0
     ec0:	d103      	bne.n	eca <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     ec2:	4b2b      	ldr	r3, [pc, #172]	; (f70 <xTaskResumeAll+0xd0>)
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	2b00      	cmp	r3, #0
     ec8:	d12a      	bne.n	f20 <xTaskResumeAll+0x80>
	taskEXIT_CRITICAL();
     eca:	4b2a      	ldr	r3, [pc, #168]	; (f74 <xTaskResumeAll+0xd4>)
     ecc:	4798      	blx	r3
}
     ece:	0020      	movs	r0, r4
     ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
     ed2:	0098      	lsls	r0, r3, #2
     ed4:	18c0      	adds	r0, r0, r3
     ed6:	0080      	lsls	r0, r0, #2
     ed8:	4b27      	ldr	r3, [pc, #156]	; (f78 <xTaskResumeAll+0xd8>)
     eda:	1818      	adds	r0, r3, r0
     edc:	0029      	movs	r1, r5
     ede:	4b27      	ldr	r3, [pc, #156]	; (f7c <xTaskResumeAll+0xdc>)
     ee0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     ee2:	4b27      	ldr	r3, [pc, #156]	; (f80 <xTaskResumeAll+0xe0>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     eea:	429a      	cmp	r2, r3
     eec:	d214      	bcs.n	f18 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     eee:	6833      	ldr	r3, [r6, #0]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d018      	beq.n	f26 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     ef4:	68e3      	ldr	r3, [r4, #12]
     ef6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     ef8:	0038      	movs	r0, r7
     efa:	3018      	adds	r0, #24
     efc:	4b21      	ldr	r3, [pc, #132]	; (f84 <xTaskResumeAll+0xe4>)
     efe:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
     f00:	1d3d      	adds	r5, r7, #4
     f02:	0028      	movs	r0, r5
     f04:	4b1f      	ldr	r3, [pc, #124]	; (f84 <xTaskResumeAll+0xe4>)
     f06:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f0a:	4a1f      	ldr	r2, [pc, #124]	; (f88 <xTaskResumeAll+0xe8>)
     f0c:	6812      	ldr	r2, [r2, #0]
     f0e:	4293      	cmp	r3, r2
     f10:	d9df      	bls.n	ed2 <xTaskResumeAll+0x32>
     f12:	4a1d      	ldr	r2, [pc, #116]	; (f88 <xTaskResumeAll+0xe8>)
     f14:	6013      	str	r3, [r2, #0]
     f16:	e7dc      	b.n	ed2 <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
     f18:	2201      	movs	r2, #1
     f1a:	4b1c      	ldr	r3, [pc, #112]	; (f8c <xTaskResumeAll+0xec>)
     f1c:	601a      	str	r2, [r3, #0]
     f1e:	e7e6      	b.n	eee <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     f20:	4e1b      	ldr	r6, [pc, #108]	; (f90 <xTaskResumeAll+0xf0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     f22:	0034      	movs	r4, r6
     f24:	e7e3      	b.n	eee <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
     f26:	4b1b      	ldr	r3, [pc, #108]	; (f94 <xTaskResumeAll+0xf4>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d013      	beq.n	f56 <xTaskResumeAll+0xb6>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
     f2e:	4b19      	ldr	r3, [pc, #100]	; (f94 <xTaskResumeAll+0xf4>)
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	2b00      	cmp	r3, #0
     f34:	d00f      	beq.n	f56 <xTaskResumeAll+0xb6>
						if( xTaskIncrementTick() != pdFALSE )
     f36:	4e18      	ldr	r6, [pc, #96]	; (f98 <xTaskResumeAll+0xf8>)
							xYieldPending = pdTRUE;
     f38:	4d14      	ldr	r5, [pc, #80]	; (f8c <xTaskResumeAll+0xec>)
						--uxPendedTicks;
     f3a:	4c16      	ldr	r4, [pc, #88]	; (f94 <xTaskResumeAll+0xf4>)
     f3c:	e005      	b.n	f4a <xTaskResumeAll+0xaa>
     f3e:	6823      	ldr	r3, [r4, #0]
     f40:	3b01      	subs	r3, #1
     f42:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
     f44:	6823      	ldr	r3, [r4, #0]
     f46:	2b00      	cmp	r3, #0
     f48:	d005      	beq.n	f56 <xTaskResumeAll+0xb6>
						if( xTaskIncrementTick() != pdFALSE )
     f4a:	47b0      	blx	r6
     f4c:	2800      	cmp	r0, #0
     f4e:	d0f6      	beq.n	f3e <xTaskResumeAll+0x9e>
							xYieldPending = pdTRUE;
     f50:	2301      	movs	r3, #1
     f52:	602b      	str	r3, [r5, #0]
     f54:	e7f3      	b.n	f3e <xTaskResumeAll+0x9e>
				if( xYieldPending == pdTRUE )
     f56:	4b0d      	ldr	r3, [pc, #52]	; (f8c <xTaskResumeAll+0xec>)
     f58:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
     f5a:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
     f5c:	2b01      	cmp	r3, #1
     f5e:	d1b4      	bne.n	eca <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
     f60:	4b0e      	ldr	r3, [pc, #56]	; (f9c <xTaskResumeAll+0xfc>)
     f62:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
     f64:	3401      	adds	r4, #1
     f66:	e7b0      	b.n	eca <xTaskResumeAll+0x2a>
     f68:	20003b78 	.word	0x20003b78
     f6c:	00000185 	.word	0x00000185
     f70:	20003b70 	.word	0x20003b70
     f74:	0000019d 	.word	0x0000019d
     f78:	20003b0c 	.word	0x20003b0c
     f7c:	00000337 	.word	0x00000337
     f80:	20003b00 	.word	0x20003b00
     f84:	0000037d 	.word	0x0000037d
     f88:	20003b84 	.word	0x20003b84
     f8c:	20003bf8 	.word	0x20003bf8
     f90:	20003bb4 	.word	0x20003bb4
     f94:	20003b74 	.word	0x20003b74
     f98:	00000d7d 	.word	0x00000d7d
     f9c:	0000016d 	.word	0x0000016d

00000fa0 <vTaskDelay>:
	{
     fa0:	b510      	push	{r4, lr}
     fa2:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
     fa4:	d016      	beq.n	fd4 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
     fa6:	4b0d      	ldr	r3, [pc, #52]	; (fdc <vTaskDelay+0x3c>)
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d001      	beq.n	fb2 <vTaskDelay+0x12>
     fae:	b672      	cpsid	i
     fb0:	e7fe      	b.n	fb0 <vTaskDelay+0x10>
			vTaskSuspendAll();
     fb2:	4b0b      	ldr	r3, [pc, #44]	; (fe0 <vTaskDelay+0x40>)
     fb4:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
     fb6:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <vTaskDelay+0x44>)
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	18e4      	adds	r4, r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
     fbc:	4b0a      	ldr	r3, [pc, #40]	; (fe8 <vTaskDelay+0x48>)
     fbe:	6818      	ldr	r0, [r3, #0]
     fc0:	3004      	adds	r0, #4
     fc2:	4b0a      	ldr	r3, [pc, #40]	; (fec <vTaskDelay+0x4c>)
     fc4:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     fc6:	0020      	movs	r0, r4
     fc8:	4b09      	ldr	r3, [pc, #36]	; (ff0 <vTaskDelay+0x50>)
     fca:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
     fcc:	4b09      	ldr	r3, [pc, #36]	; (ff4 <vTaskDelay+0x54>)
     fce:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
     fd0:	2800      	cmp	r0, #0
     fd2:	d101      	bne.n	fd8 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
     fd4:	4b08      	ldr	r3, [pc, #32]	; (ff8 <vTaskDelay+0x58>)
     fd6:	4798      	blx	r3
	}
     fd8:	bd10      	pop	{r4, pc}
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	20003b78 	.word	0x20003b78
     fe0:	00000d4d 	.word	0x00000d4d
     fe4:	20003bf4 	.word	0x20003bf4
     fe8:	20003b00 	.word	0x20003b00
     fec:	0000037d 	.word	0x0000037d
     ff0:	00000aa9 	.word	0x00000aa9
     ff4:	00000ea1 	.word	0x00000ea1
     ff8:	0000016d 	.word	0x0000016d

00000ffc <prvIdleTask>:
{
     ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ffe:	46ce      	mov	lr, r9
    1000:	4647      	mov	r7, r8
    1002:	b580      	push	{r7, lr}
			vTaskSuspendAll();
    1004:	4b16      	ldr	r3, [pc, #88]	; (1060 <prvIdleTask+0x64>)
    1006:	4698      	mov	r8, r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1008:	4f16      	ldr	r7, [pc, #88]	; (1064 <prvIdleTask+0x68>)
			( void ) xTaskResumeAll();
    100a:	4e17      	ldr	r6, [pc, #92]	; (1068 <prvIdleTask+0x6c>)
    100c:	e026      	b.n	105c <prvIdleTask+0x60>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    100e:	4b17      	ldr	r3, [pc, #92]	; (106c <prvIdleTask+0x70>)
    1010:	681b      	ldr	r3, [r3, #0]
    1012:	2b01      	cmp	r3, #1
    1014:	d820      	bhi.n	1058 <prvIdleTask+0x5c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1016:	682b      	ldr	r3, [r5, #0]
    1018:	2b00      	cmp	r3, #0
    101a:	d0f8      	beq.n	100e <prvIdleTask+0x12>
			vTaskSuspendAll();
    101c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    101e:	683c      	ldr	r4, [r7, #0]
			( void ) xTaskResumeAll();
    1020:	47b0      	blx	r6
			if( xListIsEmpty == pdFALSE )
    1022:	2c00      	cmp	r4, #0
    1024:	d0f7      	beq.n	1016 <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
    1026:	4b12      	ldr	r3, [pc, #72]	; (1070 <prvIdleTask+0x74>)
    1028:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    102a:	4b0e      	ldr	r3, [pc, #56]	; (1064 <prvIdleTask+0x68>)
    102c:	68db      	ldr	r3, [r3, #12]
    102e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1030:	1d20      	adds	r0, r4, #4
    1032:	4b10      	ldr	r3, [pc, #64]	; (1074 <prvIdleTask+0x78>)
    1034:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1036:	4a10      	ldr	r2, [pc, #64]	; (1078 <prvIdleTask+0x7c>)
    1038:	6813      	ldr	r3, [r2, #0]
    103a:	3b01      	subs	r3, #1
    103c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    103e:	4a0f      	ldr	r2, [pc, #60]	; (107c <prvIdleTask+0x80>)
    1040:	6813      	ldr	r3, [r2, #0]
    1042:	3b01      	subs	r3, #1
    1044:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
    1046:	4b0e      	ldr	r3, [pc, #56]	; (1080 <prvIdleTask+0x84>)
    1048:	4798      	blx	r3
		vPortFreeAligned( pxTCB->pxStack );
    104a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <prvIdleTask+0x88>)
    104e:	4699      	mov	r9, r3
    1050:	4798      	blx	r3
		vPortFree( pxTCB );
    1052:	0020      	movs	r0, r4
    1054:	47c8      	blx	r9
    1056:	e7de      	b.n	1016 <prvIdleTask+0x1a>
				taskYIELD();
    1058:	4b0b      	ldr	r3, [pc, #44]	; (1088 <prvIdleTask+0x8c>)
    105a:	4798      	blx	r3
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    105c:	4d07      	ldr	r5, [pc, #28]	; (107c <prvIdleTask+0x80>)
    105e:	e7da      	b.n	1016 <prvIdleTask+0x1a>
    1060:	00000d4d 	.word	0x00000d4d
    1064:	20003be0 	.word	0x20003be0
    1068:	00000ea1 	.word	0x00000ea1
    106c:	20003b0c 	.word	0x20003b0c
    1070:	00000185 	.word	0x00000185
    1074:	0000037d 	.word	0x0000037d
    1078:	20003b70 	.word	0x20003b70
    107c:	20003b80 	.word	0x20003b80
    1080:	0000019d 	.word	0x0000019d
    1084:	00000311 	.word	0x00000311
    1088:	0000016d 	.word	0x0000016d

0000108c <vTaskSwitchContext>:
{
    108c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    108e:	4b26      	ldr	r3, [pc, #152]	; (1128 <vTaskSwitchContext+0x9c>)
    1090:	681b      	ldr	r3, [r3, #0]
    1092:	2b00      	cmp	r3, #0
    1094:	d121      	bne.n	10da <vTaskSwitchContext+0x4e>
		xYieldPending = pdFALSE;
    1096:	2200      	movs	r2, #0
    1098:	4b24      	ldr	r3, [pc, #144]	; (112c <vTaskSwitchContext+0xa0>)
    109a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    109c:	4b24      	ldr	r3, [pc, #144]	; (1130 <vTaskSwitchContext+0xa4>)
    109e:	681a      	ldr	r2, [r3, #0]
    10a0:	0093      	lsls	r3, r2, #2
    10a2:	189b      	adds	r3, r3, r2
    10a4:	009b      	lsls	r3, r3, #2
    10a6:	4a23      	ldr	r2, [pc, #140]	; (1134 <vTaskSwitchContext+0xa8>)
    10a8:	589b      	ldr	r3, [r3, r2]
    10aa:	2b00      	cmp	r3, #0
    10ac:	d119      	bne.n	10e2 <vTaskSwitchContext+0x56>
    10ae:	4b20      	ldr	r3, [pc, #128]	; (1130 <vTaskSwitchContext+0xa4>)
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d00f      	beq.n	10d6 <vTaskSwitchContext+0x4a>
    10b6:	4a1e      	ldr	r2, [pc, #120]	; (1130 <vTaskSwitchContext+0xa4>)
    10b8:	4c1e      	ldr	r4, [pc, #120]	; (1134 <vTaskSwitchContext+0xa8>)
    10ba:	0010      	movs	r0, r2
    10bc:	6813      	ldr	r3, [r2, #0]
    10be:	3b01      	subs	r3, #1
    10c0:	6013      	str	r3, [r2, #0]
    10c2:	6811      	ldr	r1, [r2, #0]
    10c4:	008b      	lsls	r3, r1, #2
    10c6:	185b      	adds	r3, r3, r1
    10c8:	009b      	lsls	r3, r3, #2
    10ca:	591b      	ldr	r3, [r3, r4]
    10cc:	2b00      	cmp	r3, #0
    10ce:	d108      	bne.n	10e2 <vTaskSwitchContext+0x56>
    10d0:	6803      	ldr	r3, [r0, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d1f2      	bne.n	10bc <vTaskSwitchContext+0x30>
    10d6:	b672      	cpsid	i
    10d8:	e7fe      	b.n	10d8 <vTaskSwitchContext+0x4c>
		xYieldPending = pdTRUE;
    10da:	2201      	movs	r2, #1
    10dc:	4b13      	ldr	r3, [pc, #76]	; (112c <vTaskSwitchContext+0xa0>)
    10de:	601a      	str	r2, [r3, #0]
}
    10e0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    10e2:	4b13      	ldr	r3, [pc, #76]	; (1130 <vTaskSwitchContext+0xa4>)
    10e4:	681a      	ldr	r2, [r3, #0]
    10e6:	4813      	ldr	r0, [pc, #76]	; (1134 <vTaskSwitchContext+0xa8>)
    10e8:	0093      	lsls	r3, r2, #2
    10ea:	1899      	adds	r1, r3, r2
    10ec:	0089      	lsls	r1, r1, #2
    10ee:	1841      	adds	r1, r0, r1
    10f0:	684c      	ldr	r4, [r1, #4]
    10f2:	6864      	ldr	r4, [r4, #4]
    10f4:	604c      	str	r4, [r1, #4]
    10f6:	189b      	adds	r3, r3, r2
    10f8:	009b      	lsls	r3, r3, #2
    10fa:	3308      	adds	r3, #8
    10fc:	18c3      	adds	r3, r0, r3
    10fe:	429c      	cmp	r4, r3
    1100:	d009      	beq.n	1116 <vTaskSwitchContext+0x8a>
    1102:	0093      	lsls	r3, r2, #2
    1104:	189a      	adds	r2, r3, r2
    1106:	0092      	lsls	r2, r2, #2
    1108:	4b0a      	ldr	r3, [pc, #40]	; (1134 <vTaskSwitchContext+0xa8>)
    110a:	189a      	adds	r2, r3, r2
    110c:	6853      	ldr	r3, [r2, #4]
    110e:	68da      	ldr	r2, [r3, #12]
    1110:	4b09      	ldr	r3, [pc, #36]	; (1138 <vTaskSwitchContext+0xac>)
    1112:	601a      	str	r2, [r3, #0]
}
    1114:	e7e4      	b.n	10e0 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1116:	6860      	ldr	r0, [r4, #4]
    1118:	0093      	lsls	r3, r2, #2
    111a:	189b      	adds	r3, r3, r2
    111c:	009b      	lsls	r3, r3, #2
    111e:	4905      	ldr	r1, [pc, #20]	; (1134 <vTaskSwitchContext+0xa8>)
    1120:	18cb      	adds	r3, r1, r3
    1122:	6058      	str	r0, [r3, #4]
    1124:	e7ed      	b.n	1102 <vTaskSwitchContext+0x76>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	20003b78 	.word	0x20003b78
    112c:	20003bf8 	.word	0x20003bf8
    1130:	20003b84 	.word	0x20003b84
    1134:	20003b0c 	.word	0x20003b0c
    1138:	20003b00 	.word	0x20003b00

0000113c <vTaskPlaceOnEventList>:
{
    113c:	b570      	push	{r4, r5, r6, lr}
    113e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    1140:	2800      	cmp	r0, #0
    1142:	d010      	beq.n	1166 <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1144:	4d0c      	ldr	r5, [pc, #48]	; (1178 <vTaskPlaceOnEventList+0x3c>)
    1146:	6829      	ldr	r1, [r5, #0]
    1148:	3118      	adds	r1, #24
    114a:	4b0c      	ldr	r3, [pc, #48]	; (117c <vTaskPlaceOnEventList+0x40>)
    114c:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    114e:	6828      	ldr	r0, [r5, #0]
    1150:	3004      	adds	r0, #4
    1152:	4b0b      	ldr	r3, [pc, #44]	; (1180 <vTaskPlaceOnEventList+0x44>)
    1154:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
    1156:	1c63      	adds	r3, r4, #1
    1158:	d007      	beq.n	116a <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <vTaskPlaceOnEventList+0x48>)
    115c:	6818      	ldr	r0, [r3, #0]
    115e:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1160:	4b09      	ldr	r3, [pc, #36]	; (1188 <vTaskPlaceOnEventList+0x4c>)
    1162:	4798      	blx	r3
}
    1164:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
    1166:	b672      	cpsid	i
    1168:	e7fe      	b.n	1168 <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    116a:	4b03      	ldr	r3, [pc, #12]	; (1178 <vTaskPlaceOnEventList+0x3c>)
    116c:	6819      	ldr	r1, [r3, #0]
    116e:	3104      	adds	r1, #4
    1170:	4806      	ldr	r0, [pc, #24]	; (118c <vTaskPlaceOnEventList+0x50>)
    1172:	4b07      	ldr	r3, [pc, #28]	; (1190 <vTaskPlaceOnEventList+0x54>)
    1174:	4798      	blx	r3
    1176:	e7f5      	b.n	1164 <vTaskPlaceOnEventList+0x28>
    1178:	20003b00 	.word	0x20003b00
    117c:	0000034f 	.word	0x0000034f
    1180:	0000037d 	.word	0x0000037d
    1184:	20003bf4 	.word	0x20003bf4
    1188:	00000aa9 	.word	0x00000aa9
    118c:	20003bcc 	.word	0x20003bcc
    1190:	00000337 	.word	0x00000337

00001194 <vTaskPlaceOnEventListRestricted>:
	{
    1194:	b570      	push	{r4, r5, r6, lr}
    1196:	000d      	movs	r5, r1
		configASSERT( pxEventList );
    1198:	2800      	cmp	r0, #0
    119a:	d101      	bne.n	11a0 <vTaskPlaceOnEventListRestricted+0xc>
    119c:	b672      	cpsid	i
    119e:	e7fe      	b.n	119e <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    11a0:	4c07      	ldr	r4, [pc, #28]	; (11c0 <vTaskPlaceOnEventListRestricted+0x2c>)
    11a2:	6821      	ldr	r1, [r4, #0]
    11a4:	3118      	adds	r1, #24
    11a6:	4b07      	ldr	r3, [pc, #28]	; (11c4 <vTaskPlaceOnEventListRestricted+0x30>)
    11a8:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    11aa:	6820      	ldr	r0, [r4, #0]
    11ac:	3004      	adds	r0, #4
    11ae:	4b06      	ldr	r3, [pc, #24]	; (11c8 <vTaskPlaceOnEventListRestricted+0x34>)
    11b0:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
    11b2:	4b06      	ldr	r3, [pc, #24]	; (11cc <vTaskPlaceOnEventListRestricted+0x38>)
    11b4:	6818      	ldr	r0, [r3, #0]
    11b6:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    11b8:	4b05      	ldr	r3, [pc, #20]	; (11d0 <vTaskPlaceOnEventListRestricted+0x3c>)
    11ba:	4798      	blx	r3
	}
    11bc:	bd70      	pop	{r4, r5, r6, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	20003b00 	.word	0x20003b00
    11c4:	00000337 	.word	0x00000337
    11c8:	0000037d 	.word	0x0000037d
    11cc:	20003bf4 	.word	0x20003bf4
    11d0:	00000aa9 	.word	0x00000aa9

000011d4 <xTaskRemoveFromEventList>:
{
    11d4:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    11d6:	68c3      	ldr	r3, [r0, #12]
    11d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    11da:	2c00      	cmp	r4, #0
    11dc:	d027      	beq.n	122e <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    11de:	0025      	movs	r5, r4
    11e0:	3518      	adds	r5, #24
    11e2:	0028      	movs	r0, r5
    11e4:	4b15      	ldr	r3, [pc, #84]	; (123c <xTaskRemoveFromEventList+0x68>)
    11e6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    11e8:	4b15      	ldr	r3, [pc, #84]	; (1240 <xTaskRemoveFromEventList+0x6c>)
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d120      	bne.n	1232 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    11f0:	1d25      	adds	r5, r4, #4
    11f2:	0028      	movs	r0, r5
    11f4:	4b11      	ldr	r3, [pc, #68]	; (123c <xTaskRemoveFromEventList+0x68>)
    11f6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    11f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11fa:	4a12      	ldr	r2, [pc, #72]	; (1244 <xTaskRemoveFromEventList+0x70>)
    11fc:	6812      	ldr	r2, [r2, #0]
    11fe:	4293      	cmp	r3, r2
    1200:	d901      	bls.n	1206 <xTaskRemoveFromEventList+0x32>
    1202:	4a10      	ldr	r2, [pc, #64]	; (1244 <xTaskRemoveFromEventList+0x70>)
    1204:	6013      	str	r3, [r2, #0]
    1206:	0098      	lsls	r0, r3, #2
    1208:	18c0      	adds	r0, r0, r3
    120a:	0080      	lsls	r0, r0, #2
    120c:	4b0e      	ldr	r3, [pc, #56]	; (1248 <xTaskRemoveFromEventList+0x74>)
    120e:	1818      	adds	r0, r3, r0
    1210:	0029      	movs	r1, r5
    1212:	4b0e      	ldr	r3, [pc, #56]	; (124c <xTaskRemoveFromEventList+0x78>)
    1214:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1216:	4b0e      	ldr	r3, [pc, #56]	; (1250 <xTaskRemoveFromEventList+0x7c>)
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    121e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1220:	429a      	cmp	r2, r3
    1222:	d903      	bls.n	122c <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    1224:	2201      	movs	r2, #1
    1226:	4b0b      	ldr	r3, [pc, #44]	; (1254 <xTaskRemoveFromEventList+0x80>)
    1228:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    122a:	3001      	adds	r0, #1
}
    122c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    122e:	b672      	cpsid	i
    1230:	e7fe      	b.n	1230 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1232:	0029      	movs	r1, r5
    1234:	4808      	ldr	r0, [pc, #32]	; (1258 <xTaskRemoveFromEventList+0x84>)
    1236:	4b05      	ldr	r3, [pc, #20]	; (124c <xTaskRemoveFromEventList+0x78>)
    1238:	4798      	blx	r3
    123a:	e7ec      	b.n	1216 <xTaskRemoveFromEventList+0x42>
    123c:	0000037d 	.word	0x0000037d
    1240:	20003b78 	.word	0x20003b78
    1244:	20003b84 	.word	0x20003b84
    1248:	20003b0c 	.word	0x20003b0c
    124c:	00000337 	.word	0x00000337
    1250:	20003b00 	.word	0x20003b00
    1254:	20003bf8 	.word	0x20003bf8
    1258:	20003bb4 	.word	0x20003bb4

0000125c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
    125c:	2800      	cmp	r0, #0
    125e:	d006      	beq.n	126e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1260:	4b04      	ldr	r3, [pc, #16]	; (1274 <vTaskSetTimeOutState+0x18>)
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1266:	4b04      	ldr	r3, [pc, #16]	; (1278 <vTaskSetTimeOutState+0x1c>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	6043      	str	r3, [r0, #4]
}
    126c:	4770      	bx	lr
	configASSERT( pxTimeOut );
    126e:	b672      	cpsid	i
    1270:	e7fe      	b.n	1270 <vTaskSetTimeOutState+0x14>
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	20003bb0 	.word	0x20003bb0
    1278:	20003bf4 	.word	0x20003bf4

0000127c <xTaskCheckForTimeOut>:
{
    127c:	b570      	push	{r4, r5, r6, lr}
    127e:	0004      	movs	r4, r0
    1280:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
    1282:	2800      	cmp	r0, #0
    1284:	d01a      	beq.n	12bc <xTaskCheckForTimeOut+0x40>
	configASSERT( pxTicksToWait );
    1286:	2900      	cmp	r1, #0
    1288:	d01a      	beq.n	12c0 <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
    128a:	4b13      	ldr	r3, [pc, #76]	; (12d8 <xTaskCheckForTimeOut+0x5c>)
    128c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    128e:	4b13      	ldr	r3, [pc, #76]	; (12dc <xTaskCheckForTimeOut+0x60>)
    1290:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
    1292:	6833      	ldr	r3, [r6, #0]
    1294:	1c59      	adds	r1, r3, #1
    1296:	d01d      	beq.n	12d4 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1298:	4911      	ldr	r1, [pc, #68]	; (12e0 <xTaskCheckForTimeOut+0x64>)
    129a:	6809      	ldr	r1, [r1, #0]
    129c:	6820      	ldr	r0, [r4, #0]
    129e:	4288      	cmp	r0, r1
    12a0:	d003      	beq.n	12aa <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    12a2:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    12a4:	6861      	ldr	r1, [r4, #4]
    12a6:	428a      	cmp	r2, r1
    12a8:	d204      	bcs.n	12b4 <xTaskCheckForTimeOut+0x38>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    12aa:	6861      	ldr	r1, [r4, #4]
    12ac:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
    12ae:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    12b0:	4283      	cmp	r3, r0
    12b2:	d807      	bhi.n	12c4 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
    12b4:	4b0b      	ldr	r3, [pc, #44]	; (12e4 <xTaskCheckForTimeOut+0x68>)
    12b6:	4798      	blx	r3
}
    12b8:	0028      	movs	r0, r5
    12ba:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    12bc:	b672      	cpsid	i
    12be:	e7fe      	b.n	12be <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    12c0:	b672      	cpsid	i
    12c2:	e7fe      	b.n	12c2 <xTaskCheckForTimeOut+0x46>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    12c4:	1a9b      	subs	r3, r3, r2
    12c6:	185b      	adds	r3, r3, r1
    12c8:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    12ca:	0020      	movs	r0, r4
    12cc:	4b06      	ldr	r3, [pc, #24]	; (12e8 <xTaskCheckForTimeOut+0x6c>)
    12ce:	4798      	blx	r3
			xReturn = pdFALSE;
    12d0:	2500      	movs	r5, #0
    12d2:	e7ef      	b.n	12b4 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
    12d4:	2500      	movs	r5, #0
    12d6:	e7ed      	b.n	12b4 <xTaskCheckForTimeOut+0x38>
    12d8:	00000185 	.word	0x00000185
    12dc:	20003bf4 	.word	0x20003bf4
    12e0:	20003bb0 	.word	0x20003bb0
    12e4:	0000019d 	.word	0x0000019d
    12e8:	0000125d 	.word	0x0000125d

000012ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    12ec:	2201      	movs	r2, #1
    12ee:	4b01      	ldr	r3, [pc, #4]	; (12f4 <vTaskMissedYield+0x8>)
    12f0:	601a      	str	r2, [r3, #0]
}
    12f2:	4770      	bx	lr
    12f4:	20003bf8 	.word	0x20003bf8

000012f8 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    12f8:	4b01      	ldr	r3, [pc, #4]	; (1300 <xTaskGetCurrentTaskHandle+0x8>)
    12fa:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    12fc:	4770      	bx	lr
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	20003b00 	.word	0x20003b00

00001304 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1304:	4b05      	ldr	r3, [pc, #20]	; (131c <xTaskGetSchedulerState+0x18>)
    1306:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1308:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    130a:	2b00      	cmp	r3, #0
    130c:	d004      	beq.n	1318 <xTaskGetSchedulerState+0x14>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    130e:	4b04      	ldr	r3, [pc, #16]	; (1320 <xTaskGetSchedulerState+0x1c>)
    1310:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1312:	4243      	negs	r3, r0
    1314:	4158      	adcs	r0, r3
    1316:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
    1318:	4770      	bx	lr
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	20003bc8 	.word	0x20003bc8
    1320:	20003b78 	.word	0x20003b78

00001324 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    1324:	b570      	push	{r4, r5, r6, lr}
    1326:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    1328:	d01a      	beq.n	1360 <vTaskPriorityInherit+0x3c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    132a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    132c:	4b18      	ldr	r3, [pc, #96]	; (1390 <vTaskPriorityInherit+0x6c>)
    132e:	681b      	ldr	r3, [r3, #0]
    1330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1332:	429a      	cmp	r2, r3
    1334:	d214      	bcs.n	1360 <vTaskPriorityInherit+0x3c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1336:	6983      	ldr	r3, [r0, #24]
    1338:	2b00      	cmp	r3, #0
    133a:	db05      	blt.n	1348 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    133c:	4b14      	ldr	r3, [pc, #80]	; (1390 <vTaskPriorityInherit+0x6c>)
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    1342:	2305      	movs	r3, #5
    1344:	1a5b      	subs	r3, r3, r1
    1346:	6183      	str	r3, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1348:	0093      	lsls	r3, r2, #2
    134a:	189b      	adds	r3, r3, r2
    134c:	009b      	lsls	r3, r3, #2
    134e:	4a11      	ldr	r2, [pc, #68]	; (1394 <vTaskPriorityInherit+0x70>)
    1350:	18d3      	adds	r3, r2, r3
    1352:	6962      	ldr	r2, [r4, #20]
    1354:	429a      	cmp	r2, r3
    1356:	d004      	beq.n	1362 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1358:	4b0d      	ldr	r3, [pc, #52]	; (1390 <vTaskPriorityInherit+0x6c>)
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    135e:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1360:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1362:	1d25      	adds	r5, r4, #4
    1364:	0028      	movs	r0, r5
    1366:	4b0c      	ldr	r3, [pc, #48]	; (1398 <vTaskPriorityInherit+0x74>)
    1368:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    136a:	4b09      	ldr	r3, [pc, #36]	; (1390 <vTaskPriorityInherit+0x6c>)
    136c:	681b      	ldr	r3, [r3, #0]
    136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1370:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    1372:	4a0a      	ldr	r2, [pc, #40]	; (139c <vTaskPriorityInherit+0x78>)
    1374:	6812      	ldr	r2, [r2, #0]
    1376:	4293      	cmp	r3, r2
    1378:	d901      	bls.n	137e <vTaskPriorityInherit+0x5a>
    137a:	4a08      	ldr	r2, [pc, #32]	; (139c <vTaskPriorityInherit+0x78>)
    137c:	6013      	str	r3, [r2, #0]
    137e:	0098      	lsls	r0, r3, #2
    1380:	18c0      	adds	r0, r0, r3
    1382:	0080      	lsls	r0, r0, #2
    1384:	4b03      	ldr	r3, [pc, #12]	; (1394 <vTaskPriorityInherit+0x70>)
    1386:	1818      	adds	r0, r3, r0
    1388:	0029      	movs	r1, r5
    138a:	4b05      	ldr	r3, [pc, #20]	; (13a0 <vTaskPriorityInherit+0x7c>)
    138c:	4798      	blx	r3
    138e:	e7e7      	b.n	1360 <vTaskPriorityInherit+0x3c>
    1390:	20003b00 	.word	0x20003b00
    1394:	20003b0c 	.word	0x20003b0c
    1398:	0000037d 	.word	0x0000037d
    139c:	20003b84 	.word	0x20003b84
    13a0:	00000337 	.word	0x00000337

000013a4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    13a4:	b570      	push	{r4, r5, r6, lr}
    13a6:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    13a8:	d01d      	beq.n	13e6 <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    13aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    13ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    13ae:	4293      	cmp	r3, r2
    13b0:	d019      	beq.n	13e6 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    13b2:	1d05      	adds	r5, r0, #4
    13b4:	0028      	movs	r0, r5
    13b6:	4b0c      	ldr	r3, [pc, #48]	; (13e8 <vTaskPriorityDisinherit+0x44>)
    13b8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    13ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    13bc:	62e0      	str	r0, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    13be:	69a3      	ldr	r3, [r4, #24]
    13c0:	2b00      	cmp	r3, #0
    13c2:	db02      	blt.n	13ca <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13c4:	2305      	movs	r3, #5
    13c6:	1a1b      	subs	r3, r3, r0
    13c8:	61a3      	str	r3, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    13ca:	4b08      	ldr	r3, [pc, #32]	; (13ec <vTaskPriorityDisinherit+0x48>)
    13cc:	681b      	ldr	r3, [r3, #0]
    13ce:	4298      	cmp	r0, r3
    13d0:	d901      	bls.n	13d6 <vTaskPriorityDisinherit+0x32>
    13d2:	4b06      	ldr	r3, [pc, #24]	; (13ec <vTaskPriorityDisinherit+0x48>)
    13d4:	6018      	str	r0, [r3, #0]
    13d6:	0083      	lsls	r3, r0, #2
    13d8:	1818      	adds	r0, r3, r0
    13da:	0080      	lsls	r0, r0, #2
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <vTaskPriorityDisinherit+0x4c>)
    13de:	1818      	adds	r0, r3, r0
    13e0:	0029      	movs	r1, r5
    13e2:	4b04      	ldr	r3, [pc, #16]	; (13f4 <vTaskPriorityDisinherit+0x50>)
    13e4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    13e6:	bd70      	pop	{r4, r5, r6, pc}
    13e8:	0000037d 	.word	0x0000037d
    13ec:	20003b84 	.word	0x20003b84
    13f0:	20003b0c 	.word	0x20003b0c
    13f4:	00000337 	.word	0x00000337

000013f8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    13f8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    13fa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    13fc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    13fe:	4291      	cmp	r1, r2
    1400:	d80b      	bhi.n	141a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    1402:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1404:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    1406:	6983      	ldr	r3, [r0, #24]
    1408:	429a      	cmp	r2, r3
    140a:	d211      	bcs.n	1430 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    140c:	1d01      	adds	r1, r0, #4
    140e:	4b09      	ldr	r3, [pc, #36]	; (1434 <prvInsertTimerInActiveList+0x3c>)
    1410:	6818      	ldr	r0, [r3, #0]
    1412:	4b09      	ldr	r3, [pc, #36]	; (1438 <prvInsertTimerInActiveList+0x40>)
    1414:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    1416:	2400      	movs	r4, #0
    1418:	e00a      	b.n	1430 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    141a:	429a      	cmp	r2, r3
    141c:	d202      	bcs.n	1424 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    141e:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1420:	4299      	cmp	r1, r3
    1422:	d205      	bcs.n	1430 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1424:	1d01      	adds	r1, r0, #4
    1426:	4b05      	ldr	r3, [pc, #20]	; (143c <prvInsertTimerInActiveList+0x44>)
    1428:	6818      	ldr	r0, [r3, #0]
    142a:	4b03      	ldr	r3, [pc, #12]	; (1438 <prvInsertTimerInActiveList+0x40>)
    142c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    142e:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    1430:	0020      	movs	r0, r4
    1432:	bd10      	pop	{r4, pc}
    1434:	20003c00 	.word	0x20003c00
    1438:	0000034f 	.word	0x0000034f
    143c:	20003bfc 	.word	0x20003bfc

00001440 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    1440:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    1442:	4b10      	ldr	r3, [pc, #64]	; (1484 <prvCheckForValidListAndQueue+0x44>)
    1444:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    1446:	4b10      	ldr	r3, [pc, #64]	; (1488 <prvCheckForValidListAndQueue+0x48>)
    1448:	681b      	ldr	r3, [r3, #0]
    144a:	2b00      	cmp	r3, #0
    144c:	d002      	beq.n	1454 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    144e:	4b0f      	ldr	r3, [pc, #60]	; (148c <prvCheckForValidListAndQueue+0x4c>)
    1450:	4798      	blx	r3
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    1454:	4d0e      	ldr	r5, [pc, #56]	; (1490 <prvCheckForValidListAndQueue+0x50>)
    1456:	0028      	movs	r0, r5
    1458:	4e0e      	ldr	r6, [pc, #56]	; (1494 <prvCheckForValidListAndQueue+0x54>)
    145a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    145c:	4c0e      	ldr	r4, [pc, #56]	; (1498 <prvCheckForValidListAndQueue+0x58>)
    145e:	0020      	movs	r0, r4
    1460:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    1462:	4b0e      	ldr	r3, [pc, #56]	; (149c <prvCheckForValidListAndQueue+0x5c>)
    1464:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    1466:	4b0e      	ldr	r3, [pc, #56]	; (14a0 <prvCheckForValidListAndQueue+0x60>)
    1468:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    146a:	2200      	movs	r2, #0
    146c:	210c      	movs	r1, #12
    146e:	2002      	movs	r0, #2
    1470:	4b0c      	ldr	r3, [pc, #48]	; (14a4 <prvCheckForValidListAndQueue+0x64>)
    1472:	4798      	blx	r3
			configASSERT( xTimerQueue );
    1474:	2800      	cmp	r0, #0
    1476:	d002      	beq.n	147e <prvCheckForValidListAndQueue+0x3e>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1478:	4b03      	ldr	r3, [pc, #12]	; (1488 <prvCheckForValidListAndQueue+0x48>)
    147a:	6018      	str	r0, [r3, #0]
    147c:	e7e7      	b.n	144e <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
    147e:	b672      	cpsid	i
    1480:	e7fe      	b.n	1480 <prvCheckForValidListAndQueue+0x40>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	00000185 	.word	0x00000185
    1488:	20003c30 	.word	0x20003c30
    148c:	0000019d 	.word	0x0000019d
    1490:	20003c04 	.word	0x20003c04
    1494:	0000031b 	.word	0x0000031b
    1498:	20003c18 	.word	0x20003c18
    149c:	20003bfc 	.word	0x20003bfc
    14a0:	20003c00 	.word	0x20003c00
    14a4:	000005c5 	.word	0x000005c5

000014a8 <xTimerCreateTimerTask>:
{
    14a8:	b510      	push	{r4, lr}
    14aa:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
    14ac:	4b0b      	ldr	r3, [pc, #44]	; (14dc <xTimerCreateTimerTask+0x34>)
    14ae:	4798      	blx	r3
	if( xTimerQueue != NULL )
    14b0:	4b0b      	ldr	r3, [pc, #44]	; (14e0 <xTimerCreateTimerTask+0x38>)
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d00f      	beq.n	14d8 <xTimerCreateTimerTask+0x30>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    14b8:	2300      	movs	r3, #0
    14ba:	9303      	str	r3, [sp, #12]
    14bc:	9302      	str	r3, [sp, #8]
    14be:	9301      	str	r3, [sp, #4]
    14c0:	3302      	adds	r3, #2
    14c2:	9300      	str	r3, [sp, #0]
    14c4:	2300      	movs	r3, #0
    14c6:	2250      	movs	r2, #80	; 0x50
    14c8:	4906      	ldr	r1, [pc, #24]	; (14e4 <xTimerCreateTimerTask+0x3c>)
    14ca:	4807      	ldr	r0, [pc, #28]	; (14e8 <xTimerCreateTimerTask+0x40>)
    14cc:	4c07      	ldr	r4, [pc, #28]	; (14ec <xTimerCreateTimerTask+0x44>)
    14ce:	47a0      	blx	r4
	configASSERT( xReturn );
    14d0:	2800      	cmp	r0, #0
    14d2:	d001      	beq.n	14d8 <xTimerCreateTimerTask+0x30>
}
    14d4:	b004      	add	sp, #16
    14d6:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    14d8:	b672      	cpsid	i
    14da:	e7fe      	b.n	14da <xTimerCreateTimerTask+0x32>
    14dc:	00001441 	.word	0x00001441
    14e0:	20003c30 	.word	0x20003c30
    14e4:	000046e4 	.word	0x000046e4
    14e8:	0000160d 	.word	0x0000160d
    14ec:	00000b01 	.word	0x00000b01

000014f0 <xTimerGenericCommand>:
{
    14f0:	b530      	push	{r4, r5, lr}
    14f2:	b085      	sub	sp, #20
    14f4:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
    14f6:	4b13      	ldr	r3, [pc, #76]	; (1544 <xTimerGenericCommand+0x54>)
    14f8:	681c      	ldr	r4, [r3, #0]
    14fa:	2c00      	cmp	r4, #0
    14fc:	d020      	beq.n	1540 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
    14fe:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1500:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1502:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1504:	2905      	cmp	r1, #5
    1506:	dc13      	bgt.n	1530 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1508:	4b0f      	ldr	r3, [pc, #60]	; (1548 <xTimerGenericCommand+0x58>)
    150a:	4798      	blx	r3
    150c:	2802      	cmp	r0, #2
    150e:	d007      	beq.n	1520 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1510:	4b0c      	ldr	r3, [pc, #48]	; (1544 <xTimerGenericCommand+0x54>)
    1512:	6818      	ldr	r0, [r3, #0]
    1514:	2300      	movs	r3, #0
    1516:	2200      	movs	r2, #0
    1518:	a901      	add	r1, sp, #4
    151a:	4c0c      	ldr	r4, [pc, #48]	; (154c <xTimerGenericCommand+0x5c>)
    151c:	47a0      	blx	r4
    151e:	e00d      	b.n	153c <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1520:	4b08      	ldr	r3, [pc, #32]	; (1544 <xTimerGenericCommand+0x54>)
    1522:	6818      	ldr	r0, [r3, #0]
    1524:	2300      	movs	r3, #0
    1526:	9a08      	ldr	r2, [sp, #32]
    1528:	a901      	add	r1, sp, #4
    152a:	4c08      	ldr	r4, [pc, #32]	; (154c <xTimerGenericCommand+0x5c>)
    152c:	47a0      	blx	r4
    152e:	e005      	b.n	153c <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1530:	2300      	movs	r3, #0
    1532:	002a      	movs	r2, r5
    1534:	a901      	add	r1, sp, #4
    1536:	0020      	movs	r0, r4
    1538:	4c05      	ldr	r4, [pc, #20]	; (1550 <xTimerGenericCommand+0x60>)
    153a:	47a0      	blx	r4
}
    153c:	b005      	add	sp, #20
    153e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    1540:	2000      	movs	r0, #0
	return xReturn;
    1542:	e7fb      	b.n	153c <xTimerGenericCommand+0x4c>
    1544:	20003c30 	.word	0x20003c30
    1548:	00001305 	.word	0x00001305
    154c:	00000615 	.word	0x00000615
    1550:	000007dd 	.word	0x000007dd

00001554 <prvSampleTimeNow>:
{
    1554:	b5f0      	push	{r4, r5, r6, r7, lr}
    1556:	46d6      	mov	lr, sl
    1558:	464f      	mov	r7, r9
    155a:	4646      	mov	r6, r8
    155c:	b5c0      	push	{r6, r7, lr}
    155e:	b082      	sub	sp, #8
    1560:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
    1562:	4b23      	ldr	r3, [pc, #140]	; (15f0 <prvSampleTimeNow+0x9c>)
    1564:	4798      	blx	r3
    1566:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
    1568:	4b22      	ldr	r3, [pc, #136]	; (15f4 <prvSampleTimeNow+0xa0>)
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	4298      	cmp	r0, r3
    156e:	d317      	bcc.n	15a0 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    1570:	2300      	movs	r3, #0
    1572:	464a      	mov	r2, r9
    1574:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    1576:	4b1f      	ldr	r3, [pc, #124]	; (15f4 <prvSampleTimeNow+0xa0>)
    1578:	4642      	mov	r2, r8
    157a:	601a      	str	r2, [r3, #0]
}
    157c:	4640      	mov	r0, r8
    157e:	b002      	add	sp, #8
    1580:	bc1c      	pop	{r2, r3, r4}
    1582:	4690      	mov	r8, r2
    1584:	4699      	mov	r9, r3
    1586:	46a2      	mov	sl, r4
    1588:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    158a:	2300      	movs	r3, #0
    158c:	9300      	str	r3, [sp, #0]
    158e:	4652      	mov	r2, sl
    1590:	2100      	movs	r1, #0
    1592:	0020      	movs	r0, r4
    1594:	4c18      	ldr	r4, [pc, #96]	; (15f8 <prvSampleTimeNow+0xa4>)
    1596:	47a0      	blx	r4
				configASSERT( xResult );
    1598:	2800      	cmp	r0, #0
    159a:	d103      	bne.n	15a4 <prvSampleTimeNow+0x50>
    159c:	b672      	cpsid	i
    159e:	e7fe      	b.n	159e <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    15a0:	4e16      	ldr	r6, [pc, #88]	; (15fc <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    15a2:	4f17      	ldr	r7, [pc, #92]	; (1600 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    15a4:	6833      	ldr	r3, [r6, #0]
    15a6:	681a      	ldr	r2, [r3, #0]
    15a8:	2a00      	cmp	r2, #0
    15aa:	d018      	beq.n	15de <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    15ac:	68db      	ldr	r3, [r3, #12]
    15ae:	681a      	ldr	r2, [r3, #0]
    15b0:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    15b2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    15b4:	1d25      	adds	r5, r4, #4
    15b6:	0028      	movs	r0, r5
    15b8:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    15ba:	0020      	movs	r0, r4
    15bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    15be:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    15c0:	69e3      	ldr	r3, [r4, #28]
    15c2:	2b01      	cmp	r3, #1
    15c4:	d1ee      	bne.n	15a4 <prvSampleTimeNow+0x50>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    15c6:	69a3      	ldr	r3, [r4, #24]
    15c8:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    15ca:	459a      	cmp	sl, r3
    15cc:	d2dd      	bcs.n	158a <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    15ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    15d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    15d2:	4b0a      	ldr	r3, [pc, #40]	; (15fc <prvSampleTimeNow+0xa8>)
    15d4:	6818      	ldr	r0, [r3, #0]
    15d6:	0029      	movs	r1, r5
    15d8:	4b0a      	ldr	r3, [pc, #40]	; (1604 <prvSampleTimeNow+0xb0>)
    15da:	4798      	blx	r3
    15dc:	e7e2      	b.n	15a4 <prvSampleTimeNow+0x50>
	pxCurrentTimerList = pxOverflowTimerList;
    15de:	4a0a      	ldr	r2, [pc, #40]	; (1608 <prvSampleTimeNow+0xb4>)
    15e0:	4906      	ldr	r1, [pc, #24]	; (15fc <prvSampleTimeNow+0xa8>)
    15e2:	6810      	ldr	r0, [r2, #0]
    15e4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    15e6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    15e8:	2301      	movs	r3, #1
    15ea:	464a      	mov	r2, r9
    15ec:	6013      	str	r3, [r2, #0]
    15ee:	e7c2      	b.n	1576 <prvSampleTimeNow+0x22>
    15f0:	00000d5d 	.word	0x00000d5d
    15f4:	20003c2c 	.word	0x20003c2c
    15f8:	000014f1 	.word	0x000014f1
    15fc:	20003bfc 	.word	0x20003bfc
    1600:	0000037d 	.word	0x0000037d
    1604:	0000034f 	.word	0x0000034f
    1608:	20003c00 	.word	0x20003c00

0000160c <prvTimerTask>:
{
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1610:	4f50      	ldr	r7, [pc, #320]	; (1754 <prvTimerTask+0x148>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1612:	4b51      	ldr	r3, [pc, #324]	; (1758 <prvTimerTask+0x14c>)
    1614:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    1616:	681a      	ldr	r2, [r3, #0]
    1618:	2a00      	cmp	r2, #0
    161a:	d100      	bne.n	161e <prvTimerTask+0x12>
    161c:	e08c      	b.n	1738 <prvTimerTask+0x12c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    161e:	68db      	ldr	r3, [r3, #12]
    1620:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    1622:	4b4e      	ldr	r3, [pc, #312]	; (175c <prvTimerTask+0x150>)
    1624:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1626:	a805      	add	r0, sp, #20
    1628:	4b4d      	ldr	r3, [pc, #308]	; (1760 <prvTimerTask+0x154>)
    162a:	4798      	blx	r3
    162c:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
    162e:	9b05      	ldr	r3, [sp, #20]
    1630:	2b00      	cmp	r3, #0
    1632:	d000      	beq.n	1636 <prvTimerTask+0x2a>
    1634:	e08b      	b.n	174e <prvTimerTask+0x142>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1636:	42a8      	cmp	r0, r5
    1638:	d225      	bcs.n	1686 <prvTimerTask+0x7a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    163a:	1b29      	subs	r1, r5, r4
    163c:	4b49      	ldr	r3, [pc, #292]	; (1764 <prvTimerTask+0x158>)
    163e:	6818      	ldr	r0, [r3, #0]
    1640:	4b49      	ldr	r3, [pc, #292]	; (1768 <prvTimerTask+0x15c>)
    1642:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1644:	4b49      	ldr	r3, [pc, #292]	; (176c <prvTimerTask+0x160>)
    1646:	4798      	blx	r3
    1648:	2800      	cmp	r0, #0
    164a:	d040      	beq.n	16ce <prvTimerTask+0xc2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    164c:	4d45      	ldr	r5, [pc, #276]	; (1764 <prvTimerTask+0x158>)
    164e:	4c48      	ldr	r4, [pc, #288]	; (1770 <prvTimerTask+0x164>)
    1650:	2300      	movs	r3, #0
    1652:	2200      	movs	r2, #0
    1654:	a905      	add	r1, sp, #20
    1656:	6828      	ldr	r0, [r5, #0]
    1658:	47a0      	blx	r4
    165a:	2800      	cmp	r0, #0
    165c:	d0d9      	beq.n	1612 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    165e:	9b05      	ldr	r3, [sp, #20]
    1660:	9303      	str	r3, [sp, #12]
    1662:	2b00      	cmp	r3, #0
    1664:	dbf4      	blt.n	1650 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1666:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    1668:	6973      	ldr	r3, [r6, #20]
    166a:	2b00      	cmp	r3, #0
    166c:	d001      	beq.n	1672 <prvTimerTask+0x66>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    166e:	1d30      	adds	r0, r6, #4
    1670:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1672:	a804      	add	r0, sp, #16
    1674:	4b3a      	ldr	r3, [pc, #232]	; (1760 <prvTimerTask+0x154>)
    1676:	4798      	blx	r3
			switch( xMessage.xMessageID )
    1678:	9b05      	ldr	r3, [sp, #20]
    167a:	2b09      	cmp	r3, #9
    167c:	d8e8      	bhi.n	1650 <prvTimerTask+0x44>
    167e:	009b      	lsls	r3, r3, #2
    1680:	4a3c      	ldr	r2, [pc, #240]	; (1774 <prvTimerTask+0x168>)
    1682:	58d3      	ldr	r3, [r2, r3]
    1684:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    1686:	4b39      	ldr	r3, [pc, #228]	; (176c <prvTimerTask+0x160>)
    1688:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    168a:	4b33      	ldr	r3, [pc, #204]	; (1758 <prvTimerTask+0x14c>)
    168c:	681b      	ldr	r3, [r3, #0]
    168e:	68db      	ldr	r3, [r3, #12]
    1690:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1692:	1d30      	adds	r0, r6, #4
    1694:	4b2f      	ldr	r3, [pc, #188]	; (1754 <prvTimerTask+0x148>)
    1696:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1698:	69f3      	ldr	r3, [r6, #28]
    169a:	2b01      	cmp	r3, #1
    169c:	d003      	beq.n	16a6 <prvTimerTask+0x9a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    169e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    16a0:	0030      	movs	r0, r6
    16a2:	4798      	blx	r3
    16a4:	e7d2      	b.n	164c <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    16a6:	69b3      	ldr	r3, [r6, #24]
    16a8:	18e9      	adds	r1, r5, r3
    16aa:	002b      	movs	r3, r5
    16ac:	0022      	movs	r2, r4
    16ae:	0030      	movs	r0, r6
    16b0:	4c31      	ldr	r4, [pc, #196]	; (1778 <prvTimerTask+0x16c>)
    16b2:	47a0      	blx	r4
    16b4:	2801      	cmp	r0, #1
    16b6:	d1f2      	bne.n	169e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    16b8:	2300      	movs	r3, #0
    16ba:	9300      	str	r3, [sp, #0]
    16bc:	002a      	movs	r2, r5
    16be:	2100      	movs	r1, #0
    16c0:	0030      	movs	r0, r6
    16c2:	4c2e      	ldr	r4, [pc, #184]	; (177c <prvTimerTask+0x170>)
    16c4:	47a0      	blx	r4
			configASSERT( xResult );
    16c6:	2800      	cmp	r0, #0
    16c8:	d1e9      	bne.n	169e <prvTimerTask+0x92>
    16ca:	b672      	cpsid	i
    16cc:	e7fe      	b.n	16cc <prvTimerTask+0xc0>
					portYIELD_WITHIN_API();
    16ce:	4b2c      	ldr	r3, [pc, #176]	; (1780 <prvTimerTask+0x174>)
    16d0:	4798      	blx	r3
    16d2:	e7bb      	b.n	164c <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    16d4:	9b06      	ldr	r3, [sp, #24]
    16d6:	69b2      	ldr	r2, [r6, #24]
    16d8:	4694      	mov	ip, r2
    16da:	4463      	add	r3, ip
    16dc:	0019      	movs	r1, r3
    16de:	9b06      	ldr	r3, [sp, #24]
    16e0:	0002      	movs	r2, r0
    16e2:	0030      	movs	r0, r6
    16e4:	4c24      	ldr	r4, [pc, #144]	; (1778 <prvTimerTask+0x16c>)
    16e6:	47a0      	blx	r4
    16e8:	2801      	cmp	r0, #1
    16ea:	d1b0      	bne.n	164e <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    16ec:	0030      	movs	r0, r6
    16ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
    16f0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    16f2:	69f3      	ldr	r3, [r6, #28]
    16f4:	2b01      	cmp	r3, #1
    16f6:	d1aa      	bne.n	164e <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    16f8:	9b06      	ldr	r3, [sp, #24]
    16fa:	69b1      	ldr	r1, [r6, #24]
    16fc:	468c      	mov	ip, r1
    16fe:	4463      	add	r3, ip
    1700:	001a      	movs	r2, r3
    1702:	2300      	movs	r3, #0
    1704:	9300      	str	r3, [sp, #0]
    1706:	2100      	movs	r1, #0
    1708:	0030      	movs	r0, r6
    170a:	4c1c      	ldr	r4, [pc, #112]	; (177c <prvTimerTask+0x170>)
    170c:	47a0      	blx	r4
							configASSERT( xResult );
    170e:	2800      	cmp	r0, #0
    1710:	d19d      	bne.n	164e <prvTimerTask+0x42>
    1712:	b672      	cpsid	i
    1714:	e7fe      	b.n	1714 <prvTimerTask+0x108>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1716:	9906      	ldr	r1, [sp, #24]
    1718:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    171a:	2900      	cmp	r1, #0
    171c:	d006      	beq.n	172c <prvTimerTask+0x120>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    171e:	1841      	adds	r1, r0, r1
    1720:	0003      	movs	r3, r0
    1722:	0002      	movs	r2, r0
    1724:	0030      	movs	r0, r6
    1726:	4c14      	ldr	r4, [pc, #80]	; (1778 <prvTimerTask+0x16c>)
    1728:	47a0      	blx	r4
    172a:	e790      	b.n	164e <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    172c:	b672      	cpsid	i
    172e:	e7fe      	b.n	172e <prvTimerTask+0x122>
					vPortFree( pxTimer );
    1730:	0030      	movs	r0, r6
    1732:	4b14      	ldr	r3, [pc, #80]	; (1784 <prvTimerTask+0x178>)
    1734:	4798      	blx	r3
    1736:	e78a      	b.n	164e <prvTimerTask+0x42>
	vTaskSuspendAll();
    1738:	4b08      	ldr	r3, [pc, #32]	; (175c <prvTimerTask+0x150>)
    173a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    173c:	a805      	add	r0, sp, #20
    173e:	4b08      	ldr	r3, [pc, #32]	; (1760 <prvTimerTask+0x154>)
    1740:	4798      	blx	r3
    1742:	0004      	movs	r4, r0
		xNextExpireTime = ( TickType_t ) 0U;
    1744:	2500      	movs	r5, #0
		if( xTimerListsWereSwitched == pdFALSE )
    1746:	9b05      	ldr	r3, [sp, #20]
    1748:	2b00      	cmp	r3, #0
    174a:	d100      	bne.n	174e <prvTimerTask+0x142>
    174c:	e775      	b.n	163a <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
    174e:	4b07      	ldr	r3, [pc, #28]	; (176c <prvTimerTask+0x160>)
    1750:	4798      	blx	r3
    1752:	e77b      	b.n	164c <prvTimerTask+0x40>
    1754:	0000037d 	.word	0x0000037d
    1758:	20003bfc 	.word	0x20003bfc
    175c:	00000d4d 	.word	0x00000d4d
    1760:	00001555 	.word	0x00001555
    1764:	20003c30 	.word	0x20003c30
    1768:	00000a2d 	.word	0x00000a2d
    176c:	00000ea1 	.word	0x00000ea1
    1770:	000008a5 	.word	0x000008a5
    1774:	000046bc 	.word	0x000046bc
    1778:	000013f9 	.word	0x000013f9
    177c:	000014f1 	.word	0x000014f1
    1780:	0000016d 	.word	0x0000016d
    1784:	00000311 	.word	0x00000311

00001788 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1788:	4770      	bx	lr
	...

0000178c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    178c:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <cpu_irq_enter_critical+0x34>)
    178e:	681b      	ldr	r3, [r3, #0]
    1790:	2b00      	cmp	r3, #0
    1792:	d106      	bne.n	17a2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1794:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1798:	2b00      	cmp	r3, #0
    179a:	d007      	beq.n	17ac <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    179c:	2200      	movs	r2, #0
    179e:	4b09      	ldr	r3, [pc, #36]	; (17c4 <cpu_irq_enter_critical+0x38>)
    17a0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17a2:	4a07      	ldr	r2, [pc, #28]	; (17c0 <cpu_irq_enter_critical+0x34>)
    17a4:	6813      	ldr	r3, [r2, #0]
    17a6:	3301      	adds	r3, #1
    17a8:	6013      	str	r3, [r2, #0]
}
    17aa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17ae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17b2:	2200      	movs	r2, #0
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <cpu_irq_enter_critical+0x3c>)
    17b6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17b8:	3201      	adds	r2, #1
    17ba:	4b02      	ldr	r3, [pc, #8]	; (17c4 <cpu_irq_enter_critical+0x38>)
    17bc:	701a      	strb	r2, [r3, #0]
    17be:	e7f0      	b.n	17a2 <cpu_irq_enter_critical+0x16>
    17c0:	20003c34 	.word	0x20003c34
    17c4:	20003c38 	.word	0x20003c38
    17c8:	20000008 	.word	0x20000008

000017cc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17cc:	4b08      	ldr	r3, [pc, #32]	; (17f0 <cpu_irq_leave_critical+0x24>)
    17ce:	681a      	ldr	r2, [r3, #0]
    17d0:	3a01      	subs	r2, #1
    17d2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17d4:	681b      	ldr	r3, [r3, #0]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d109      	bne.n	17ee <cpu_irq_leave_critical+0x22>
    17da:	4b06      	ldr	r3, [pc, #24]	; (17f4 <cpu_irq_leave_critical+0x28>)
    17dc:	781b      	ldrb	r3, [r3, #0]
    17de:	2b00      	cmp	r3, #0
    17e0:	d005      	beq.n	17ee <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    17e2:	2201      	movs	r2, #1
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <cpu_irq_leave_critical+0x2c>)
    17e6:	701a      	strb	r2, [r3, #0]
    17e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    17ec:	b662      	cpsie	i
	}
}
    17ee:	4770      	bx	lr
    17f0:	20003c34 	.word	0x20003c34
    17f4:	20003c38 	.word	0x20003c38
    17f8:	20000008 	.word	0x20000008

000017fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    17fe:	490c      	ldr	r1, [pc, #48]	; (1830 <system_clock_source_osc8m_set_config+0x34>)
    1800:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1802:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1804:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1806:	7840      	ldrb	r0, [r0, #1]
    1808:	2201      	movs	r2, #1
    180a:	4010      	ands	r0, r2
    180c:	0180      	lsls	r0, r0, #6
    180e:	2640      	movs	r6, #64	; 0x40
    1810:	43b3      	bics	r3, r6
    1812:	4303      	orrs	r3, r0
    1814:	402a      	ands	r2, r5
    1816:	01d2      	lsls	r2, r2, #7
    1818:	2080      	movs	r0, #128	; 0x80
    181a:	4383      	bics	r3, r0
    181c:	4313      	orrs	r3, r2
    181e:	2203      	movs	r2, #3
    1820:	4022      	ands	r2, r4
    1822:	0212      	lsls	r2, r2, #8
    1824:	4803      	ldr	r0, [pc, #12]	; (1834 <system_clock_source_osc8m_set_config+0x38>)
    1826:	4003      	ands	r3, r0
    1828:	4313      	orrs	r3, r2
    182a:	620b      	str	r3, [r1, #32]
}
    182c:	bd70      	pop	{r4, r5, r6, pc}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	40000800 	.word	0x40000800
    1834:	fffffcff 	.word	0xfffffcff

00001838 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1838:	2808      	cmp	r0, #8
    183a:	d803      	bhi.n	1844 <system_clock_source_enable+0xc>
    183c:	0080      	lsls	r0, r0, #2
    183e:	4b25      	ldr	r3, [pc, #148]	; (18d4 <system_clock_source_enable+0x9c>)
    1840:	581b      	ldr	r3, [r3, r0]
    1842:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1844:	2017      	movs	r0, #23
    1846:	e044      	b.n	18d2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1848:	4a23      	ldr	r2, [pc, #140]	; (18d8 <system_clock_source_enable+0xa0>)
    184a:	6a13      	ldr	r3, [r2, #32]
    184c:	2102      	movs	r1, #2
    184e:	430b      	orrs	r3, r1
    1850:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1852:	2000      	movs	r0, #0
    1854:	e03d      	b.n	18d2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1856:	4a20      	ldr	r2, [pc, #128]	; (18d8 <system_clock_source_enable+0xa0>)
    1858:	6993      	ldr	r3, [r2, #24]
    185a:	2102      	movs	r1, #2
    185c:	430b      	orrs	r3, r1
    185e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1860:	2000      	movs	r0, #0
		break;
    1862:	e036      	b.n	18d2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1864:	4a1c      	ldr	r2, [pc, #112]	; (18d8 <system_clock_source_enable+0xa0>)
    1866:	8a13      	ldrh	r3, [r2, #16]
    1868:	2102      	movs	r1, #2
    186a:	430b      	orrs	r3, r1
    186c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    186e:	2000      	movs	r0, #0
		break;
    1870:	e02f      	b.n	18d2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1872:	4a19      	ldr	r2, [pc, #100]	; (18d8 <system_clock_source_enable+0xa0>)
    1874:	8a93      	ldrh	r3, [r2, #20]
    1876:	2102      	movs	r1, #2
    1878:	430b      	orrs	r3, r1
    187a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    187c:	2000      	movs	r0, #0
		break;
    187e:	e028      	b.n	18d2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1880:	4916      	ldr	r1, [pc, #88]	; (18dc <system_clock_source_enable+0xa4>)
    1882:	680b      	ldr	r3, [r1, #0]
    1884:	2202      	movs	r2, #2
    1886:	4313      	orrs	r3, r2
    1888:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    188a:	4b13      	ldr	r3, [pc, #76]	; (18d8 <system_clock_source_enable+0xa0>)
    188c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    188e:	0019      	movs	r1, r3
    1890:	320e      	adds	r2, #14
    1892:	68cb      	ldr	r3, [r1, #12]
    1894:	421a      	tst	r2, r3
    1896:	d0fc      	beq.n	1892 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1898:	4a10      	ldr	r2, [pc, #64]	; (18dc <system_clock_source_enable+0xa4>)
    189a:	6891      	ldr	r1, [r2, #8]
    189c:	4b0e      	ldr	r3, [pc, #56]	; (18d8 <system_clock_source_enable+0xa0>)
    189e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    18a0:	6852      	ldr	r2, [r2, #4]
    18a2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    18a4:	2200      	movs	r2, #0
    18a6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    18a8:	0019      	movs	r1, r3
    18aa:	3210      	adds	r2, #16
    18ac:	68cb      	ldr	r3, [r1, #12]
    18ae:	421a      	tst	r2, r3
    18b0:	d0fc      	beq.n	18ac <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    18b2:	4b0a      	ldr	r3, [pc, #40]	; (18dc <system_clock_source_enable+0xa4>)
    18b4:	681b      	ldr	r3, [r3, #0]
    18b6:	b29b      	uxth	r3, r3
    18b8:	4a07      	ldr	r2, [pc, #28]	; (18d8 <system_clock_source_enable+0xa0>)
    18ba:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    18bc:	2000      	movs	r0, #0
    18be:	e008      	b.n	18d2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    18c0:	4905      	ldr	r1, [pc, #20]	; (18d8 <system_clock_source_enable+0xa0>)
    18c2:	2244      	movs	r2, #68	; 0x44
    18c4:	5c8b      	ldrb	r3, [r1, r2]
    18c6:	2002      	movs	r0, #2
    18c8:	4303      	orrs	r3, r0
    18ca:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    18cc:	2000      	movs	r0, #0
		break;
    18ce:	e000      	b.n	18d2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    18d0:	2000      	movs	r0, #0
}
    18d2:	4770      	bx	lr
    18d4:	000046ec 	.word	0x000046ec
    18d8:	40000800 	.word	0x40000800
    18dc:	20003c3c 	.word	0x20003c3c

000018e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    18e0:	b530      	push	{r4, r5, lr}
    18e2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18e4:	22c2      	movs	r2, #194	; 0xc2
    18e6:	00d2      	lsls	r2, r2, #3
    18e8:	4b1a      	ldr	r3, [pc, #104]	; (1954 <system_clock_init+0x74>)
    18ea:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18ec:	4a1a      	ldr	r2, [pc, #104]	; (1958 <system_clock_init+0x78>)
    18ee:	6853      	ldr	r3, [r2, #4]
    18f0:	211e      	movs	r1, #30
    18f2:	438b      	bics	r3, r1
    18f4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    18f6:	2301      	movs	r3, #1
    18f8:	466a      	mov	r2, sp
    18fa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18fc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    18fe:	4d17      	ldr	r5, [pc, #92]	; (195c <system_clock_init+0x7c>)
    1900:	b2e0      	uxtb	r0, r4
    1902:	4669      	mov	r1, sp
    1904:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1906:	3401      	adds	r4, #1
    1908:	2c25      	cmp	r4, #37	; 0x25
    190a:	d1f9      	bne.n	1900 <system_clock_init+0x20>
	config->run_in_standby  = false;
    190c:	a803      	add	r0, sp, #12
    190e:	2400      	movs	r4, #0
    1910:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1912:	2501      	movs	r5, #1
    1914:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1916:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1918:	4b11      	ldr	r3, [pc, #68]	; (1960 <system_clock_init+0x80>)
    191a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    191c:	2006      	movs	r0, #6
    191e:	4b11      	ldr	r3, [pc, #68]	; (1964 <system_clock_init+0x84>)
    1920:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1922:	4b11      	ldr	r3, [pc, #68]	; (1968 <system_clock_init+0x88>)
    1924:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1926:	4b11      	ldr	r3, [pc, #68]	; (196c <system_clock_init+0x8c>)
    1928:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    192a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    192c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    192e:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1930:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1932:	466b      	mov	r3, sp
    1934:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1936:	2306      	movs	r3, #6
    1938:	466a      	mov	r2, sp
    193a:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    193c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    193e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1940:	4669      	mov	r1, sp
    1942:	2000      	movs	r0, #0
    1944:	4b0a      	ldr	r3, [pc, #40]	; (1970 <system_clock_init+0x90>)
    1946:	4798      	blx	r3
    1948:	2000      	movs	r0, #0
    194a:	4b0a      	ldr	r3, [pc, #40]	; (1974 <system_clock_init+0x94>)
    194c:	4798      	blx	r3
#endif
}
    194e:	b005      	add	sp, #20
    1950:	bd30      	pop	{r4, r5, pc}
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	40000800 	.word	0x40000800
    1958:	41004000 	.word	0x41004000
    195c:	00001af5 	.word	0x00001af5
    1960:	000017fd 	.word	0x000017fd
    1964:	00001839 	.word	0x00001839
    1968:	00001979 	.word	0x00001979
    196c:	40000400 	.word	0x40000400
    1970:	0000199d 	.word	0x0000199d
    1974:	00001a55 	.word	0x00001a55

00001978 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1978:	4a06      	ldr	r2, [pc, #24]	; (1994 <system_gclk_init+0x1c>)
    197a:	6993      	ldr	r3, [r2, #24]
    197c:	2108      	movs	r1, #8
    197e:	430b      	orrs	r3, r1
    1980:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1982:	2201      	movs	r2, #1
    1984:	4b04      	ldr	r3, [pc, #16]	; (1998 <system_gclk_init+0x20>)
    1986:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1988:	0019      	movs	r1, r3
    198a:	780b      	ldrb	r3, [r1, #0]
    198c:	4213      	tst	r3, r2
    198e:	d1fc      	bne.n	198a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1990:	4770      	bx	lr
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	40000400 	.word	0x40000400
    1998:	40000c00 	.word	0x40000c00

0000199c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    19a0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    19a2:	780d      	ldrb	r5, [r1, #0]
    19a4:	022d      	lsls	r5, r5, #8
    19a6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    19a8:	784b      	ldrb	r3, [r1, #1]
    19aa:	2b00      	cmp	r3, #0
    19ac:	d002      	beq.n	19b4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    19ae:	2380      	movs	r3, #128	; 0x80
    19b0:	02db      	lsls	r3, r3, #11
    19b2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    19b4:	7a4b      	ldrb	r3, [r1, #9]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d002      	beq.n	19c0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    19ba:	2380      	movs	r3, #128	; 0x80
    19bc:	031b      	lsls	r3, r3, #12
    19be:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    19c0:	6848      	ldr	r0, [r1, #4]
    19c2:	2801      	cmp	r0, #1
    19c4:	d910      	bls.n	19e8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    19c6:	1e43      	subs	r3, r0, #1
    19c8:	4218      	tst	r0, r3
    19ca:	d134      	bne.n	1a36 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    19cc:	2802      	cmp	r0, #2
    19ce:	d930      	bls.n	1a32 <system_gclk_gen_set_config+0x96>
    19d0:	2302      	movs	r3, #2
    19d2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    19d4:	3201      	adds	r2, #1
						mask <<= 1) {
    19d6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    19d8:	4298      	cmp	r0, r3
    19da:	d8fb      	bhi.n	19d4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    19dc:	0212      	lsls	r2, r2, #8
    19de:	4332      	orrs	r2, r6
    19e0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    19e2:	2380      	movs	r3, #128	; 0x80
    19e4:	035b      	lsls	r3, r3, #13
    19e6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    19e8:	7a0b      	ldrb	r3, [r1, #8]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d002      	beq.n	19f4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    19ee:	2380      	movs	r3, #128	; 0x80
    19f0:	039b      	lsls	r3, r3, #14
    19f2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19f4:	4a13      	ldr	r2, [pc, #76]	; (1a44 <system_gclk_gen_set_config+0xa8>)
    19f6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    19f8:	b25b      	sxtb	r3, r3
    19fa:	2b00      	cmp	r3, #0
    19fc:	dbfb      	blt.n	19f6 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19fe:	4b12      	ldr	r3, [pc, #72]	; (1a48 <system_gclk_gen_set_config+0xac>)
    1a00:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a02:	4b12      	ldr	r3, [pc, #72]	; (1a4c <system_gclk_gen_set_config+0xb0>)
    1a04:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a06:	4a0f      	ldr	r2, [pc, #60]	; (1a44 <system_gclk_gen_set_config+0xa8>)
    1a08:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a0a:	b25b      	sxtb	r3, r3
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	dbfb      	blt.n	1a08 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a10:	4b0c      	ldr	r3, [pc, #48]	; (1a44 <system_gclk_gen_set_config+0xa8>)
    1a12:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a14:	001a      	movs	r2, r3
    1a16:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1a18:	b25b      	sxtb	r3, r3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	dbfb      	blt.n	1a16 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a1e:	4a09      	ldr	r2, [pc, #36]	; (1a44 <system_gclk_gen_set_config+0xa8>)
    1a20:	6853      	ldr	r3, [r2, #4]
    1a22:	2180      	movs	r1, #128	; 0x80
    1a24:	0249      	lsls	r1, r1, #9
    1a26:	400b      	ands	r3, r1
    1a28:	431d      	orrs	r5, r3
    1a2a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <system_gclk_gen_set_config+0xb4>)
    1a2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a30:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1a32:	2200      	movs	r2, #0
    1a34:	e7d2      	b.n	19dc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1a36:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1a38:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a3a:	2380      	movs	r3, #128	; 0x80
    1a3c:	029b      	lsls	r3, r3, #10
    1a3e:	431d      	orrs	r5, r3
    1a40:	e7d2      	b.n	19e8 <system_gclk_gen_set_config+0x4c>
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	40000c00 	.word	0x40000c00
    1a48:	0000178d 	.word	0x0000178d
    1a4c:	40000c08 	.word	0x40000c08
    1a50:	000017cd 	.word	0x000017cd

00001a54 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a54:	b510      	push	{r4, lr}
    1a56:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a58:	4a0b      	ldr	r2, [pc, #44]	; (1a88 <system_gclk_gen_enable+0x34>)
    1a5a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a5c:	b25b      	sxtb	r3, r3
    1a5e:	2b00      	cmp	r3, #0
    1a60:	dbfb      	blt.n	1a5a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1a62:	4b0a      	ldr	r3, [pc, #40]	; (1a8c <system_gclk_gen_enable+0x38>)
    1a64:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a66:	4b0a      	ldr	r3, [pc, #40]	; (1a90 <system_gclk_gen_enable+0x3c>)
    1a68:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a6a:	4a07      	ldr	r2, [pc, #28]	; (1a88 <system_gclk_gen_enable+0x34>)
    1a6c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1a6e:	b25b      	sxtb	r3, r3
    1a70:	2b00      	cmp	r3, #0
    1a72:	dbfb      	blt.n	1a6c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a74:	4a04      	ldr	r2, [pc, #16]	; (1a88 <system_gclk_gen_enable+0x34>)
    1a76:	6851      	ldr	r1, [r2, #4]
    1a78:	2380      	movs	r3, #128	; 0x80
    1a7a:	025b      	lsls	r3, r3, #9
    1a7c:	430b      	orrs	r3, r1
    1a7e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1a80:	4b04      	ldr	r3, [pc, #16]	; (1a94 <system_gclk_gen_enable+0x40>)
    1a82:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a84:	bd10      	pop	{r4, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	40000c00 	.word	0x40000c00
    1a8c:	0000178d 	.word	0x0000178d
    1a90:	40000c04 	.word	0x40000c04
    1a94:	000017cd 	.word	0x000017cd

00001a98 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a98:	b510      	push	{r4, lr}
    1a9a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a9c:	4b0f      	ldr	r3, [pc, #60]	; (1adc <system_gclk_chan_disable+0x44>)
    1a9e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1aa0:	4b0f      	ldr	r3, [pc, #60]	; (1ae0 <system_gclk_chan_disable+0x48>)
    1aa2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa4:	4a0f      	ldr	r2, [pc, #60]	; (1ae4 <system_gclk_chan_disable+0x4c>)
    1aa6:	8853      	ldrh	r3, [r2, #2]
    1aa8:	051b      	lsls	r3, r3, #20
    1aaa:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1aac:	8853      	ldrh	r3, [r2, #2]
    1aae:	490e      	ldr	r1, [pc, #56]	; (1ae8 <system_gclk_chan_disable+0x50>)
    1ab0:	400b      	ands	r3, r1
    1ab2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ab4:	8853      	ldrh	r3, [r2, #2]
    1ab6:	490d      	ldr	r1, [pc, #52]	; (1aec <system_gclk_chan_disable+0x54>)
    1ab8:	400b      	ands	r3, r1
    1aba:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1abc:	0011      	movs	r1, r2
    1abe:	2280      	movs	r2, #128	; 0x80
    1ac0:	01d2      	lsls	r2, r2, #7
    1ac2:	884b      	ldrh	r3, [r1, #2]
    1ac4:	4213      	tst	r3, r2
    1ac6:	d1fc      	bne.n	1ac2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ac8:	4906      	ldr	r1, [pc, #24]	; (1ae4 <system_gclk_chan_disable+0x4c>)
    1aca:	884a      	ldrh	r2, [r1, #2]
    1acc:	0203      	lsls	r3, r0, #8
    1ace:	4806      	ldr	r0, [pc, #24]	; (1ae8 <system_gclk_chan_disable+0x50>)
    1ad0:	4002      	ands	r2, r0
    1ad2:	4313      	orrs	r3, r2
    1ad4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1ad6:	4b06      	ldr	r3, [pc, #24]	; (1af0 <system_gclk_chan_disable+0x58>)
    1ad8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ada:	bd10      	pop	{r4, pc}
    1adc:	0000178d 	.word	0x0000178d
    1ae0:	40000c02 	.word	0x40000c02
    1ae4:	40000c00 	.word	0x40000c00
    1ae8:	fffff0ff 	.word	0xfffff0ff
    1aec:	ffffbfff 	.word	0xffffbfff
    1af0:	000017cd 	.word	0x000017cd

00001af4 <system_gclk_chan_set_config>:
{
    1af4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1af6:	780c      	ldrb	r4, [r1, #0]
    1af8:	0224      	lsls	r4, r4, #8
    1afa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1afc:	4b02      	ldr	r3, [pc, #8]	; (1b08 <system_gclk_chan_set_config+0x14>)
    1afe:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1b00:	b2a4      	uxth	r4, r4
    1b02:	4b02      	ldr	r3, [pc, #8]	; (1b0c <system_gclk_chan_set_config+0x18>)
    1b04:	805c      	strh	r4, [r3, #2]
}
    1b06:	bd10      	pop	{r4, pc}
    1b08:	00001a99 	.word	0x00001a99
    1b0c:	40000c00 	.word	0x40000c00

00001b10 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b10:	4770      	bx	lr
	...

00001b14 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b14:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <system_init+0x18>)
    1b18:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b1a:	4b05      	ldr	r3, [pc, #20]	; (1b30 <system_init+0x1c>)
    1b1c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b1e:	4b05      	ldr	r3, [pc, #20]	; (1b34 <system_init+0x20>)
    1b20:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b22:	4b05      	ldr	r3, [pc, #20]	; (1b38 <system_init+0x24>)
    1b24:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b26:	4b05      	ldr	r3, [pc, #20]	; (1b3c <system_init+0x28>)
    1b28:	4798      	blx	r3
}
    1b2a:	bd10      	pop	{r4, pc}
    1b2c:	000018e1 	.word	0x000018e1
    1b30:	00001789 	.word	0x00001789
    1b34:	00001b11 	.word	0x00001b11
    1b38:	00001b11 	.word	0x00001b11
    1b3c:	00001b11 	.word	0x00001b11

00001b40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b40:	e7fe      	b.n	1b40 <Dummy_Handler>
	...

00001b44 <Reset_Handler>:
{
    1b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b46:	4a2a      	ldr	r2, [pc, #168]	; (1bf0 <Reset_Handler+0xac>)
    1b48:	4b2a      	ldr	r3, [pc, #168]	; (1bf4 <Reset_Handler+0xb0>)
    1b4a:	429a      	cmp	r2, r3
    1b4c:	d011      	beq.n	1b72 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b4e:	001a      	movs	r2, r3
    1b50:	4b29      	ldr	r3, [pc, #164]	; (1bf8 <Reset_Handler+0xb4>)
    1b52:	429a      	cmp	r2, r3
    1b54:	d20d      	bcs.n	1b72 <Reset_Handler+0x2e>
    1b56:	4a29      	ldr	r2, [pc, #164]	; (1bfc <Reset_Handler+0xb8>)
    1b58:	3303      	adds	r3, #3
    1b5a:	1a9b      	subs	r3, r3, r2
    1b5c:	089b      	lsrs	r3, r3, #2
    1b5e:	3301      	adds	r3, #1
    1b60:	009b      	lsls	r3, r3, #2
    1b62:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b64:	4823      	ldr	r0, [pc, #140]	; (1bf4 <Reset_Handler+0xb0>)
    1b66:	4922      	ldr	r1, [pc, #136]	; (1bf0 <Reset_Handler+0xac>)
    1b68:	588c      	ldr	r4, [r1, r2]
    1b6a:	5084      	str	r4, [r0, r2]
    1b6c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b6e:	429a      	cmp	r2, r3
    1b70:	d1fa      	bne.n	1b68 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b72:	4a23      	ldr	r2, [pc, #140]	; (1c00 <Reset_Handler+0xbc>)
    1b74:	4b23      	ldr	r3, [pc, #140]	; (1c04 <Reset_Handler+0xc0>)
    1b76:	429a      	cmp	r2, r3
    1b78:	d20a      	bcs.n	1b90 <Reset_Handler+0x4c>
    1b7a:	43d3      	mvns	r3, r2
    1b7c:	4921      	ldr	r1, [pc, #132]	; (1c04 <Reset_Handler+0xc0>)
    1b7e:	185b      	adds	r3, r3, r1
    1b80:	2103      	movs	r1, #3
    1b82:	438b      	bics	r3, r1
    1b84:	3304      	adds	r3, #4
    1b86:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1b88:	2100      	movs	r1, #0
    1b8a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1b8c:	4293      	cmp	r3, r2
    1b8e:	d1fc      	bne.n	1b8a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b90:	4a1d      	ldr	r2, [pc, #116]	; (1c08 <Reset_Handler+0xc4>)
    1b92:	21ff      	movs	r1, #255	; 0xff
    1b94:	4b1d      	ldr	r3, [pc, #116]	; (1c0c <Reset_Handler+0xc8>)
    1b96:	438b      	bics	r3, r1
    1b98:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1b9a:	39fd      	subs	r1, #253	; 0xfd
    1b9c:	2390      	movs	r3, #144	; 0x90
    1b9e:	005b      	lsls	r3, r3, #1
    1ba0:	4a1b      	ldr	r2, [pc, #108]	; (1c10 <Reset_Handler+0xcc>)
    1ba2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ba4:	4a1b      	ldr	r2, [pc, #108]	; (1c14 <Reset_Handler+0xd0>)
    1ba6:	78d3      	ldrb	r3, [r2, #3]
    1ba8:	2503      	movs	r5, #3
    1baa:	43ab      	bics	r3, r5
    1bac:	2402      	movs	r4, #2
    1bae:	4323      	orrs	r3, r4
    1bb0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1bb2:	78d3      	ldrb	r3, [r2, #3]
    1bb4:	270c      	movs	r7, #12
    1bb6:	43bb      	bics	r3, r7
    1bb8:	2608      	movs	r6, #8
    1bba:	4333      	orrs	r3, r6
    1bbc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1bbe:	4b16      	ldr	r3, [pc, #88]	; (1c18 <Reset_Handler+0xd4>)
    1bc0:	7b98      	ldrb	r0, [r3, #14]
    1bc2:	2230      	movs	r2, #48	; 0x30
    1bc4:	4390      	bics	r0, r2
    1bc6:	2220      	movs	r2, #32
    1bc8:	4310      	orrs	r0, r2
    1bca:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bcc:	7b99      	ldrb	r1, [r3, #14]
    1bce:	43b9      	bics	r1, r7
    1bd0:	4331      	orrs	r1, r6
    1bd2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1bd4:	7b9a      	ldrb	r2, [r3, #14]
    1bd6:	43aa      	bics	r2, r5
    1bd8:	4322      	orrs	r2, r4
    1bda:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1bdc:	4a0f      	ldr	r2, [pc, #60]	; (1c1c <Reset_Handler+0xd8>)
    1bde:	6853      	ldr	r3, [r2, #4]
    1be0:	2180      	movs	r1, #128	; 0x80
    1be2:	430b      	orrs	r3, r1
    1be4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1be6:	4b0e      	ldr	r3, [pc, #56]	; (1c20 <Reset_Handler+0xdc>)
    1be8:	4798      	blx	r3
        main();
    1bea:	4b0e      	ldr	r3, [pc, #56]	; (1c24 <Reset_Handler+0xe0>)
    1bec:	4798      	blx	r3
    1bee:	e7fe      	b.n	1bee <Reset_Handler+0xaa>
    1bf0:	000048ac 	.word	0x000048ac
    1bf4:	20000000 	.word	0x20000000
    1bf8:	20000044 	.word	0x20000044
    1bfc:	20000004 	.word	0x20000004
    1c00:	20000044 	.word	0x20000044
    1c04:	20003cdc 	.word	0x20003cdc
    1c08:	e000ed00 	.word	0xe000ed00
    1c0c:	00000000 	.word	0x00000000
    1c10:	41007000 	.word	0x41007000
    1c14:	41005000 	.word	0x41005000
    1c18:	41004800 	.word	0x41004800
    1c1c:	41004000 	.word	0x41004000
    1c20:	00004659 	.word	0x00004659
    1c24:	000025b5 	.word	0x000025b5

00001c28 <vPID_Control_Task>:
	
	}
}


void vPID_Control_Task(void){
    1c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2a:	46de      	mov	lr, fp
    1c2c:	4657      	mov	r7, sl
    1c2e:	464e      	mov	r6, r9
    1c30:	4645      	mov	r5, r8
    1c32:	b5e0      	push	{r5, r6, r7, lr}
    1c34:	b087      	sub	sp, #28
    1c36:	e090      	b.n	1d5a <vPID_Control_Task+0x132>
	

		switch(mode){
		
			case 0:	//spd ctrl
				i = 0;
    1c38:	2200      	movs	r2, #0
    1c3a:	4bbc      	ldr	r3, [pc, #752]	; (1f2c <vPID_Control_Task+0x304>)
    1c3c:	601a      	str	r2, [r3, #0]
		
				errorSpd = keypad - rawSpeed;
    1c3e:	4fbc      	ldr	r7, [pc, #752]	; (1f30 <vPID_Control_Task+0x308>)
    1c40:	683b      	ldr	r3, [r7, #0]
    1c42:	4abc      	ldr	r2, [pc, #752]	; (1f34 <vPID_Control_Task+0x30c>)
    1c44:	6812      	ldr	r2, [r2, #0]
    1c46:	1a9b      	subs	r3, r3, r2
    1c48:	4cbb      	ldr	r4, [pc, #748]	; (1f38 <vPID_Control_Task+0x310>)
    1c4a:	6023      	str	r3, [r4, #0]
				integral = integral + (Ts * errorSpd);
    1c4c:	6820      	ldr	r0, [r4, #0]
    1c4e:	4bbb      	ldr	r3, [pc, #748]	; (1f3c <vPID_Control_Task+0x314>)
    1c50:	4699      	mov	r9, r3
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	469a      	mov	sl, r3
    1c56:	4bba      	ldr	r3, [pc, #744]	; (1f40 <vPID_Control_Task+0x318>)
    1c58:	4698      	mov	r8, r3
    1c5a:	681e      	ldr	r6, [r3, #0]
    1c5c:	4bb9      	ldr	r3, [pc, #740]	; (1f44 <vPID_Control_Task+0x31c>)
    1c5e:	469b      	mov	fp, r3
    1c60:	4798      	blx	r3
    1c62:	4db9      	ldr	r5, [pc, #740]	; (1f48 <vPID_Control_Task+0x320>)
    1c64:	4651      	mov	r1, sl
    1c66:	47a8      	blx	r5
    1c68:	4bb8      	ldr	r3, [pc, #736]	; (1f4c <vPID_Control_Task+0x324>)
    1c6a:	469a      	mov	sl, r3
    1c6c:	1c31      	adds	r1, r6, #0
    1c6e:	4798      	blx	r3
    1c70:	4643      	mov	r3, r8
    1c72:	6018      	str	r0, [r3, #0]
				Diff = ((errorSpd - errorSpd1) / Ts);
    1c74:	6820      	ldr	r0, [r4, #0]
    1c76:	4eb6      	ldr	r6, [pc, #728]	; (1f50 <vPID_Control_Task+0x328>)
    1c78:	6833      	ldr	r3, [r6, #0]
    1c7a:	464a      	mov	r2, r9
    1c7c:	6812      	ldr	r2, [r2, #0]
    1c7e:	4691      	mov	r9, r2
    1c80:	1ac0      	subs	r0, r0, r3
    1c82:	47d8      	blx	fp
    1c84:	4649      	mov	r1, r9
    1c86:	4bb3      	ldr	r3, [pc, #716]	; (1f54 <vPID_Control_Task+0x32c>)
    1c88:	4798      	blx	r3
    1c8a:	4bb3      	ldr	r3, [pc, #716]	; (1f58 <vPID_Control_Task+0x330>)
    1c8c:	6018      	str	r0, [r3, #0]
				y = (Kps * errorSpd) + (Kis * integral) + (Kds * Diff) + (Kffs * keypad);
    1c8e:	6820      	ldr	r0, [r4, #0]
    1c90:	4ab2      	ldr	r2, [pc, #712]	; (1f5c <vPID_Control_Task+0x334>)
    1c92:	6812      	ldr	r2, [r2, #0]
    1c94:	9200      	str	r2, [sp, #0]
    1c96:	4ab2      	ldr	r2, [pc, #712]	; (1f60 <vPID_Control_Task+0x338>)
    1c98:	6812      	ldr	r2, [r2, #0]
    1c9a:	9203      	str	r2, [sp, #12]
    1c9c:	4641      	mov	r1, r8
    1c9e:	6809      	ldr	r1, [r1, #0]
    1ca0:	9104      	str	r1, [sp, #16]
    1ca2:	4ab0      	ldr	r2, [pc, #704]	; (1f64 <vPID_Control_Task+0x33c>)
    1ca4:	6812      	ldr	r2, [r2, #0]
    1ca6:	4690      	mov	r8, r2
    1ca8:	681b      	ldr	r3, [r3, #0]
    1caa:	4699      	mov	r9, r3
    1cac:	683b      	ldr	r3, [r7, #0]
    1cae:	9305      	str	r3, [sp, #20]
    1cb0:	4bad      	ldr	r3, [pc, #692]	; (1f68 <vPID_Control_Task+0x340>)
    1cb2:	681f      	ldr	r7, [r3, #0]
    1cb4:	47d8      	blx	fp
    1cb6:	9900      	ldr	r1, [sp, #0]
    1cb8:	47a8      	blx	r5
    1cba:	9000      	str	r0, [sp, #0]
    1cbc:	9904      	ldr	r1, [sp, #16]
    1cbe:	9803      	ldr	r0, [sp, #12]
    1cc0:	47a8      	blx	r5
    1cc2:	1c01      	adds	r1, r0, #0
    1cc4:	9800      	ldr	r0, [sp, #0]
    1cc6:	47d0      	blx	sl
    1cc8:	9000      	str	r0, [sp, #0]
    1cca:	4649      	mov	r1, r9
    1ccc:	4640      	mov	r0, r8
    1cce:	47a8      	blx	r5
    1cd0:	1c01      	adds	r1, r0, #0
    1cd2:	9800      	ldr	r0, [sp, #0]
    1cd4:	47d0      	blx	sl
    1cd6:	9000      	str	r0, [sp, #0]
    1cd8:	9805      	ldr	r0, [sp, #20]
    1cda:	47d8      	blx	fp
    1cdc:	1c39      	adds	r1, r7, #0
    1cde:	47a8      	blx	r5
    1ce0:	1c01      	adds	r1, r0, #0
    1ce2:	9800      	ldr	r0, [sp, #0]
    1ce4:	47d0      	blx	sl
    1ce6:	4ba1      	ldr	r3, [pc, #644]	; (1f6c <vPID_Control_Task+0x344>)
    1ce8:	6018      	str	r0, [r3, #0]
				errorSpd1 = errorSpd;
    1cea:	6822      	ldr	r2, [r4, #0]
    1cec:	6032      	str	r2, [r6, #0]
		
				if(y > 5000){
    1cee:	6818      	ldr	r0, [r3, #0]
    1cf0:	499f      	ldr	r1, [pc, #636]	; (1f70 <vPID_Control_Task+0x348>)
    1cf2:	4ba0      	ldr	r3, [pc, #640]	; (1f74 <vPID_Control_Task+0x34c>)
    1cf4:	4798      	blx	r3
    1cf6:	2800      	cmp	r0, #0
    1cf8:	d002      	beq.n	1d00 <vPID_Control_Task+0xd8>
					y = 5000;
    1cfa:	4a9d      	ldr	r2, [pc, #628]	; (1f70 <vPID_Control_Task+0x348>)
    1cfc:	4b9b      	ldr	r3, [pc, #620]	; (1f6c <vPID_Control_Task+0x344>)
    1cfe:	601a      	str	r2, [r3, #0]
				}
		
				if(y < 0){
    1d00:	4b9a      	ldr	r3, [pc, #616]	; (1f6c <vPID_Control_Task+0x344>)
    1d02:	6818      	ldr	r0, [r3, #0]
    1d04:	2100      	movs	r1, #0
    1d06:	4b9c      	ldr	r3, [pc, #624]	; (1f78 <vPID_Control_Task+0x350>)
    1d08:	4798      	blx	r3
    1d0a:	2800      	cmp	r0, #0
    1d0c:	d16f      	bne.n	1dee <vPID_Control_Task+0x1c6>
					y = 0;
				}
		
				normY = (((y * 128)/5000)+127);
    1d0e:	4b97      	ldr	r3, [pc, #604]	; (1f6c <vPID_Control_Task+0x344>)
    1d10:	6818      	ldr	r0, [r3, #0]
    1d12:	2186      	movs	r1, #134	; 0x86
    1d14:	05c9      	lsls	r1, r1, #23
    1d16:	4b8c      	ldr	r3, [pc, #560]	; (1f48 <vPID_Control_Task+0x320>)
    1d18:	4798      	blx	r3
    1d1a:	4995      	ldr	r1, [pc, #596]	; (1f70 <vPID_Control_Task+0x348>)
    1d1c:	4b8d      	ldr	r3, [pc, #564]	; (1f54 <vPID_Control_Task+0x32c>)
    1d1e:	4798      	blx	r3
    1d20:	4996      	ldr	r1, [pc, #600]	; (1f7c <vPID_Control_Task+0x354>)
    1d22:	4b8a      	ldr	r3, [pc, #552]	; (1f4c <vPID_Control_Task+0x324>)
    1d24:	4798      	blx	r3
    1d26:	4b96      	ldr	r3, [pc, #600]	; (1f80 <vPID_Control_Task+0x358>)
    1d28:	4798      	blx	r3
    1d2a:	4b96      	ldr	r3, [pc, #600]	; (1f84 <vPID_Control_Task+0x35c>)
    1d2c:	6018      	str	r0, [r3, #0]
				tc4->CC[0].reg = (normY);
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	b2d2      	uxtb	r2, r2
    1d32:	4995      	ldr	r1, [pc, #596]	; (1f88 <vPID_Control_Task+0x360>)
    1d34:	760a      	strb	r2, [r1, #24]
				tc4->CC[1].reg = 255-normY;
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	43db      	mvns	r3, r3
    1d3a:	b2db      	uxtb	r3, r3
    1d3c:	764b      	strb	r3, [r1, #25]
				while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync of disable
    1d3e:	000a      	movs	r2, r1
    1d40:	7bd3      	ldrb	r3, [r2, #15]
    1d42:	09db      	lsrs	r3, r3, #7
    1d44:	d1fc      	bne.n	1d40 <vPID_Control_Task+0x118>
		
				countEICs = 0;
    1d46:	2200      	movs	r2, #0
    1d48:	4b90      	ldr	r3, [pc, #576]	; (1f8c <vPID_Control_Task+0x364>)
    1d4a:	601a      	str	r2, [r3, #0]
				tc4->CC[1].reg = 127;
				while(tc4->STATUS.bit.SYNCBUSY){}
				break;
		}
		
		xSemaphoreGive(xMutex);			//Give back semaphore after complete
    1d4c:	4b90      	ldr	r3, [pc, #576]	; (1f90 <vPID_Control_Task+0x368>)
    1d4e:	6818      	ldr	r0, [r3, #0]
    1d50:	2300      	movs	r3, #0
    1d52:	2200      	movs	r2, #0
    1d54:	2100      	movs	r1, #0
    1d56:	4c8f      	ldr	r4, [pc, #572]	; (1f94 <vPID_Control_Task+0x36c>)
    1d58:	47a0      	blx	r4
	vTaskDelay(pdMS_TO_TICKS(1000/200));		//Delay to run Task at 200Hz
    1d5a:	2032      	movs	r0, #50	; 0x32
    1d5c:	4b8e      	ldr	r3, [pc, #568]	; (1f98 <vPID_Control_Task+0x370>)
    1d5e:	4798      	blx	r3
	xSemaphoreTake(xMutex, 0);		//Take semaphore when available. If not available, imedietly return (0 indicates no block/waiting)
    1d60:	4b8b      	ldr	r3, [pc, #556]	; (1f90 <vPID_Control_Task+0x368>)
    1d62:	6818      	ldr	r0, [r3, #0]
    1d64:	2300      	movs	r3, #0
    1d66:	2200      	movs	r2, #0
    1d68:	2100      	movs	r1, #0
    1d6a:	4c8c      	ldr	r4, [pc, #560]	; (1f9c <vPID_Control_Task+0x374>)
    1d6c:	47a0      	blx	r4
		rawSpeed = countEICs * (60*200/400);// raw RPM calculation
    1d6e:	4b87      	ldr	r3, [pc, #540]	; (1f8c <vPID_Control_Task+0x364>)
    1d70:	681a      	ldr	r2, [r3, #0]
    1d72:	0113      	lsls	r3, r2, #4
    1d74:	1a9b      	subs	r3, r3, r2
    1d76:	005b      	lsls	r3, r3, #1
    1d78:	4e6e      	ldr	r6, [pc, #440]	; (1f34 <vPID_Control_Task+0x30c>)
    1d7a:	6033      	str	r3, [r6, #0]
		filterY = (0.9691*filterY1) + (0.03093*filterX1);
    1d7c:	4f88      	ldr	r7, [pc, #544]	; (1fa0 <vPID_Control_Task+0x378>)
    1d7e:	6838      	ldr	r0, [r7, #0]
    1d80:	4d88      	ldr	r5, [pc, #544]	; (1fa4 <vPID_Control_Task+0x37c>)
    1d82:	682b      	ldr	r3, [r5, #0]
    1d84:	469b      	mov	fp, r3
    1d86:	4b88      	ldr	r3, [pc, #544]	; (1fa8 <vPID_Control_Task+0x380>)
    1d88:	469a      	mov	sl, r3
    1d8a:	4798      	blx	r3
    1d8c:	4c87      	ldr	r4, [pc, #540]	; (1fac <vPID_Control_Task+0x384>)
    1d8e:	4a88      	ldr	r2, [pc, #544]	; (1fb0 <vPID_Control_Task+0x388>)
    1d90:	4b88      	ldr	r3, [pc, #544]	; (1fb4 <vPID_Control_Task+0x38c>)
    1d92:	47a0      	blx	r4
    1d94:	9000      	str	r0, [sp, #0]
    1d96:	9101      	str	r1, [sp, #4]
    1d98:	4658      	mov	r0, fp
    1d9a:	47d0      	blx	sl
    1d9c:	4a86      	ldr	r2, [pc, #536]	; (1fb8 <vPID_Control_Task+0x390>)
    1d9e:	4b87      	ldr	r3, [pc, #540]	; (1fbc <vPID_Control_Task+0x394>)
    1da0:	47a0      	blx	r4
    1da2:	0002      	movs	r2, r0
    1da4:	000b      	movs	r3, r1
    1da6:	9800      	ldr	r0, [sp, #0]
    1da8:	9901      	ldr	r1, [sp, #4]
    1daa:	4c85      	ldr	r4, [pc, #532]	; (1fc0 <vPID_Control_Task+0x398>)
    1dac:	47a0      	blx	r4
    1dae:	4b85      	ldr	r3, [pc, #532]	; (1fc4 <vPID_Control_Task+0x39c>)
    1db0:	4798      	blx	r3
    1db2:	4c85      	ldr	r4, [pc, #532]	; (1fc8 <vPID_Control_Task+0x3a0>)
    1db4:	6020      	str	r0, [r4, #0]
		filterY1 = filterY;
    1db6:	6823      	ldr	r3, [r4, #0]
    1db8:	603b      	str	r3, [r7, #0]
		filterX1 = rawSpeed;
    1dba:	6830      	ldr	r0, [r6, #0]
    1dbc:	4b61      	ldr	r3, [pc, #388]	; (1f44 <vPID_Control_Task+0x31c>)
    1dbe:	4798      	blx	r3
    1dc0:	6028      	str	r0, [r5, #0]
		filterRawSpeed = filterY;
    1dc2:	6820      	ldr	r0, [r4, #0]
    1dc4:	4b6e      	ldr	r3, [pc, #440]	; (1f80 <vPID_Control_Task+0x358>)
    1dc6:	4798      	blx	r3
    1dc8:	4b80      	ldr	r3, [pc, #512]	; (1fcc <vPID_Control_Task+0x3a4>)
    1dca:	6018      	str	r0, [r3, #0]
		switch(mode){
    1dcc:	4b80      	ldr	r3, [pc, #512]	; (1fd0 <vPID_Control_Task+0x3a8>)
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d100      	bne.n	1dd6 <vPID_Control_Task+0x1ae>
    1dd4:	e730      	b.n	1c38 <vPID_Control_Task+0x10>
    1dd6:	2b01      	cmp	r3, #1
    1dd8:	d00d      	beq.n	1df6 <vPID_Control_Task+0x1ce>
				tc4->CC[0].reg = 255-127;
    1dda:	4b6b      	ldr	r3, [pc, #428]	; (1f88 <vPID_Control_Task+0x360>)
    1ddc:	2280      	movs	r2, #128	; 0x80
    1dde:	761a      	strb	r2, [r3, #24]
				tc4->CC[1].reg = 127;
    1de0:	3a01      	subs	r2, #1
    1de2:	765a      	strb	r2, [r3, #25]
				while(tc4->STATUS.bit.SYNCBUSY){}
    1de4:	001a      	movs	r2, r3
    1de6:	7bd3      	ldrb	r3, [r2, #15]
    1de8:	09db      	lsrs	r3, r3, #7
    1dea:	d1fc      	bne.n	1de6 <vPID_Control_Task+0x1be>
    1dec:	e7ae      	b.n	1d4c <vPID_Control_Task+0x124>
					y = 0;
    1dee:	2200      	movs	r2, #0
    1df0:	4b5e      	ldr	r3, [pc, #376]	; (1f6c <vPID_Control_Task+0x344>)
    1df2:	601a      	str	r2, [r3, #0]
    1df4:	e78b      	b.n	1d0e <vPID_Control_Task+0xe6>
				key_position = keypad*400/360; //normalize keypad angle input
    1df6:	4b4e      	ldr	r3, [pc, #312]	; (1f30 <vPID_Control_Task+0x308>)
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	20c8      	movs	r0, #200	; 0xc8
    1dfc:	0040      	lsls	r0, r0, #1
    1dfe:	4358      	muls	r0, r3
    1e00:	21b4      	movs	r1, #180	; 0xb4
    1e02:	0049      	lsls	r1, r1, #1
    1e04:	4b73      	ldr	r3, [pc, #460]	; (1fd4 <vPID_Control_Task+0x3ac>)
    1e06:	4798      	blx	r3
    1e08:	4b4e      	ldr	r3, [pc, #312]	; (1f44 <vPID_Control_Task+0x31c>)
    1e0a:	4798      	blx	r3
    1e0c:	4b72      	ldr	r3, [pc, #456]	; (1fd8 <vPID_Control_Task+0x3b0>)
    1e0e:	6018      	str	r0, [r3, #0]
				if(i == 0){
    1e10:	4b46      	ldr	r3, [pc, #280]	; (1f2c <vPID_Control_Task+0x304>)
    1e12:	681b      	ldr	r3, [r3, #0]
    1e14:	2b00      	cmp	r3, #0
    1e16:	d102      	bne.n	1e1e <vPID_Control_Task+0x1f6>
					countEICs = 0;
    1e18:	2200      	movs	r2, #0
    1e1a:	4b5c      	ldr	r3, [pc, #368]	; (1f8c <vPID_Control_Task+0x364>)
    1e1c:	601a      	str	r2, [r3, #0]
				errorPos = countEICs-(int)key_position;
    1e1e:	4d5b      	ldr	r5, [pc, #364]	; (1f8c <vPID_Control_Task+0x364>)
    1e20:	682c      	ldr	r4, [r5, #0]
    1e22:	4b6d      	ldr	r3, [pc, #436]	; (1fd8 <vPID_Control_Task+0x3b0>)
    1e24:	6818      	ldr	r0, [r3, #0]
    1e26:	4b56      	ldr	r3, [pc, #344]	; (1f80 <vPID_Control_Task+0x358>)
    1e28:	4798      	blx	r3
    1e2a:	1a20      	subs	r0, r4, r0
    1e2c:	4c45      	ldr	r4, [pc, #276]	; (1f44 <vPID_Control_Task+0x31c>)
    1e2e:	47a0      	blx	r4
    1e30:	4b6a      	ldr	r3, [pc, #424]	; (1fdc <vPID_Control_Task+0x3b4>)
    1e32:	6018      	str	r0, [r3, #0]
				temp = ((float)countEICs / 400);
    1e34:	6828      	ldr	r0, [r5, #0]
    1e36:	47a0      	blx	r4
    1e38:	4969      	ldr	r1, [pc, #420]	; (1fe0 <vPID_Control_Task+0x3b8>)
    1e3a:	4b46      	ldr	r3, [pc, #280]	; (1f54 <vPID_Control_Task+0x32c>)
    1e3c:	4798      	blx	r3
    1e3e:	4b69      	ldr	r3, [pc, #420]	; (1fe4 <vPID_Control_Task+0x3bc>)
    1e40:	6018      	str	r0, [r3, #0]
				if(temp < 0){
    1e42:	6818      	ldr	r0, [r3, #0]
    1e44:	2100      	movs	r1, #0
    1e46:	4b4c      	ldr	r3, [pc, #304]	; (1f78 <vPID_Control_Task+0x350>)
    1e48:	4798      	blx	r3
    1e4a:	2800      	cmp	r0, #0
    1e4c:	d164      	bne.n	1f18 <vPID_Control_Task+0x2f0>
				else if(temp != 0){
    1e4e:	4b65      	ldr	r3, [pc, #404]	; (1fe4 <vPID_Control_Task+0x3bc>)
    1e50:	6818      	ldr	r0, [r3, #0]
    1e52:	2100      	movs	r1, #0
    1e54:	4b64      	ldr	r3, [pc, #400]	; (1fe8 <vPID_Control_Task+0x3c0>)
    1e56:	4798      	blx	r3
    1e58:	2800      	cmp	r0, #0
    1e5a:	d10a      	bne.n	1e72 <vPID_Control_Task+0x24a>
					errorDisplay = (countEICs*360)/400;
    1e5c:	4b4b      	ldr	r3, [pc, #300]	; (1f8c <vPID_Control_Task+0x364>)
    1e5e:	681b      	ldr	r3, [r3, #0]
    1e60:	3069      	adds	r0, #105	; 0x69
    1e62:	30ff      	adds	r0, #255	; 0xff
    1e64:	4358      	muls	r0, r3
    1e66:	21c8      	movs	r1, #200	; 0xc8
    1e68:	0049      	lsls	r1, r1, #1
    1e6a:	4b5a      	ldr	r3, [pc, #360]	; (1fd4 <vPID_Control_Task+0x3ac>)
    1e6c:	4798      	blx	r3
    1e6e:	4b5f      	ldr	r3, [pc, #380]	; (1fec <vPID_Control_Task+0x3c4>)
    1e70:	6018      	str	r0, [r3, #0]
				integralx = integralx + (Ts * errorPos);
    1e72:	4b32      	ldr	r3, [pc, #200]	; (1f3c <vPID_Control_Task+0x314>)
    1e74:	4698      	mov	r8, r3
    1e76:	6818      	ldr	r0, [r3, #0]
    1e78:	4c58      	ldr	r4, [pc, #352]	; (1fdc <vPID_Control_Task+0x3b4>)
    1e7a:	6821      	ldr	r1, [r4, #0]
    1e7c:	4f5c      	ldr	r7, [pc, #368]	; (1ff0 <vPID_Control_Task+0x3c8>)
    1e7e:	683e      	ldr	r6, [r7, #0]
    1e80:	4d31      	ldr	r5, [pc, #196]	; (1f48 <vPID_Control_Task+0x320>)
    1e82:	47a8      	blx	r5
    1e84:	4b31      	ldr	r3, [pc, #196]	; (1f4c <vPID_Control_Task+0x324>)
    1e86:	4699      	mov	r9, r3
    1e88:	1c31      	adds	r1, r6, #0
    1e8a:	4798      	blx	r3
    1e8c:	6038      	str	r0, [r7, #0]
				Diffx = ((errorPos - errorPos1) / Ts);
    1e8e:	6820      	ldr	r0, [r4, #0]
    1e90:	4e58      	ldr	r6, [pc, #352]	; (1ff4 <vPID_Control_Task+0x3cc>)
    1e92:	6831      	ldr	r1, [r6, #0]
    1e94:	4643      	mov	r3, r8
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	4698      	mov	r8, r3
    1e9a:	4b57      	ldr	r3, [pc, #348]	; (1ff8 <vPID_Control_Task+0x3d0>)
    1e9c:	4798      	blx	r3
    1e9e:	4641      	mov	r1, r8
    1ea0:	4b2c      	ldr	r3, [pc, #176]	; (1f54 <vPID_Control_Task+0x32c>)
    1ea2:	4798      	blx	r3
    1ea4:	4b55      	ldr	r3, [pc, #340]	; (1ffc <vPID_Control_Task+0x3d4>)
    1ea6:	6018      	str	r0, [r3, #0]
				x = (Kpp * errorPos) + (Kip * integralx) + (Kdp * Diffx);
    1ea8:	4a55      	ldr	r2, [pc, #340]	; (2000 <STACK_SIZE>)
    1eaa:	6810      	ldr	r0, [r2, #0]
    1eac:	6821      	ldr	r1, [r4, #0]
    1eae:	4a55      	ldr	r2, [pc, #340]	; (2004 <STACK_SIZE+0x4>)
    1eb0:	6812      	ldr	r2, [r2, #0]
    1eb2:	4692      	mov	sl, r2
    1eb4:	683a      	ldr	r2, [r7, #0]
    1eb6:	4693      	mov	fp, r2
    1eb8:	4a53      	ldr	r2, [pc, #332]	; (2008 <STACK_SIZE+0x8>)
    1eba:	6817      	ldr	r7, [r2, #0]
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	4698      	mov	r8, r3
    1ec0:	47a8      	blx	r5
    1ec2:	9000      	str	r0, [sp, #0]
    1ec4:	4659      	mov	r1, fp
    1ec6:	4650      	mov	r0, sl
    1ec8:	47a8      	blx	r5
    1eca:	1c01      	adds	r1, r0, #0
    1ecc:	9800      	ldr	r0, [sp, #0]
    1ece:	47c8      	blx	r9
    1ed0:	9000      	str	r0, [sp, #0]
    1ed2:	4641      	mov	r1, r8
    1ed4:	1c38      	adds	r0, r7, #0
    1ed6:	47a8      	blx	r5
    1ed8:	1c01      	adds	r1, r0, #0
    1eda:	9800      	ldr	r0, [sp, #0]
    1edc:	47c8      	blx	r9
    1ede:	4b4b      	ldr	r3, [pc, #300]	; (200c <STACK_SIZE+0xc>)
    1ee0:	6018      	str	r0, [r3, #0]
				x_int = x;
    1ee2:	6818      	ldr	r0, [r3, #0]
    1ee4:	4b26      	ldr	r3, [pc, #152]	; (1f80 <vPID_Control_Task+0x358>)
    1ee6:	4798      	blx	r3
    1ee8:	4a49      	ldr	r2, [pc, #292]	; (2010 <STACK_SIZE+0x10>)
    1eea:	6010      	str	r0, [r2, #0]
				errorPos1 = errorPos;
    1eec:	6823      	ldr	r3, [r4, #0]
    1eee:	6033      	str	r3, [r6, #0]
				tc4->CC[0].reg = 255-(x_int+127);
    1ef0:	6811      	ldr	r1, [r2, #0]
    1ef2:	2380      	movs	r3, #128	; 0x80
    1ef4:	425b      	negs	r3, r3
    1ef6:	1a5b      	subs	r3, r3, r1
    1ef8:	b2db      	uxtb	r3, r3
    1efa:	4923      	ldr	r1, [pc, #140]	; (1f88 <vPID_Control_Task+0x360>)
    1efc:	760b      	strb	r3, [r1, #24]
				tc4->CC[1].reg = (x_int+127);
    1efe:	6813      	ldr	r3, [r2, #0]
    1f00:	337f      	adds	r3, #127	; 0x7f
    1f02:	b2db      	uxtb	r3, r3
    1f04:	764b      	strb	r3, [r1, #25]
				while(tc4->STATUS.bit.SYNCBUSY){}
    1f06:	000a      	movs	r2, r1
    1f08:	7bd3      	ldrb	r3, [r2, #15]
    1f0a:	09db      	lsrs	r3, r3, #7
    1f0c:	d1fc      	bne.n	1f08 <vPID_Control_Task+0x2e0>
				i++;
    1f0e:	4a07      	ldr	r2, [pc, #28]	; (1f2c <vPID_Control_Task+0x304>)
    1f10:	6813      	ldr	r3, [r2, #0]
    1f12:	3301      	adds	r3, #1
    1f14:	6013      	str	r3, [r2, #0]
				break;
    1f16:	e719      	b.n	1d4c <vPID_Control_Task+0x124>
					errorDisplay = (countEICs*360)/400 * -1;
    1f18:	682b      	ldr	r3, [r5, #0]
    1f1a:	483e      	ldr	r0, [pc, #248]	; (2014 <STACK_SIZE+0x14>)
    1f1c:	4358      	muls	r0, r3
    1f1e:	21c8      	movs	r1, #200	; 0xc8
    1f20:	0049      	lsls	r1, r1, #1
    1f22:	4b2c      	ldr	r3, [pc, #176]	; (1fd4 <vPID_Control_Task+0x3ac>)
    1f24:	4798      	blx	r3
    1f26:	4b31      	ldr	r3, [pc, #196]	; (1fec <vPID_Control_Task+0x3c4>)
    1f28:	6018      	str	r0, [r3, #0]
    1f2a:	e7a2      	b.n	1e72 <vPID_Control_Task+0x24a>
    1f2c:	20003c78 	.word	0x20003c78
    1f30:	20003cc4 	.word	0x20003cc4
    1f34:	20003cbc 	.word	0x20003cbc
    1f38:	20003cb4 	.word	0x20003cb4
    1f3c:	2000002c 	.word	0x2000002c
    1f40:	20003c80 	.word	0x20003c80
    1f44:	000038a5 	.word	0x000038a5
    1f48:	000032ed 	.word	0x000032ed
    1f4c:	00002be9 	.word	0x00002be9
    1f50:	20003c64 	.word	0x20003c64
    1f54:	00002f0d 	.word	0x00002f0d
    1f58:	20003ccc 	.word	0x20003ccc
    1f5c:	20000024 	.word	0x20000024
    1f60:	2000001c 	.word	0x2000001c
    1f64:	20000010 	.word	0x20000010
    1f68:	20000014 	.word	0x20000014
    1f6c:	20003cd0 	.word	0x20003cd0
    1f70:	459c4000 	.word	0x459c4000
    1f74:	00002bc1 	.word	0x00002bc1
    1f78:	00002b99 	.word	0x00002b99
    1f7c:	42fe0000 	.word	0x42fe0000
    1f80:	00003865 	.word	0x00003865
    1f84:	20003cd8 	.word	0x20003cd8
    1f88:	42003000 	.word	0x42003000
    1f8c:	20003c5c 	.word	0x20003c5c
    1f90:	20003c94 	.word	0x20003c94
    1f94:	00000615 	.word	0x00000615
    1f98:	00000fa1 	.word	0x00000fa1
    1f9c:	000008a5 	.word	0x000008a5
    1fa0:	20003c74 	.word	0x20003c74
    1fa4:	20003c6c 	.word	0x20003c6c
    1fa8:	00004465 	.word	0x00004465
    1fac:	00003f65 	.word	0x00003f65
    1fb0:	00d1b717 	.word	0x00d1b717
    1fb4:	3fef02de 	.word	0x3fef02de
    1fb8:	29dc725c 	.word	0x29dc725c
    1fbc:	3f9fac1d 	.word	0x3f9fac1d
    1fc0:	00003945 	.word	0x00003945
    1fc4:	00004509 	.word	0x00004509
    1fc8:	20003c70 	.word	0x20003c70
    1fcc:	20003c68 	.word	0x20003c68
    1fd0:	20000040 	.word	0x20000040
    1fd4:	0000299d 	.word	0x0000299d
    1fd8:	20003c88 	.word	0x20003c88
    1fdc:	20003cd4 	.word	0x20003cd4
    1fe0:	43c80000 	.word	0x43c80000
    1fe4:	20003cb8 	.word	0x20003cb8
    1fe8:	00002b8d 	.word	0x00002b8d
    1fec:	20003c9c 	.word	0x20003c9c
    1ff0:	20003c84 	.word	0x20003c84
    1ff4:	20003c60 	.word	0x20003c60
    1ff8:	0000352d 	.word	0x0000352d
    1ffc:	20003cc8 	.word	0x20003cc8
    2000:	20000020 	.word	0x20000020
    2004:	20000018 	.word	0x20000018
    2008:	2000000c 	.word	0x2000000c
    200c:	20003ca0 	.word	0x20003ca0
    2010:	20003c98 	.word	0x20003c98
    2014:	fffffe98 	.word	0xfffffe98

00002018 <clockSetup>:
	}
}
*/


void clockSetup(void){
    2018:	b570      	push	{r4, r5, r6, lr}

	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET | SYSCTRL_INTFLAG_DFLLRDY;
    201a:	4b3c      	ldr	r3, [pc, #240]	; (210c <clockSetup+0xf4>)
    201c:	22c2      	movs	r2, #194	; 0xc2
    201e:	00d2      	lsls	r2, r2, #3
    2020:	609a      	str	r2, [r3, #8]
	SYSCTRL->OSC8M.bit.PRESC = 0;	//divide the clock by 1
    2022:	6a1a      	ldr	r2, [r3, #32]
    2024:	493a      	ldr	r1, [pc, #232]	; (2110 <clockSetup+0xf8>)
    2026:	400a      	ands	r2, r1
    2028:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ONDEMAND = 1;	//clock is off is no peripheral request
    202a:	6a1a      	ldr	r2, [r3, #32]
    202c:	2180      	movs	r1, #128	; 0x80
    202e:	430a      	orrs	r2, r1
    2030:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.RUNSTDBY = 0;	//clock is off in sleep mode
    2032:	6a1a      	ldr	r2, [r3, #32]
    2034:	2640      	movs	r6, #64	; 0x40
    2036:	43b2      	bics	r2, r6
    2038:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.reg |= 1<<1;	//enable clock
    203a:	6a1c      	ldr	r4, [r3, #32]
    203c:	2502      	movs	r5, #2
    203e:	432c      	orrs	r4, r5
    2040:	621c      	str	r4, [r3, #32]
	//SYSCTRL->OSC8M.bit.FRANGE = 2;	//yet another way to control manipulate the clock freq
	
	SYSCTRL->OSC32K.bit.STARTUP = 0;	//start up asap
    2042:	699c      	ldr	r4, [r3, #24]
    2044:	4a33      	ldr	r2, [pc, #204]	; (2114 <clockSetup+0xfc>)
    2046:	4014      	ands	r4, r2
    2048:	619c      	str	r4, [r3, #24]
	SYSCTRL->OSC32K.bit.ONDEMAND = 1;	//clock is off if no peripheral request
    204a:	6998      	ldr	r0, [r3, #24]
    204c:	4308      	orrs	r0, r1
    204e:	6198      	str	r0, [r3, #24]
	SYSCTRL->OSC32K.bit.RUNSTDBY = 1;	//clock is on in sleep mode
    2050:	6999      	ldr	r1, [r3, #24]
    2052:	4331      	orrs	r1, r6
    2054:	6199      	str	r1, [r3, #24]
	SYSCTRL->OSC32K.bit.EN32K = 1;	//enable output
    2056:	6999      	ldr	r1, [r3, #24]
    2058:	2204      	movs	r2, #4
    205a:	4311      	orrs	r1, r2
    205c:	6199      	str	r1, [r3, #24]
	SYSCTRL->OSC32K.reg |= 1<<1;	//enable clock
    205e:	699a      	ldr	r2, [r3, #24]
    2060:	432a      	orrs	r2, r5
    2062:	619a      	str	r2, [r3, #24]
	
	GCLK->CTRL.bit.SWRST = 1;	//reset the generators
    2064:	4a2c      	ldr	r2, [pc, #176]	; (2118 <clockSetup+0x100>)
    2066:	7813      	ldrb	r3, [r2, #0]
    2068:	2101      	movs	r1, #1
    206a:	430b      	orrs	r3, r1
    206c:	7013      	strb	r3, [r2, #0]
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for the reset to complete
    206e:	7853      	ldrb	r3, [r2, #1]
    2070:	09db      	lsrs	r3, r3, #7
    2072:	d1fc      	bne.n	206e <clockSetup+0x56>
	
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(1);	//divide generator0 by 1
    2074:	4b28      	ldr	r3, [pc, #160]	; (2118 <clockSetup+0x100>)
    2076:	2280      	movs	r2, #128	; 0x80
    2078:	0052      	lsls	r2, r2, #1
    207a:	609a      	str	r2, [r3, #8]
	GCLK->GENDIV.reg = GCLK_GENDIV_ID(1) | GCLK_GENDIV_DIV(1);	//divide generator1 by 1
    207c:	2202      	movs	r2, #2
    207e:	32ff      	adds	r2, #255	; 0xff
    2080:	609a      	str	r2, [r3, #8]

	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
    2082:	4a26      	ldr	r2, [pc, #152]	; (211c <clockSetup+0x104>)
    2084:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_OSC8M | GCLK_GENCTRL_RUNSTDBY;
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_OE |
    2086:	4a26      	ldr	r2, [pc, #152]	; (2120 <clockSetup+0x108>)
    2088:	605a      	str	r2, [r3, #4]
	GCLK_GENCTRL_SRC_OSC32K | GCLK_GENCTRL_RUNSTDBY;
	
	while (GCLK->STATUS.bit.SYNCBUSY){}	//waiting for sync to complete
    208a:	001a      	movs	r2, r3
    208c:	7853      	ldrb	r3, [r2, #1]
    208e:	09db      	lsrs	r3, r3, #7
    2090:	d1fc      	bne.n	208c <clockSetup+0x74>
	GCLK->CLKCTRL.reg |= 0<<14;	//disable clock
    2092:	4b21      	ldr	r3, [pc, #132]	; (2118 <clockSetup+0x100>)
    2094:	885a      	ldrh	r2, [r3, #2]
    2096:	b292      	uxth	r2, r2
    2098:	805a      	strh	r2, [r3, #2]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_GEN_GCLK1 | 1<<14;	//setup genclk for ADC
    209a:	4a22      	ldr	r2, [pc, #136]	; (2124 <clockSetup+0x10c>)
    209c:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genCLK for TC4/TC5
    209e:	4a22      	ldr	r2, [pc, #136]	; (2128 <clockSetup+0x110>)
    20a0:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_EIC | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genclk for EIC...this is a single write method i believe
    20a2:	4a22      	ldr	r2, [pc, #136]	; (212c <clockSetup+0x114>)
    20a4:	805a      	strh	r2, [r3, #2]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC6_TC7 | GCLK_CLKCTRL_GEN_GCLK0 | 1<<14;	//setup genCLK for TC6/TC7
    20a6:	4a22      	ldr	r2, [pc, #136]	; (2130 <clockSetup+0x118>)
    20a8:	805a      	strh	r2, [r3, #2]

	while (GCLK->STATUS.bit.SYNCBUSY==1){}	//waiting for sync to complete
    20aa:	001a      	movs	r2, r3
    20ac:	7853      	ldrb	r3, [r2, #1]
    20ae:	09db      	lsrs	r3, r3, #7
    20b0:	2b01      	cmp	r3, #1
    20b2:	d0fb      	beq.n	20ac <clockSetup+0x94>
	
	PM->CPUSEL.bit.CPUDIV = 0;	//divide CPU clock by 1	pg 15
    20b4:	4b1f      	ldr	r3, [pc, #124]	; (2134 <clockSetup+0x11c>)
    20b6:	7a19      	ldrb	r1, [r3, #8]
    20b8:	2207      	movs	r2, #7
    20ba:	4391      	bics	r1, r2
    20bc:	7219      	strb	r1, [r3, #8]
	PM->APBASEL.bit.APBADIV = 0;	//divide apba bus by 1
    20be:	7a59      	ldrb	r1, [r3, #9]
    20c0:	4391      	bics	r1, r2
    20c2:	7259      	strb	r1, [r3, #9]
	PM->APBBSEL.bit.APBBDIV = 0;	//divide apbb bus by 1
    20c4:	7a99      	ldrb	r1, [r3, #10]
    20c6:	4391      	bics	r1, r2
    20c8:	7299      	strb	r1, [r3, #10]
	PM->APBCSEL.bit.APBCDIV = 0;	//divide apbc bus by 1
    20ca:	7ad9      	ldrb	r1, [r3, #11]
    20cc:	4391      	bics	r1, r2
    20ce:	72d9      	strb	r1, [r3, #11]
	PM->APBAMASK.reg |= 1<<3;	//enable the GCLK clock DONT THINK NECESSARY they should be enabled by default pg 159
    20d0:	699a      	ldr	r2, [r3, #24]
    20d2:	2108      	movs	r1, #8
    20d4:	430a      	orrs	r2, r1
    20d6:	619a      	str	r2, [r3, #24]
	PM->APBCMASK.reg |= 1<<16;	//enable the ADC APB
    20d8:	6a19      	ldr	r1, [r3, #32]
    20da:	2280      	movs	r2, #128	; 0x80
    20dc:	0252      	lsls	r2, r2, #9
    20de:	430a      	orrs	r2, r1
    20e0:	621a      	str	r2, [r3, #32]
	PM->APBAMASK.reg |= 1<<6;	//enable the EIC APB
    20e2:	699a      	ldr	r2, [r3, #24]
    20e4:	2140      	movs	r1, #64	; 0x40
    20e6:	430a      	orrs	r2, r1
    20e8:	619a      	str	r2, [r3, #24]
	PM->APBCMASK.reg |= PM_APBCMASK_TC4;	//enable the TC4 APB
    20ea:	6a19      	ldr	r1, [r3, #32]
    20ec:	2280      	movs	r2, #128	; 0x80
    20ee:	0152      	lsls	r2, r2, #5
    20f0:	430a      	orrs	r2, r1
    20f2:	621a      	str	r2, [r3, #32]
	PM->APBCMASK.reg |= PM_APBCMASK_TC5;	//enable the TC5 APB
    20f4:	6a19      	ldr	r1, [r3, #32]
    20f6:	2280      	movs	r2, #128	; 0x80
    20f8:	0192      	lsls	r2, r2, #6
    20fa:	430a      	orrs	r2, r1
    20fc:	621a      	str	r2, [r3, #32]
	PM->APBCMASK.reg |= PM_APBCMASK_TC6;	//enable the TC6 APB
    20fe:	6a19      	ldr	r1, [r3, #32]
    2100:	2280      	movs	r2, #128	; 0x80
    2102:	01d2      	lsls	r2, r2, #7
    2104:	430a      	orrs	r2, r1
    2106:	621a      	str	r2, [r3, #32]

}
    2108:	bd70      	pop	{r4, r5, r6, pc}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	40000800 	.word	0x40000800
    2110:	fffffcff 	.word	0xfffffcff
    2114:	fffff8ff 	.word	0xfffff8ff
    2118:	40000c00 	.word	0x40000c00
    211c:	00290600 	.word	0x00290600
    2120:	00290401 	.word	0x00290401
    2124:	0000411e 	.word	0x0000411e
    2128:	0000401c 	.word	0x0000401c
    212c:	00004005 	.word	0x00004005
    2130:	0000401d 	.word	0x0000401d
    2134:	40000400 	.word	0x40000400

00002138 <portSetup>:

void portSetup(void){
    2138:	b570      	push	{r4, r5, r6, lr}
	Port *por = PORT;
	PortGroup *porA = &(por->Group[0]);
	PortGroup *porB = &(por->Group[1]);
	porA -> DIRSET.reg = PORT_PA04 | PORT_PA05 | PORT_PA06 | PORT_PA07;//outputs
    213a:	4b1f      	ldr	r3, [pc, #124]	; (21b8 <portSetup+0x80>)
    213c:	21f0      	movs	r1, #240	; 0xf0
    213e:	6099      	str	r1, [r3, #8]
	porB -> DIRSET.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//LED segments
    2140:	4c1e      	ldr	r4, [pc, #120]	; (21bc <portSetup+0x84>)
    2142:	22ff      	movs	r2, #255	; 0xff
    2144:	60a2      	str	r2, [r4, #8]
	porA -> DIRCLR.reg = PORT_PA16 | PORT_PA17 | PORT_PA18 | PORT_PA19;//inputs keypad
    2146:	22f0      	movs	r2, #240	; 0xf0
    2148:	0312      	lsls	r2, r2, #12
    214a:	605a      	str	r2, [r3, #4]
	porA -> PINCFG[16].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    214c:	2206      	movs	r2, #6
    214e:	2050      	movs	r0, #80	; 0x50
    2150:	541a      	strb	r2, [r3, r0]
	porA -> PINCFG[17].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    2152:	3001      	adds	r0, #1
    2154:	541a      	strb	r2, [r3, r0]
	porA -> PINCFG[18].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    2156:	3001      	adds	r0, #1
    2158:	541a      	strb	r2, [r3, r0]
	porA -> PINCFG[19].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    215a:	3001      	adds	r0, #1
    215c:	541a      	strb	r2, [r3, r0]
	porA -> OUTCLR.reg = PORT_PA04 | PORT_PA05 | PORT_PA06 | PORT_PA07;	//turn on SSDs
    215e:	6159      	str	r1, [r3, #20]
	porB->DIRSET.reg = PORT_PB09;	//sign LED
    2160:	32fb      	adds	r2, #251	; 0xfb
    2162:	32ff      	adds	r2, #255	; 0xff
    2164:	60a2      	str	r2, [r4, #8]
	porB->PMUX[6].bit.PMUXE = 4;	//mux the TC wavegen PB12	PWM output
    2166:	0018      	movs	r0, r3
    2168:	30b6      	adds	r0, #182	; 0xb6
    216a:	7802      	ldrb	r2, [r0, #0]
    216c:	39e1      	subs	r1, #225	; 0xe1
    216e:	438a      	bics	r2, r1
    2170:	2104      	movs	r1, #4
    2172:	430a      	orrs	r2, r1
    2174:	7002      	strb	r2, [r0, #0]
	porB->PINCFG[12].bit.PMUXEN = 1;	//enable the mux
    2176:	0019      	movs	r1, r3
    2178:	31cc      	adds	r1, #204	; 0xcc
    217a:	780a      	ldrb	r2, [r1, #0]
    217c:	2501      	movs	r5, #1
    217e:	432a      	orrs	r2, r5
    2180:	700a      	strb	r2, [r1, #0]
	porB->PMUX[6].bit.PMUXO = 4;	//mux the TC wavegen PB13	PWM output
    2182:	7802      	ldrb	r2, [r0, #0]
    2184:	210f      	movs	r1, #15
    2186:	400a      	ands	r2, r1
    2188:	2640      	movs	r6, #64	; 0x40
    218a:	4332      	orrs	r2, r6
    218c:	7002      	strb	r2, [r0, #0]
	porB->PINCFG[13].bit.PMUXEN = 1;	//enable the mux
    218e:	3017      	adds	r0, #23
    2190:	7802      	ldrb	r2, [r0, #0]
    2192:	432a      	orrs	r2, r5
    2194:	7002      	strb	r2, [r0, #0]
	porA->PMUX[14].bit.PMUXO = 0;	//mux the EIC to pin PA28 EXTINT[8] for encoder
    2196:	223e      	movs	r2, #62	; 0x3e
    2198:	5c98      	ldrb	r0, [r3, r2]
    219a:	4001      	ands	r1, r0
    219c:	5499      	strb	r1, [r3, r2]
	porA->PINCFG[28].bit.PMUXEN =1;	//enable the MUX
    219e:	215c      	movs	r1, #92	; 0x5c
    21a0:	5c5a      	ldrb	r2, [r3, r1]
    21a2:	432a      	orrs	r2, r5
    21a4:	545a      	strb	r2, [r3, r1]
	porB->DIRCLR.reg = 1<<14;	//set as input for channel B for encoder
    21a6:	2280      	movs	r2, #128	; 0x80
    21a8:	01d2      	lsls	r2, r2, #7
    21aa:	6062      	str	r2, [r4, #4]
	porB->PINCFG[14].bit.INEN =1;	//enable the MUX
    21ac:	33ce      	adds	r3, #206	; 0xce
    21ae:	781a      	ldrb	r2, [r3, #0]
    21b0:	2102      	movs	r1, #2
    21b2:	430a      	orrs	r2, r1
    21b4:	701a      	strb	r2, [r3, #0]
}
    21b6:	bd70      	pop	{r4, r5, r6, pc}
    21b8:	41004400 	.word	0x41004400
    21bc:	41004480 	.word	0x41004480

000021c0 <wait>:

void wait(volatile int d){
    21c0:	b082      	sub	sp, #8
    21c2:	9001      	str	r0, [sp, #4]
	int count = 0;
	while (count < d*1000){
    21c4:	9a01      	ldr	r2, [sp, #4]
    21c6:	23fa      	movs	r3, #250	; 0xfa
    21c8:	009b      	lsls	r3, r3, #2
    21ca:	4353      	muls	r3, r2
    21cc:	2b00      	cmp	r3, #0
    21ce:	dd07      	ble.n	21e0 <wait+0x20>
    21d0:	2200      	movs	r2, #0
    21d2:	21fa      	movs	r1, #250	; 0xfa
    21d4:	0089      	lsls	r1, r1, #2
		count++;
    21d6:	3201      	adds	r2, #1
	while (count < d*1000){
    21d8:	9b01      	ldr	r3, [sp, #4]
    21da:	434b      	muls	r3, r1
    21dc:	4293      	cmp	r3, r2
    21de:	dcfa      	bgt.n	21d6 <wait+0x16>
	}
}
    21e0:	b002      	add	sp, #8
    21e2:	4770      	bx	lr

000021e4 <charConvert>:
		x=0;
		break;
	}
}

void charConvert(char *a){	//gives value of keypad for spd/pos ctrl
    21e4:	b510      	push	{r4, lr}
	
	keypad = ((*a-48) * 1000);
    21e6:	7803      	ldrb	r3, [r0, #0]
    21e8:	3b30      	subs	r3, #48	; 0x30
    21ea:	22fa      	movs	r2, #250	; 0xfa
    21ec:	0092      	lsls	r2, r2, #2
    21ee:	435a      	muls	r2, r3
    21f0:	4b0e      	ldr	r3, [pc, #56]	; (222c <charConvert+0x48>)
    21f2:	601a      	str	r2, [r3, #0]
	a++;
	keypad += ((*a-48) * 100);
    21f4:	681c      	ldr	r4, [r3, #0]
    21f6:	7841      	ldrb	r1, [r0, #1]
    21f8:	3930      	subs	r1, #48	; 0x30
    21fa:	2264      	movs	r2, #100	; 0x64
    21fc:	434a      	muls	r2, r1
    21fe:	1912      	adds	r2, r2, r4
    2200:	601a      	str	r2, [r3, #0]
	a++;
	keypad += ((*a-48) * 10);
    2202:	681c      	ldr	r4, [r3, #0]
    2204:	7881      	ldrb	r1, [r0, #2]
    2206:	3930      	subs	r1, #48	; 0x30
    2208:	008a      	lsls	r2, r1, #2
    220a:	1852      	adds	r2, r2, r1
    220c:	0052      	lsls	r2, r2, #1
    220e:	1912      	adds	r2, r2, r4
    2210:	601a      	str	r2, [r3, #0]
	a++;
	keypad += ((*a-48) * 1);
    2212:	6819      	ldr	r1, [r3, #0]
    2214:	78c2      	ldrb	r2, [r0, #3]
    2216:	3a30      	subs	r2, #48	; 0x30
    2218:	1852      	adds	r2, r2, r1
    221a:	601a      	str	r2, [r3, #0]
	if(keypad > 5000){	//normalize it should throw an error
    221c:	681a      	ldr	r2, [r3, #0]
    221e:	4b04      	ldr	r3, [pc, #16]	; (2230 <charConvert+0x4c>)
    2220:	429a      	cmp	r2, r3
    2222:	dd02      	ble.n	222a <charConvert+0x46>
		keypad = 5000;
    2224:	001a      	movs	r2, r3
    2226:	4b01      	ldr	r3, [pc, #4]	; (222c <charConvert+0x48>)
    2228:	601a      	str	r2, [r3, #0]
		//display(err1);
	}
	//display(a);
}
    222a:	bd10      	pop	{r4, pc}
    222c:	20003cc4 	.word	0x20003cc4
    2230:	00001388 	.word	0x00001388

00002234 <poll>:
void poll(void){
    2234:	b510      	push	{r4, lr}
	keyptr = array;
    2236:	4a9b      	ldr	r2, [pc, #620]	; (24a4 <poll+0x270>)
    2238:	4b9b      	ldr	r3, [pc, #620]	; (24a8 <poll+0x274>)
    223a:	601a      	str	r2, [r3, #0]
	key='D';
    223c:	2244      	movs	r2, #68	; 0x44
    223e:	4b9b      	ldr	r3, [pc, #620]	; (24ac <poll+0x278>)
    2240:	701a      	strb	r2, [r3, #0]
	porA -> OUTCLR.reg = PORT_PA07;//turn on left SSD/top row of keypad
    2242:	4b9b      	ldr	r3, [pc, #620]	; (24b0 <poll+0x27c>)
    2244:	323c      	adds	r2, #60	; 0x3c
    2246:	615a      	str	r2, [r3, #20]
	porA -> OUTSET.reg = PORT_PA04 | PORT_PA05 | PORT_PA06;//turn off other SSD/top row of keypad
    2248:	3a10      	subs	r2, #16
    224a:	619a      	str	r2, [r3, #24]
	if(porA->IN.reg&PORT_PA19){//checking PA19 for input
    224c:	6a1b      	ldr	r3, [r3, #32]
    224e:	031b      	lsls	r3, r3, #12
    2250:	d502      	bpl.n	2258 <poll+0x24>
		key='1';
    2252:	3a3f      	subs	r2, #63	; 0x3f
    2254:	4b95      	ldr	r3, [pc, #596]	; (24ac <poll+0x278>)
    2256:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA18){//checking PA18 for input
    2258:	4b95      	ldr	r3, [pc, #596]	; (24b0 <poll+0x27c>)
    225a:	6a1b      	ldr	r3, [r3, #32]
    225c:	035b      	lsls	r3, r3, #13
    225e:	d502      	bpl.n	2266 <poll+0x32>
		key='2';
    2260:	2232      	movs	r2, #50	; 0x32
    2262:	4b92      	ldr	r3, [pc, #584]	; (24ac <poll+0x278>)
    2264:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA17){//checking PA17 for input
    2266:	4b92      	ldr	r3, [pc, #584]	; (24b0 <poll+0x27c>)
    2268:	6a1b      	ldr	r3, [r3, #32]
    226a:	039b      	lsls	r3, r3, #14
    226c:	d502      	bpl.n	2274 <poll+0x40>
		key='3';
    226e:	2233      	movs	r2, #51	; 0x33
    2270:	4b8e      	ldr	r3, [pc, #568]	; (24ac <poll+0x278>)
    2272:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA16)//checking PA16 for input 'A'
    2274:	4b8e      	ldr	r3, [pc, #568]	; (24b0 <poll+0x27c>)
    2276:	6a1b      	ldr	r3, [r3, #32]
    2278:	03db      	lsls	r3, r3, #15
    227a:	d505      	bpl.n	2288 <poll+0x54>
		key='A';
    227c:	2241      	movs	r2, #65	; 0x41
    227e:	4b8b      	ldr	r3, [pc, #556]	; (24ac <poll+0x278>)
    2280:	701a      	strb	r2, [r3, #0]
		ent_key=1;
    2282:	3a40      	subs	r2, #64	; 0x40
    2284:	4b8b      	ldr	r3, [pc, #556]	; (24b4 <poll+0x280>)
    2286:	601a      	str	r2, [r3, #0]
	porA -> OUTSET.reg = PORT_PA07;//turn off left SSD/top row of keypad
    2288:	4c89      	ldr	r4, [pc, #548]	; (24b0 <poll+0x27c>)
    228a:	2380      	movs	r3, #128	; 0x80
    228c:	61a3      	str	r3, [r4, #24]
	wait(1);//this wait is so the numbers don't get mixed up
    228e:	2001      	movs	r0, #1
    2290:	4b89      	ldr	r3, [pc, #548]	; (24b8 <poll+0x284>)
    2292:	4798      	blx	r3
	porA -> OUTCLR.reg = PORT_PA06;//turn on left SSD/top row of keypad
    2294:	2340      	movs	r3, #64	; 0x40
    2296:	6163      	str	r3, [r4, #20]
	if(porA->IN.reg&PORT_PA19)//checking PA19 for input
    2298:	6a23      	ldr	r3, [r4, #32]
    229a:	031b      	lsls	r3, r3, #12
    229c:	d502      	bpl.n	22a4 <poll+0x70>
	key='4';
    229e:	2234      	movs	r2, #52	; 0x34
    22a0:	4b82      	ldr	r3, [pc, #520]	; (24ac <poll+0x278>)
    22a2:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA18)//checking PA18 for input
    22a4:	4b82      	ldr	r3, [pc, #520]	; (24b0 <poll+0x27c>)
    22a6:	6a1b      	ldr	r3, [r3, #32]
    22a8:	035b      	lsls	r3, r3, #13
    22aa:	d502      	bpl.n	22b2 <poll+0x7e>
	key='5';
    22ac:	2235      	movs	r2, #53	; 0x35
    22ae:	4b7f      	ldr	r3, [pc, #508]	; (24ac <poll+0x278>)
    22b0:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA17)//checking PA17 for input
    22b2:	4b7f      	ldr	r3, [pc, #508]	; (24b0 <poll+0x27c>)
    22b4:	6a1b      	ldr	r3, [r3, #32]
    22b6:	039b      	lsls	r3, r3, #14
    22b8:	d502      	bpl.n	22c0 <poll+0x8c>
	key='6';
    22ba:	2236      	movs	r2, #54	; 0x36
    22bc:	4b7b      	ldr	r3, [pc, #492]	; (24ac <poll+0x278>)
    22be:	701a      	strb	r2, [r3, #0]
	porA -> OUTSET.reg = PORT_PA06;//turn off left SSD/top row of keypad
    22c0:	4c7b      	ldr	r4, [pc, #492]	; (24b0 <poll+0x27c>)
    22c2:	2340      	movs	r3, #64	; 0x40
    22c4:	61a3      	str	r3, [r4, #24]
	wait(1);//this wait is so the numbers don't get mixed up
    22c6:	2001      	movs	r0, #1
    22c8:	4b7b      	ldr	r3, [pc, #492]	; (24b8 <poll+0x284>)
    22ca:	4798      	blx	r3
	porA -> OUTCLR.reg = PORT_PA05;//turn on left SSD/top row of keypad
    22cc:	2320      	movs	r3, #32
    22ce:	6163      	str	r3, [r4, #20]
	if(porA->IN.reg&PORT_PA19)//checking PA19 for input
    22d0:	6a23      	ldr	r3, [r4, #32]
    22d2:	031b      	lsls	r3, r3, #12
    22d4:	d502      	bpl.n	22dc <poll+0xa8>
	key='7';
    22d6:	2237      	movs	r2, #55	; 0x37
    22d8:	4b74      	ldr	r3, [pc, #464]	; (24ac <poll+0x278>)
    22da:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA18)//checking PA18 for input
    22dc:	4b74      	ldr	r3, [pc, #464]	; (24b0 <poll+0x27c>)
    22de:	6a1b      	ldr	r3, [r3, #32]
    22e0:	035b      	lsls	r3, r3, #13
    22e2:	d502      	bpl.n	22ea <poll+0xb6>
	key='8';
    22e4:	2238      	movs	r2, #56	; 0x38
    22e6:	4b71      	ldr	r3, [pc, #452]	; (24ac <poll+0x278>)
    22e8:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA17)//checking PA17 for input
    22ea:	4b71      	ldr	r3, [pc, #452]	; (24b0 <poll+0x27c>)
    22ec:	6a1b      	ldr	r3, [r3, #32]
    22ee:	039b      	lsls	r3, r3, #14
    22f0:	d502      	bpl.n	22f8 <poll+0xc4>
	key='9';
    22f2:	2239      	movs	r2, #57	; 0x39
    22f4:	4b6d      	ldr	r3, [pc, #436]	; (24ac <poll+0x278>)
    22f6:	701a      	strb	r2, [r3, #0]
	porA -> OUTSET.reg = PORT_PA05;//turn off left SSD/top row of keypad
    22f8:	4c6d      	ldr	r4, [pc, #436]	; (24b0 <poll+0x27c>)
    22fa:	2320      	movs	r3, #32
    22fc:	61a3      	str	r3, [r4, #24]
	wait(1);//this wait is so the numbers don't get mixed up
    22fe:	2001      	movs	r0, #1
    2300:	4b6d      	ldr	r3, [pc, #436]	; (24b8 <poll+0x284>)
    2302:	4798      	blx	r3
	porA -> OUTCLR.reg = PORT_PA04;//turn on left SSD/top row of keypad
    2304:	2310      	movs	r3, #16
    2306:	6163      	str	r3, [r4, #20]
	if(porA->IN.reg&PORT_PA17){//checking PA17 for input '#'
    2308:	6a23      	ldr	r3, [r4, #32]
    230a:	039b      	lsls	r3, r3, #14
    230c:	d505      	bpl.n	231a <poll+0xe6>
		key='#';
    230e:	2223      	movs	r2, #35	; 0x23
    2310:	4b66      	ldr	r3, [pc, #408]	; (24ac <poll+0x278>)
    2312:	701a      	strb	r2, [r3, #0]
		ent_key=0;
    2314:	2200      	movs	r2, #0
    2316:	4b67      	ldr	r3, [pc, #412]	; (24b4 <poll+0x280>)
    2318:	601a      	str	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA18){//checking PA18 for input '0'
    231a:	4b65      	ldr	r3, [pc, #404]	; (24b0 <poll+0x27c>)
    231c:	6a1b      	ldr	r3, [r3, #32]
    231e:	035b      	lsls	r3, r3, #13
    2320:	d502      	bpl.n	2328 <poll+0xf4>
		key='0';
    2322:	2230      	movs	r2, #48	; 0x30
    2324:	4b61      	ldr	r3, [pc, #388]	; (24ac <poll+0x278>)
    2326:	701a      	strb	r2, [r3, #0]
	if(porA->IN.reg&PORT_PA19){//checking PA19 for input '*'
    2328:	4b61      	ldr	r3, [pc, #388]	; (24b0 <poll+0x27c>)
    232a:	6a1b      	ldr	r3, [r3, #32]
    232c:	031b      	lsls	r3, r3, #12
    232e:	d505      	bpl.n	233c <poll+0x108>
		key = '*';
    2330:	222a      	movs	r2, #42	; 0x2a
    2332:	4b5e      	ldr	r3, [pc, #376]	; (24ac <poll+0x278>)
    2334:	701a      	strb	r2, [r3, #0]
		ent_key=0;
    2336:	2200      	movs	r2, #0
    2338:	4b5e      	ldr	r3, [pc, #376]	; (24b4 <poll+0x280>)
    233a:	601a      	str	r2, [r3, #0]
	porA -> OUTSET.reg = PORT_PA04;//turn off left SSD/top row of keypad
    233c:	2210      	movs	r2, #16
    233e:	4b5c      	ldr	r3, [pc, #368]	; (24b0 <poll+0x27c>)
    2340:	619a      	str	r2, [r3, #24]
	wait(1);//this wait is so the numbers don't get mixed up
    2342:	2001      	movs	r0, #1
    2344:	4b5c      	ldr	r3, [pc, #368]	; (24b8 <poll+0x284>)
    2346:	4798      	blx	r3
	switch(x){
    2348:	4b5c      	ldr	r3, [pc, #368]	; (24bc <poll+0x288>)
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	2b01      	cmp	r3, #1
    234e:	d021      	beq.n	2394 <poll+0x160>
    2350:	dd0d      	ble.n	236e <poll+0x13a>
    2352:	2b02      	cmp	r3, #2
    2354:	d036      	beq.n	23c4 <poll+0x190>
    2356:	2b03      	cmp	r3, #3
    2358:	d000      	beq.n	235c <poll+0x128>
    235a:	e09f      	b.n	249c <poll+0x268>
		if(key == 'D'){
    235c:	4b53      	ldr	r3, [pc, #332]	; (24ac <poll+0x278>)
    235e:	781b      	ldrb	r3, [r3, #0]
    2360:	2b44      	cmp	r3, #68	; 0x44
    2362:	d100      	bne.n	2366 <poll+0x132>
    2364:	e08b      	b.n	247e <poll+0x24a>
		CNT = 0;
    2366:	2200      	movs	r2, #0
    2368:	4b55      	ldr	r3, [pc, #340]	; (24c0 <poll+0x28c>)
    236a:	601a      	str	r2, [r3, #0]
		break;
    236c:	e068      	b.n	2440 <poll+0x20c>
	switch(x){
    236e:	2b00      	cmp	r3, #0
    2370:	d000      	beq.n	2374 <poll+0x140>
    2372:	e093      	b.n	249c <poll+0x268>
		if(key=='D'){
    2374:	4b4d      	ldr	r3, [pc, #308]	; (24ac <poll+0x278>)
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	2b44      	cmp	r3, #68	; 0x44
    237a:	d061      	beq.n	2440 <poll+0x20c>
		T1=key;
    237c:	4b4b      	ldr	r3, [pc, #300]	; (24ac <poll+0x278>)
    237e:	781b      	ldrb	r3, [r3, #0]
    2380:	b2db      	uxtb	r3, r3
    2382:	4a50      	ldr	r2, [pc, #320]	; (24c4 <poll+0x290>)
    2384:	7013      	strb	r3, [r2, #0]
		CNT=0;
    2386:	2200      	movs	r2, #0
    2388:	4b4d      	ldr	r3, [pc, #308]	; (24c0 <poll+0x28c>)
    238a:	601a      	str	r2, [r3, #0]
		x=1;
    238c:	3201      	adds	r2, #1
    238e:	4b4b      	ldr	r3, [pc, #300]	; (24bc <poll+0x288>)
    2390:	601a      	str	r2, [r3, #0]
		break;
    2392:	e055      	b.n	2440 <poll+0x20c>
		if(key!=T1){
    2394:	4b45      	ldr	r3, [pc, #276]	; (24ac <poll+0x278>)
    2396:	781b      	ldrb	r3, [r3, #0]
    2398:	4a4a      	ldr	r2, [pc, #296]	; (24c4 <poll+0x290>)
    239a:	7812      	ldrb	r2, [r2, #0]
    239c:	b2db      	uxtb	r3, r3
    239e:	4293      	cmp	r3, r2
    23a0:	d003      	beq.n	23aa <poll+0x176>
			x=0;
    23a2:	2200      	movs	r2, #0
    23a4:	4b45      	ldr	r3, [pc, #276]	; (24bc <poll+0x288>)
    23a6:	601a      	str	r2, [r3, #0]
		break;}
    23a8:	e04a      	b.n	2440 <poll+0x20c>
		CNT++;
    23aa:	4b45      	ldr	r3, [pc, #276]	; (24c0 <poll+0x28c>)
    23ac:	681a      	ldr	r2, [r3, #0]
    23ae:	3201      	adds	r2, #1
    23b0:	601a      	str	r2, [r3, #0]
		if(CNT>N){	//pressed long enough
    23b2:	681a      	ldr	r2, [r3, #0]
    23b4:	4b44      	ldr	r3, [pc, #272]	; (24c8 <poll+0x294>)
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	429a      	cmp	r2, r3
    23ba:	dd41      	ble.n	2440 <poll+0x20c>
			x=2;
    23bc:	2202      	movs	r2, #2
    23be:	4b3f      	ldr	r3, [pc, #252]	; (24bc <poll+0x288>)
    23c0:	601a      	str	r2, [r3, #0]
		break;}
    23c2:	e03d      	b.n	2440 <poll+0x20c>
		if(key!='D'){
    23c4:	4b39      	ldr	r3, [pc, #228]	; (24ac <poll+0x278>)
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	2b44      	cmp	r3, #68	; 0x44
    23ca:	d033      	beq.n	2434 <poll+0x200>
			CNT=0;
    23cc:	2200      	movs	r2, #0
    23ce:	4b3c      	ldr	r3, [pc, #240]	; (24c0 <poll+0x28c>)
    23d0:	601a      	str	r2, [r3, #0]
			if(key == '#'){	//if spd key is detected reset array set mode
    23d2:	4b36      	ldr	r3, [pc, #216]	; (24ac <poll+0x278>)
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	2b23      	cmp	r3, #35	; 0x23
    23d8:	d01d      	beq.n	2416 <poll+0x1e2>
			else if(key == '*'){	//if pos key is detected reset array set mode
    23da:	4b34      	ldr	r3, [pc, #208]	; (24ac <poll+0x278>)
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	2b2a      	cmp	r3, #42	; 0x2a
    23e0:	d02f      	beq.n	2442 <poll+0x20e>
			else if( key == 'A'){	//'A' is the enter key
    23e2:	4b32      	ldr	r3, [pc, #200]	; (24ac <poll+0x278>)
    23e4:	781b      	ldrb	r3, [r3, #0]
    23e6:	2b41      	cmp	r3, #65	; 0x41
    23e8:	d03c      	beq.n	2464 <poll+0x230>
			else if(key != 'B' | 'C'){
    23ea:	4a30      	ldr	r2, [pc, #192]	; (24ac <poll+0x278>)
    23ec:	7813      	ldrb	r3, [r2, #0]
				array[i]=key;	//reset array to loop back on itself
    23ee:	4b37      	ldr	r3, [pc, #220]	; (24cc <poll+0x298>)
    23f0:	6818      	ldr	r0, [r3, #0]
    23f2:	7811      	ldrb	r1, [r2, #0]
    23f4:	b2c9      	uxtb	r1, r1
    23f6:	4c2b      	ldr	r4, [pc, #172]	; (24a4 <poll+0x270>)
    23f8:	5421      	strb	r1, [r4, r0]
				array2[i++]=key;
    23fa:	6819      	ldr	r1, [r3, #0]
    23fc:	1c48      	adds	r0, r1, #1
    23fe:	6018      	str	r0, [r3, #0]
    2400:	7812      	ldrb	r2, [r2, #0]
    2402:	b2d2      	uxtb	r2, r2
    2404:	4832      	ldr	r0, [pc, #200]	; (24d0 <poll+0x29c>)
    2406:	5442      	strb	r2, [r0, r1]
				if(i>=4){
    2408:	681b      	ldr	r3, [r3, #0]
    240a:	2b03      	cmp	r3, #3
    240c:	dd12      	ble.n	2434 <poll+0x200>
					i=0;
    240e:	2200      	movs	r2, #0
    2410:	4b2e      	ldr	r3, [pc, #184]	; (24cc <poll+0x298>)
    2412:	601a      	str	r2, [r3, #0]
    2414:	e00e      	b.n	2434 <poll+0x200>
				array[0] = '0';
    2416:	4b23      	ldr	r3, [pc, #140]	; (24a4 <poll+0x270>)
    2418:	3230      	adds	r2, #48	; 0x30
    241a:	701a      	strb	r2, [r3, #0]
				array[1] = '0';
    241c:	705a      	strb	r2, [r3, #1]
				array[2] = '0';
    241e:	709a      	strb	r2, [r3, #2]
				array[3] = '0';
    2420:	70da      	strb	r2, [r3, #3]
				i = 0;
    2422:	2300      	movs	r3, #0
    2424:	4a29      	ldr	r2, [pc, #164]	; (24cc <poll+0x298>)
    2426:	6013      	str	r3, [r2, #0]
				porB -> OUTSET.reg = PORT_PB09;	//turn off LED
    2428:	2180      	movs	r1, #128	; 0x80
    242a:	0089      	lsls	r1, r1, #2
    242c:	4a29      	ldr	r2, [pc, #164]	; (24d4 <poll+0x2a0>)
    242e:	6191      	str	r1, [r2, #24]
				mode = 0;	//set to speed ctrl
    2430:	4a29      	ldr	r2, [pc, #164]	; (24d8 <poll+0x2a4>)
    2432:	6013      	str	r3, [r2, #0]
		CNT=0;
    2434:	2200      	movs	r2, #0
    2436:	4b22      	ldr	r3, [pc, #136]	; (24c0 <poll+0x28c>)
    2438:	601a      	str	r2, [r3, #0]
		x=3;
    243a:	3203      	adds	r2, #3
    243c:	4b1f      	ldr	r3, [pc, #124]	; (24bc <poll+0x288>)
    243e:	601a      	str	r2, [r3, #0]
}
    2440:	bd10      	pop	{r4, pc}
				array[0] = '0';
    2442:	4b18      	ldr	r3, [pc, #96]	; (24a4 <poll+0x270>)
    2444:	2230      	movs	r2, #48	; 0x30
    2446:	701a      	strb	r2, [r3, #0]
				array[1] = '0';
    2448:	705a      	strb	r2, [r3, #1]
				array[2] = '0';
    244a:	709a      	strb	r2, [r3, #2]
				array[3] = '0';
    244c:	70da      	strb	r2, [r3, #3]
				i = 0;
    244e:	2200      	movs	r2, #0
    2450:	4b1e      	ldr	r3, [pc, #120]	; (24cc <poll+0x298>)
    2452:	601a      	str	r2, [r3, #0]
				porB -> OUTCLR.reg = PORT_PB09;	//turn on LED
    2454:	2280      	movs	r2, #128	; 0x80
    2456:	0092      	lsls	r2, r2, #2
    2458:	4b1e      	ldr	r3, [pc, #120]	; (24d4 <poll+0x2a0>)
    245a:	615a      	str	r2, [r3, #20]
				mode = 1;	//set to pos ctrl
    245c:	2201      	movs	r2, #1
    245e:	4b1e      	ldr	r3, [pc, #120]	; (24d8 <poll+0x2a4>)
    2460:	601a      	str	r2, [r3, #0]
    2462:	e7e7      	b.n	2434 <poll+0x200>
				charConvert(keyptr);
    2464:	4c0f      	ldr	r4, [pc, #60]	; (24a4 <poll+0x270>)
    2466:	0020      	movs	r0, r4
    2468:	4b1c      	ldr	r3, [pc, #112]	; (24dc <poll+0x2a8>)
    246a:	4798      	blx	r3
				array[0] = '0';
    246c:	2330      	movs	r3, #48	; 0x30
    246e:	7023      	strb	r3, [r4, #0]
				array[1] = '0';
    2470:	7063      	strb	r3, [r4, #1]
				array[2] = '0';
    2472:	70a3      	strb	r3, [r4, #2]
				array[3] = '0';
    2474:	70e3      	strb	r3, [r4, #3]
				i = 0;
    2476:	2200      	movs	r2, #0
    2478:	4b14      	ldr	r3, [pc, #80]	; (24cc <poll+0x298>)
    247a:	601a      	str	r2, [r3, #0]
    247c:	e7da      	b.n	2434 <poll+0x200>
			CNT++;
    247e:	4b10      	ldr	r3, [pc, #64]	; (24c0 <poll+0x28c>)
    2480:	681a      	ldr	r2, [r3, #0]
    2482:	3201      	adds	r2, #1
    2484:	601a      	str	r2, [r3, #0]
			if(CNT>N){	//released long enough then reset
    2486:	681a      	ldr	r2, [r3, #0]
    2488:	4b0f      	ldr	r3, [pc, #60]	; (24c8 <poll+0x294>)
    248a:	681b      	ldr	r3, [r3, #0]
    248c:	429a      	cmp	r2, r3
    248e:	ddd7      	ble.n	2440 <poll+0x20c>
				CNT=0;
    2490:	2300      	movs	r3, #0
    2492:	4a0b      	ldr	r2, [pc, #44]	; (24c0 <poll+0x28c>)
    2494:	6013      	str	r3, [r2, #0]
				x=0;
    2496:	4a09      	ldr	r2, [pc, #36]	; (24bc <poll+0x288>)
    2498:	6013      	str	r3, [r2, #0]
    249a:	e7d1      	b.n	2440 <poll+0x20c>
		x=0;
    249c:	2200      	movs	r2, #0
    249e:	4b07      	ldr	r3, [pc, #28]	; (24bc <poll+0x288>)
    24a0:	601a      	str	r2, [r3, #0]
}
    24a2:	e7cd      	b.n	2440 <poll+0x20c>
    24a4:	20000030 	.word	0x20000030
    24a8:	20003c8c 	.word	0x20003c8c
    24ac:	2000003c 	.word	0x2000003c
    24b0:	41004400 	.word	0x41004400
    24b4:	20000038 	.word	0x20000038
    24b8:	000021c1 	.word	0x000021c1
    24bc:	20003c90 	.word	0x20003c90
    24c0:	20003c54 	.word	0x20003c54
    24c4:	20003c58 	.word	0x20003c58
    24c8:	20000028 	.word	0x20000028
    24cc:	20003c7c 	.word	0x20003c7c
    24d0:	20000034 	.word	0x20000034
    24d4:	41004480 	.word	0x41004480
    24d8:	20000040 	.word	0x20000040
    24dc:	000021e5 	.word	0x000021e5

000024e0 <EICsetup>:

void EICsetup(void){
	EIC->CTRL.bit.SWRST = 1;	//reset the EIC and disables the EIC
    24e0:	4a0c      	ldr	r2, [pc, #48]	; (2514 <EICsetup+0x34>)
    24e2:	7813      	ldrb	r3, [r2, #0]
    24e4:	2101      	movs	r1, #1
    24e6:	430b      	orrs	r3, r1
    24e8:	7013      	strb	r3, [r2, #0]
	while(EIC->STATUS.bit.SYNCBUSY){}	//wait for synchronization
    24ea:	7853      	ldrb	r3, [r2, #1]
    24ec:	09db      	lsrs	r3, r3, #7
    24ee:	d1fc      	bne.n	24ea <EICsetup+0xa>
	EIC->INTENSET.reg = 1<<8;	//enables PA28 for external interrupt EXTINT[8]
    24f0:	4b08      	ldr	r3, [pc, #32]	; (2514 <EICsetup+0x34>)
    24f2:	2280      	movs	r2, #128	; 0x80
    24f4:	0052      	lsls	r2, r2, #1
    24f6:	60da      	str	r2, [r3, #12]
	EIC->CONFIG[1].bit.SENSE0 = 2;	//select falling edge as triggering ...config[n]..(n*8+x)=y...EXT[y]....SENSEx...n=0|1
    24f8:	69da      	ldr	r2, [r3, #28]
    24fa:	2107      	movs	r1, #7
    24fc:	438a      	bics	r2, r1
    24fe:	3905      	subs	r1, #5
    2500:	430a      	orrs	r2, r1
    2502:	61da      	str	r2, [r3, #28]
	EIC->CTRL.reg |= 1<<1;	//enable the EIC at the end
    2504:	781a      	ldrb	r2, [r3, #0]
    2506:	430a      	orrs	r2, r1
    2508:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = 1<<4;	//enable the NVIC handler
    250a:	2210      	movs	r2, #16
    250c:	4b02      	ldr	r3, [pc, #8]	; (2518 <EICsetup+0x38>)
    250e:	601a      	str	r2, [r3, #0]
}
    2510:	4770      	bx	lr
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	40001800 	.word	0x40001800
    2518:	e000e100 	.word	0xe000e100

0000251c <Timer4Setup>:

void Timer4Setup(void){	//for wavegen only should be in timer int 2
	Tc *tcc = TC4;
	TcCount8 *tc4 = &tcc->COUNT8;
	tc4->CTRLA.reg = 0;	//disable the TC4
    251c:	2200      	movs	r2, #0
    251e:	4b23      	ldr	r3, [pc, #140]	; (25ac <Timer4Setup+0x90>)
    2520:	801a      	strh	r2, [r3, #0]
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync of disable
    2522:	001a      	movs	r2, r3
    2524:	7bd3      	ldrb	r3, [r2, #15]
    2526:	09db      	lsrs	r3, r3, #7
    2528:	d1fc      	bne.n	2524 <Timer4Setup+0x8>
	tc4->CTRLA.bit.PRESCALER = 6;	//divide by 1;
    252a:	4b20      	ldr	r3, [pc, #128]	; (25ac <Timer4Setup+0x90>)
    252c:	881a      	ldrh	r2, [r3, #0]
    252e:	4920      	ldr	r1, [pc, #128]	; (25b0 <Timer4Setup+0x94>)
    2530:	4011      	ands	r1, r2
    2532:	22c0      	movs	r2, #192	; 0xc0
    2534:	00d2      	lsls	r2, r2, #3
    2536:	430a      	orrs	r2, r1
    2538:	801a      	strh	r2, [r3, #0]
	tc4->CTRLA.bit.WAVEGEN = 2;	//normal PWM frequency per=period, CC1/CC0=compare value
    253a:	881a      	ldrh	r2, [r3, #0]
    253c:	2160      	movs	r1, #96	; 0x60
    253e:	438a      	bics	r2, r1
    2540:	2140      	movs	r1, #64	; 0x40
    2542:	430a      	orrs	r2, r1
    2544:	801a      	strh	r2, [r3, #0]
	tc4->CTRLA.bit.MODE = 1;	//8 bit mode
    2546:	881a      	ldrh	r2, [r3, #0]
    2548:	210c      	movs	r1, #12
    254a:	438a      	bics	r2, r1
    254c:	2104      	movs	r1, #4
    254e:	430a      	orrs	r2, r1
    2550:	801a      	strh	r2, [r3, #0]
	tc4->PER.reg = 0xff;
    2552:	22ff      	movs	r2, #255	; 0xff
    2554:	751a      	strb	r2, [r3, #20]
	tc4->CTRLBSET.bit.ONESHOT = 0;	//turn off one shot mode
    2556:	795a      	ldrb	r2, [r3, #5]
    2558:	2104      	movs	r1, #4
    255a:	438a      	bics	r2, r1
    255c:	715a      	strb	r2, [r3, #5]
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync to complete
    255e:	001a      	movs	r2, r3
    2560:	7bd3      	ldrb	r3, [r2, #15]
    2562:	09db      	lsrs	r3, r3, #7
    2564:	d1fc      	bne.n	2560 <Timer4Setup+0x44>
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync to complete
    2566:	4a11      	ldr	r2, [pc, #68]	; (25ac <Timer4Setup+0x90>)
    2568:	7bd3      	ldrb	r3, [r2, #15]
    256a:	09db      	lsrs	r3, r3, #7
    256c:	d1fc      	bne.n	2568 <Timer4Setup+0x4c>
	tc4->CTRLA.reg |= 1<<1;	//enable the TC4
    256e:	4a0f      	ldr	r2, [pc, #60]	; (25ac <Timer4Setup+0x90>)
    2570:	8813      	ldrh	r3, [r2, #0]
    2572:	2102      	movs	r1, #2
    2574:	430b      	orrs	r3, r1
    2576:	8013      	strh	r3, [r2, #0]
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync of enable
    2578:	7bd3      	ldrb	r3, [r2, #15]
    257a:	09db      	lsrs	r3, r3, #7
    257c:	d1fc      	bne.n	2578 <Timer4Setup+0x5c>
	tc4->CC[0].reg = 0;
    257e:	2200      	movs	r2, #0
    2580:	4b0a      	ldr	r3, [pc, #40]	; (25ac <Timer4Setup+0x90>)
    2582:	761a      	strb	r2, [r3, #24]
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync of disable
    2584:	001a      	movs	r2, r3
    2586:	7bd3      	ldrb	r3, [r2, #15]
    2588:	09db      	lsrs	r3, r3, #7
    258a:	d1fc      	bne.n	2586 <Timer4Setup+0x6a>
	tc4->CC[1].reg = 0;
    258c:	2200      	movs	r2, #0
    258e:	4b07      	ldr	r3, [pc, #28]	; (25ac <Timer4Setup+0x90>)
    2590:	765a      	strb	r2, [r3, #25]
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync of disable
    2592:	001a      	movs	r2, r3
    2594:	7bd3      	ldrb	r3, [r2, #15]
    2596:	09db      	lsrs	r3, r3, #7
    2598:	d1fc      	bne.n	2594 <Timer4Setup+0x78>
	tc4->CTRLC.bit.INVEN1 = 0;
    259a:	4a04      	ldr	r2, [pc, #16]	; (25ac <Timer4Setup+0x90>)
    259c:	7993      	ldrb	r3, [r2, #6]
    259e:	2102      	movs	r1, #2
    25a0:	438b      	bics	r3, r1
    25a2:	7193      	strb	r3, [r2, #6]
	while(tc4->STATUS.bit.SYNCBUSY){}	//wait for sync
    25a4:	7bd3      	ldrb	r3, [r2, #15]
    25a6:	09db      	lsrs	r3, r3, #7
    25a8:	d1fc      	bne.n	25a4 <Timer4Setup+0x88>
}
    25aa:	4770      	bx	lr
    25ac:	42003000 	.word	0x42003000
    25b0:	fffff8ff 	.word	0xfffff8ff

000025b4 <main>:
int main (void){
    25b4:	b570      	push	{r4, r5, r6, lr}
    25b6:	b084      	sub	sp, #16
	system_init();
    25b8:	4b1b      	ldr	r3, [pc, #108]	; (2628 <main+0x74>)
    25ba:	4798      	blx	r3
	clockSetup();
    25bc:	4b1b      	ldr	r3, [pc, #108]	; (262c <main+0x78>)
    25be:	4798      	blx	r3
	portSetup();
    25c0:	4b1b      	ldr	r3, [pc, #108]	; (2630 <main+0x7c>)
    25c2:	4798      	blx	r3
	Timer4Setup();
    25c4:	4b1b      	ldr	r3, [pc, #108]	; (2634 <main+0x80>)
    25c6:	4798      	blx	r3
	EICsetup();
    25c8:	4b1b      	ldr	r3, [pc, #108]	; (2638 <main+0x84>)
    25ca:	4798      	blx	r3
	ConArrayPtr = ConArray;
    25cc:	4a1b      	ldr	r2, [pc, #108]	; (263c <main+0x88>)
    25ce:	4b1c      	ldr	r3, [pc, #112]	; (2640 <main+0x8c>)
    25d0:	601a      	str	r2, [r3, #0]
	keyptr2 = array2;
    25d2:	4a1c      	ldr	r2, [pc, #112]	; (2644 <main+0x90>)
    25d4:	4b1c      	ldr	r3, [pc, #112]	; (2648 <main+0x94>)
    25d6:	601a      	str	r2, [r3, #0]
	NVIC->IP[1] = 0x0;	//EIC highest priority
    25d8:	2100      	movs	r1, #0
    25da:	23c1      	movs	r3, #193	; 0xc1
    25dc:	009b      	lsls	r3, r3, #2
    25de:	4a1b      	ldr	r2, [pc, #108]	; (264c <main+0x98>)
    25e0:	50d1      	str	r1, [r2, r3]
	xMutex = xSemaphoreCreateMutex();
    25e2:	2001      	movs	r0, #1
    25e4:	4b1a      	ldr	r3, [pc, #104]	; (2650 <main+0x9c>)
    25e6:	4798      	blx	r3
    25e8:	4b1a      	ldr	r3, [pc, #104]	; (2654 <main+0xa0>)
    25ea:	6018      	str	r0, [r3, #0]
 	if(xMutex !=NULL)
    25ec:	2800      	cmp	r0, #0
    25ee:	d019      	beq.n	2624 <main+0x70>
	xTaskCreate(vPID_Control_Task, "PID Control Task", 500, NULL, 2, NULL);
    25f0:	26fa      	movs	r6, #250	; 0xfa
    25f2:	0076      	lsls	r6, r6, #1
    25f4:	2400      	movs	r4, #0
    25f6:	9403      	str	r4, [sp, #12]
    25f8:	9402      	str	r4, [sp, #8]
    25fa:	9401      	str	r4, [sp, #4]
    25fc:	2302      	movs	r3, #2
    25fe:	9300      	str	r3, [sp, #0]
    2600:	2300      	movs	r3, #0
    2602:	0032      	movs	r2, r6
    2604:	4914      	ldr	r1, [pc, #80]	; (2658 <main+0xa4>)
    2606:	4815      	ldr	r0, [pc, #84]	; (265c <main+0xa8>)
    2608:	4d15      	ldr	r5, [pc, #84]	; (2660 <main+0xac>)
    260a:	47a8      	blx	r5
	xTaskCreate(vKeypad_Display_Task, "Keypad & Display Task", 500, NULL, 1, NULL);
    260c:	9403      	str	r4, [sp, #12]
    260e:	9402      	str	r4, [sp, #8]
    2610:	9401      	str	r4, [sp, #4]
    2612:	2301      	movs	r3, #1
    2614:	9300      	str	r3, [sp, #0]
    2616:	2300      	movs	r3, #0
    2618:	0032      	movs	r2, r6
    261a:	4912      	ldr	r1, [pc, #72]	; (2664 <main+0xb0>)
    261c:	4812      	ldr	r0, [pc, #72]	; (2668 <main+0xb4>)
    261e:	47a8      	blx	r5
	vTaskStartScheduler();
    2620:	4b12      	ldr	r3, [pc, #72]	; (266c <main+0xb8>)
    2622:	4798      	blx	r3
    2624:	e7fe      	b.n	2624 <main+0x70>
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	00001b15 	.word	0x00001b15
    262c:	00002019 	.word	0x00002019
    2630:	00002139 	.word	0x00002139
    2634:	0000251d 	.word	0x0000251d
    2638:	000024e1 	.word	0x000024e1
    263c:	20003cac 	.word	0x20003cac
    2640:	20003ca8 	.word	0x20003ca8
    2644:	20000034 	.word	0x20000034
    2648:	20003cb0 	.word	0x20003cb0
    264c:	e000e100 	.word	0xe000e100
    2650:	00000789 	.word	0x00000789
    2654:	20003c94 	.word	0x20003c94
    2658:	00004760 	.word	0x00004760
    265c:	00001c29 	.word	0x00001c29
    2660:	00000b01 	.word	0x00000b01
    2664:	00004774 	.word	0x00004774
    2668:	00002845 	.word	0x00002845
    266c:	00000ced 	.word	0x00000ced

00002670 <EIC_Handler>:
	Port *por = PORT;
	PortGroup *porB = &(por->Group[1]);
	 	// 	porB->DIRSET.reg = PORT_PB16;
	 	// 	porB->OUTTGL.reg = PORT_PB16;		//test frequency
	
	 			if(porB->IN.reg & PORT_PB14){	//CCW
    2670:	4b0a      	ldr	r3, [pc, #40]	; (269c <EIC_Handler+0x2c>)
    2672:	6a1b      	ldr	r3, [r3, #32]
    2674:	045b      	lsls	r3, r3, #17
    2676:	d408      	bmi.n	268a <EIC_Handler+0x1a>
	 				//temp2 = 1;
	 				countEICs++;
	 			}
	 			else if(!(porB->IN.reg & PORT_PB14)){	//CW
    2678:	4b08      	ldr	r3, [pc, #32]	; (269c <EIC_Handler+0x2c>)
    267a:	6a1b      	ldr	r3, [r3, #32]
    267c:	045b      	lsls	r3, r3, #17
    267e:	d408      	bmi.n	2692 <EIC_Handler+0x22>
	 				//temp2 = 0;
	 				countEICs--;
    2680:	4a07      	ldr	r2, [pc, #28]	; (26a0 <EIC_Handler+0x30>)
    2682:	6813      	ldr	r3, [r2, #0]
    2684:	3b01      	subs	r3, #1
    2686:	6013      	str	r3, [r2, #0]
    2688:	e003      	b.n	2692 <EIC_Handler+0x22>
	 				countEICs++;
    268a:	4a05      	ldr	r2, [pc, #20]	; (26a0 <EIC_Handler+0x30>)
    268c:	6813      	ldr	r3, [r2, #0]
    268e:	3301      	adds	r3, #1
    2690:	6013      	str	r3, [r2, #0]
	 			}
	EIC->INTFLAG.reg = 1<<8;	//clear the int flag
    2692:	2280      	movs	r2, #128	; 0x80
    2694:	0052      	lsls	r2, r2, #1
    2696:	4b03      	ldr	r3, [pc, #12]	; (26a4 <EIC_Handler+0x34>)
    2698:	611a      	str	r2, [r3, #16]
	}
    269a:	4770      	bx	lr
    269c:	41004480 	.word	0x41004480
    26a0:	20003c5c 	.word	0x20003c5c
    26a4:	40001800 	.word	0x40001800

000026a8 <convert>:
// 	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
// 	
// 	EIC->INTFLAG.reg = 1<<8;	//clear the int flag


void convert(int t){
    26a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26aa:	46ce      	mov	lr, r9
    26ac:	4647      	mov	r7, r8
    26ae:	b580      	push	{r7, lr}
    26b0:	b083      	sub	sp, #12
	volatile int a = t;
    26b2:	9001      	str	r0, [sp, #4]
	//int a = 4312;   // our value
	//volatile char arrADC[4];
	//volatile char *arrPtr;
	//arrPtr = arrADC;
	int m = 1;  //counter
	int n = 1000;    //increment to divisor
    26b4:	23fa      	movs	r3, #250	; 0xfa
    26b6:	009b      	lsls	r3, r3, #2
    26b8:	4699      	mov	r9, r3
	int m = 1;  //counter
    26ba:	2401      	movs	r4, #1
	int j = 0;  //array counter
    26bc:	2600      	movs	r6, #0
	int i = 1000;   //divisor
    26be:	001d      	movs	r5, r3

	while(j <= 3){
		int b = a % i;
    26c0:	4f34      	ldr	r7, [pc, #208]	; (2794 <convert+0xec>)
    26c2:	e058      	b.n	2776 <convert+0xce>
				i = 100;
				n = 100;
			}
			if(j == 2){
				i = 10;
				n = 10;
    26c4:	230a      	movs	r3, #10
    26c6:	4699      	mov	r9, r3
			m = 1;
    26c8:	2401      	movs	r4, #1
				i = 10;
    26ca:	250a      	movs	r5, #10
    26cc:	e053      	b.n	2776 <convert+0xce>
			int p = (m-1);
    26ce:	3c01      	subs	r4, #1
			switch(p) {
    26d0:	2c09      	cmp	r4, #9
    26d2:	d845      	bhi.n	2760 <convert+0xb8>
    26d4:	00a3      	lsls	r3, r4, #2
    26d6:	4a30      	ldr	r2, [pc, #192]	; (2798 <convert+0xf0>)
    26d8:	58d3      	ldr	r3, [r2, r3]
    26da:	469f      	mov	pc, r3
				ConArray[j++] = '0';
    26dc:	2230      	movs	r2, #48	; 0x30
    26de:	4b2f      	ldr	r3, [pc, #188]	; (279c <convert+0xf4>)
    26e0:	559a      	strb	r2, [r3, r6]
    26e2:	3601      	adds	r6, #1
			a = a - (n*(m-1));
    26e4:	9b01      	ldr	r3, [sp, #4]
    26e6:	464a      	mov	r2, r9
    26e8:	4354      	muls	r4, r2
    26ea:	1b1c      	subs	r4, r3, r4
    26ec:	9401      	str	r4, [sp, #4]
			if(j == 1){
    26ee:	2e01      	cmp	r6, #1
    26f0:	d03b      	beq.n	276a <convert+0xc2>
			if(j == 2){
    26f2:	2e02      	cmp	r6, #2
    26f4:	d0e6      	beq.n	26c4 <convert+0x1c>
			m = 1;
    26f6:	2401      	movs	r4, #1
			}
			if(j == 3){
    26f8:	2e03      	cmp	r6, #3
    26fa:	d13a      	bne.n	2772 <convert+0xca>
				i = 1;
				n = 1;
    26fc:	2301      	movs	r3, #1
    26fe:	4699      	mov	r9, r3
			m = 1;
    2700:	2401      	movs	r4, #1
				i = 1;
    2702:	2501      	movs	r5, #1
    2704:	e037      	b.n	2776 <convert+0xce>
				ConArray[j++] = '1';
    2706:	2231      	movs	r2, #49	; 0x31
    2708:	4b24      	ldr	r3, [pc, #144]	; (279c <convert+0xf4>)
    270a:	559a      	strb	r2, [r3, r6]
    270c:	3601      	adds	r6, #1
				break;
    270e:	e7e9      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '2';
    2710:	2232      	movs	r2, #50	; 0x32
    2712:	4b22      	ldr	r3, [pc, #136]	; (279c <convert+0xf4>)
    2714:	559a      	strb	r2, [r3, r6]
    2716:	3601      	adds	r6, #1
				break;
    2718:	e7e4      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '3';
    271a:	2233      	movs	r2, #51	; 0x33
    271c:	4b1f      	ldr	r3, [pc, #124]	; (279c <convert+0xf4>)
    271e:	559a      	strb	r2, [r3, r6]
    2720:	3601      	adds	r6, #1
				break;
    2722:	e7df      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '4';
    2724:	2234      	movs	r2, #52	; 0x34
    2726:	4b1d      	ldr	r3, [pc, #116]	; (279c <convert+0xf4>)
    2728:	559a      	strb	r2, [r3, r6]
    272a:	3601      	adds	r6, #1
				break;
    272c:	e7da      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '5';
    272e:	2335      	movs	r3, #53	; 0x35
    2730:	4a1a      	ldr	r2, [pc, #104]	; (279c <convert+0xf4>)
    2732:	5593      	strb	r3, [r2, r6]
    2734:	3601      	adds	r6, #1
				break;
    2736:	e7d5      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '6';
    2738:	2336      	movs	r3, #54	; 0x36
    273a:	4a18      	ldr	r2, [pc, #96]	; (279c <convert+0xf4>)
    273c:	5593      	strb	r3, [r2, r6]
    273e:	3601      	adds	r6, #1
				break;
    2740:	e7d0      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '7';
    2742:	2337      	movs	r3, #55	; 0x37
    2744:	4a15      	ldr	r2, [pc, #84]	; (279c <convert+0xf4>)
    2746:	5593      	strb	r3, [r2, r6]
    2748:	3601      	adds	r6, #1
				break;
    274a:	e7cb      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '8';
    274c:	2338      	movs	r3, #56	; 0x38
    274e:	4a13      	ldr	r2, [pc, #76]	; (279c <convert+0xf4>)
    2750:	5593      	strb	r3, [r2, r6]
    2752:	3601      	adds	r6, #1
				break;
    2754:	e7c6      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = '9';
    2756:	2339      	movs	r3, #57	; 0x39
    2758:	4a10      	ldr	r2, [pc, #64]	; (279c <convert+0xf4>)
    275a:	5593      	strb	r3, [r2, r6]
    275c:	3601      	adds	r6, #1
				break;
    275e:	e7c1      	b.n	26e4 <convert+0x3c>
				ConArray[j++] = 'A';
    2760:	2341      	movs	r3, #65	; 0x41
    2762:	4a0e      	ldr	r2, [pc, #56]	; (279c <convert+0xf4>)
    2764:	5593      	strb	r3, [r2, r6]
    2766:	3601      	adds	r6, #1
				break;
    2768:	e7bc      	b.n	26e4 <convert+0x3c>
			m = 1;
    276a:	0034      	movs	r4, r6
				n = 100;
    276c:	2364      	movs	r3, #100	; 0x64
    276e:	4699      	mov	r9, r3
				i = 100;
    2770:	2564      	movs	r5, #100	; 0x64
	while(j <= 3){
    2772:	2e03      	cmp	r6, #3
    2774:	dc09      	bgt.n	278a <convert+0xe2>
		int b = a % i;
    2776:	9801      	ldr	r0, [sp, #4]
		if(b == a) {
    2778:	9b01      	ldr	r3, [sp, #4]
    277a:	4698      	mov	r8, r3
		int b = a % i;
    277c:	0029      	movs	r1, r5
    277e:	47b8      	blx	r7
		if(b == a) {
    2780:	4541      	cmp	r1, r8
    2782:	d0a4      	beq.n	26ce <convert+0x26>
			}
		}
		else{
			m++;
    2784:	3401      	adds	r4, #1
			i = i + n;
    2786:	444d      	add	r5, r9
    2788:	e7f3      	b.n	2772 <convert+0xca>
		}
	}
}
    278a:	b003      	add	sp, #12
    278c:	bc0c      	pop	{r2, r3}
    278e:	4690      	mov	r8, r2
    2790:	4699      	mov	r9, r3
    2792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2794:	00002b69 	.word	0x00002b69
    2798:	00004710 	.word	0x00004710
    279c:	20003cac 	.word	0x20003cac

000027a0 <display>:
	int i = 0;
	Port *ports = PORT_INSTS;
	PortGroup *porA = &(ports->Group[0]);
	PortGroup *porB = &(ports->Group[1]);
	
	switch(*a){
    27a0:	7803      	ldrb	r3, [r0, #0]
    27a2:	3b30      	subs	r3, #48	; 0x30
    27a4:	b2da      	uxtb	r2, r3
    27a6:	2a09      	cmp	r2, #9
    27a8:	d840      	bhi.n	282c <display+0x8c>
    27aa:	0093      	lsls	r3, r2, #2
    27ac:	4a22      	ldr	r2, [pc, #136]	; (2838 <display+0x98>)
    27ae:	58d3      	ldr	r3, [r2, r3]
    27b0:	469f      	mov	pc, r3
		
		case '0':
		porB -> OUTSET.reg = PORT_PB07 | PORT_PB06;//display "0"
    27b2:	4b22      	ldr	r3, [pc, #136]	; (283c <display+0x9c>)
    27b4:	22c0      	movs	r2, #192	; 0xc0
    27b6:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05;//display "0"
    27b8:	3a81      	subs	r2, #129	; 0x81
    27ba:	615a      	str	r2, [r3, #20]
		default:
		porB -> OUTSET.reg = PORT_PB03 | PORT_PB07;//display "A"
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB04 | PORT_PB05 | PORT_PB06;//display "A"
		break;
	}
    27bc:	4770      	bx	lr
		porB -> OUTSET.reg = PORT_PB00 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06 | PORT_PB07;//display "1"
    27be:	4b1f      	ldr	r3, [pc, #124]	; (283c <display+0x9c>)
    27c0:	22f9      	movs	r2, #249	; 0xf9
    27c2:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB01 | PORT_PB02;//display "1"
    27c4:	3af3      	subs	r2, #243	; 0xf3
    27c6:	615a      	str	r2, [r3, #20]
		break;
    27c8:	e7f8      	b.n	27bc <display+0x1c>
		porB -> OUTSET.reg =  PORT_PB02 | PORT_PB05 | PORT_PB07;//display "2"
    27ca:	4b1c      	ldr	r3, [pc, #112]	; (283c <display+0x9c>)
    27cc:	22a4      	movs	r2, #164	; 0xa4
    27ce:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB03 | PORT_PB04 | PORT_PB06;//display "2"
    27d0:	3a49      	subs	r2, #73	; 0x49
    27d2:	615a      	str	r2, [r3, #20]
		break;
    27d4:	e7f2      	b.n	27bc <display+0x1c>
		porB -> OUTSET.reg = PORT_PB04 | PORT_PB05 | PORT_PB07;//display "3"
    27d6:	4b19      	ldr	r3, [pc, #100]	; (283c <display+0x9c>)
    27d8:	22b0      	movs	r2, #176	; 0xb0
    27da:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB06;//display "3"
    27dc:	3a61      	subs	r2, #97	; 0x61
    27de:	615a      	str	r2, [r3, #20]
		break;
    27e0:	e7ec      	b.n	27bc <display+0x1c>
		porB -> OUTSET.reg = PORT_PB00 | PORT_PB03 | PORT_PB04 | PORT_PB07;//display "4"
    27e2:	4b16      	ldr	r3, [pc, #88]	; (283c <display+0x9c>)
    27e4:	2299      	movs	r2, #153	; 0x99
    27e6:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB01 | PORT_PB02 | PORT_PB05 | PORT_PB06;//display "4"
    27e8:	3a33      	subs	r2, #51	; 0x33
    27ea:	615a      	str	r2, [r3, #20]
		break;
    27ec:	e7e6      	b.n	27bc <display+0x1c>
		porB -> OUTSET.reg = PORT_PB01 | PORT_PB04 | PORT_PB07;//display "5"
    27ee:	4b13      	ldr	r3, [pc, #76]	; (283c <display+0x9c>)
    27f0:	2292      	movs	r2, #146	; 0x92
    27f2:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB03 | PORT_PB05 | PORT_PB06;//display "5"
    27f4:	3a25      	subs	r2, #37	; 0x25
    27f6:	615a      	str	r2, [r3, #20]
		break;
    27f8:	e7e0      	b.n	27bc <display+0x1c>
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB03 | PORT_PB04 | PORT_PB05 | PORT_PB06;//display "6"
    27fa:	4b10      	ldr	r3, [pc, #64]	; (283c <display+0x9c>)
    27fc:	227d      	movs	r2, #125	; 0x7d
    27fe:	615a      	str	r2, [r3, #20]
		porB -> OUTSET.reg = PORT_PB01 | PORT_PB07;//display "6"
    2800:	3205      	adds	r2, #5
    2802:	619a      	str	r2, [r3, #24]
		break;
    2804:	e7da      	b.n	27bc <display+0x1c>
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02;//display "7"
    2806:	4b0d      	ldr	r3, [pc, #52]	; (283c <display+0x9c>)
    2808:	2207      	movs	r2, #7
    280a:	615a      	str	r2, [r3, #20]
		porB -> OUTSET.reg = PORT_PB03 | PORT_PB04| PORT_PB05 | PORT_PB06 | PORT_PB07;//display "7"
    280c:	32f1      	adds	r2, #241	; 0xf1
    280e:	619a      	str	r2, [r3, #24]
		break;
    2810:	e7d4      	b.n	27bc <display+0x1c>
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB03 | PORT_PB04| PORT_PB05 | PORT_PB06;//display "8"
    2812:	2280      	movs	r2, #128	; 0x80
    2814:	4b0a      	ldr	r3, [pc, #40]	; (2840 <display+0xa0>)
    2816:	18d3      	adds	r3, r2, r3
    2818:	217f      	movs	r1, #127	; 0x7f
    281a:	6159      	str	r1, [r3, #20]
		porB -> OUTSET.reg = PORT_PB07;//display "8"
    281c:	619a      	str	r2, [r3, #24]
		break;
    281e:	e7cd      	b.n	27bc <display+0x1c>
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB05 | PORT_PB06;//display "9"
    2820:	4b06      	ldr	r3, [pc, #24]	; (283c <display+0x9c>)
    2822:	2267      	movs	r2, #103	; 0x67
    2824:	615a      	str	r2, [r3, #20]
		porB -> OUTSET.reg = PORT_PB03 | PORT_PB04 | PORT_PB07;//display "9"
    2826:	3231      	adds	r2, #49	; 0x31
    2828:	619a      	str	r2, [r3, #24]
		break;
    282a:	e7c7      	b.n	27bc <display+0x1c>
		porB -> OUTSET.reg = PORT_PB03 | PORT_PB07;//display "A"
    282c:	4b03      	ldr	r3, [pc, #12]	; (283c <display+0x9c>)
    282e:	2288      	movs	r2, #136	; 0x88
    2830:	619a      	str	r2, [r3, #24]
		porB -> OUTCLR.reg = PORT_PB00 | PORT_PB01 | PORT_PB02 | PORT_PB04 | PORT_PB05 | PORT_PB06;//display "A"
    2832:	3a11      	subs	r2, #17
    2834:	615a      	str	r2, [r3, #20]
    2836:	e7c1      	b.n	27bc <display+0x1c>
    2838:	00004738 	.word	0x00004738
    283c:	41004480 	.word	0x41004480
    2840:	41004400 	.word	0x41004400

00002844 <vKeypad_Display_Task>:
void vKeypad_Display_Task(void){	
    2844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2846:	46de      	mov	lr, fp
    2848:	4657      	mov	r7, sl
    284a:	464e      	mov	r6, r9
    284c:	4645      	mov	r5, r8
    284e:	b5e0      	push	{r5, r6, r7, lr}
		vTaskDelay(pdMS_TO_TICKS(1000/60));		//Block to run Task at 60Hz
    2850:	4f43      	ldr	r7, [pc, #268]	; (2960 <vKeypad_Display_Task+0x11c>)
		xSemaphoreTake(xMutex, 0);     //Take semaphore, do not block/wait.
    2852:	4e44      	ldr	r6, [pc, #272]	; (2964 <vKeypad_Display_Task+0x120>)
    2854:	e033      	b.n	28be <vKeypad_Display_Task+0x7a>
			porA->OUTCLR.reg = 	PORT_PA07;
    2856:	4c44      	ldr	r4, [pc, #272]	; (2968 <vKeypad_Display_Task+0x124>)
    2858:	3380      	adds	r3, #128	; 0x80
    285a:	469b      	mov	fp, r3
    285c:	6163      	str	r3, [r4, #20]
			display(keyptr2);
    285e:	4d43      	ldr	r5, [pc, #268]	; (296c <vKeypad_Display_Task+0x128>)
    2860:	6828      	ldr	r0, [r5, #0]
    2862:	4b43      	ldr	r3, [pc, #268]	; (2970 <vKeypad_Display_Task+0x12c>)
    2864:	4699      	mov	r9, r3
    2866:	4798      	blx	r3
			wait(1);
    2868:	2001      	movs	r0, #1
    286a:	4b42      	ldr	r3, [pc, #264]	; (2974 <vKeypad_Display_Task+0x130>)
    286c:	4698      	mov	r8, r3
    286e:	4798      	blx	r3
			porA->OUTSET.reg = 	PORT_PA07;
    2870:	465b      	mov	r3, fp
    2872:	61a3      	str	r3, [r4, #24]
			porA->OUTCLR.reg = 	PORT_PA06;
    2874:	3b40      	subs	r3, #64	; 0x40
    2876:	469b      	mov	fp, r3
    2878:	6163      	str	r3, [r4, #20]
			display(keyptr2 + 1);
    287a:	682b      	ldr	r3, [r5, #0]
    287c:	1c58      	adds	r0, r3, #1
    287e:	47c8      	blx	r9
			wait(1);
    2880:	2001      	movs	r0, #1
    2882:	47c0      	blx	r8
			porA->OUTSET.reg = 	PORT_PA06;
    2884:	465b      	mov	r3, fp
    2886:	61a3      	str	r3, [r4, #24]
			porA->OUTCLR.reg = 	PORT_PA05;
    2888:	3b20      	subs	r3, #32
    288a:	469b      	mov	fp, r3
    288c:	6163      	str	r3, [r4, #20]
			display(keyptr2 + 2);
    288e:	682b      	ldr	r3, [r5, #0]
    2890:	1c98      	adds	r0, r3, #2
    2892:	47c8      	blx	r9
			wait(1);
    2894:	2001      	movs	r0, #1
    2896:	47c0      	blx	r8
			porA->OUTSET.reg = 	PORT_PA05;
    2898:	465b      	mov	r3, fp
    289a:	61a3      	str	r3, [r4, #24]
			porA->OUTCLR.reg = 	PORT_PA04;
    289c:	3b10      	subs	r3, #16
    289e:	469b      	mov	fp, r3
    28a0:	6163      	str	r3, [r4, #20]
			display(keyptr2 + 3);
    28a2:	6828      	ldr	r0, [r5, #0]
    28a4:	3003      	adds	r0, #3
    28a6:	47c8      	blx	r9
			wait(1);
    28a8:	2001      	movs	r0, #1
    28aa:	47c0      	blx	r8
			porA->OUTSET.reg = 	PORT_PA04;
    28ac:	465b      	mov	r3, fp
    28ae:	61a3      	str	r3, [r4, #24]
	xSemaphoreGive(xMutex);			//Give back semaphore after complete 
    28b0:	4b2c      	ldr	r3, [pc, #176]	; (2964 <vKeypad_Display_Task+0x120>)
    28b2:	6818      	ldr	r0, [r3, #0]
    28b4:	2300      	movs	r3, #0
    28b6:	2200      	movs	r2, #0
    28b8:	2100      	movs	r1, #0
    28ba:	4c2f      	ldr	r4, [pc, #188]	; (2978 <vKeypad_Display_Task+0x134>)
    28bc:	47a0      	blx	r4
		vTaskDelay(pdMS_TO_TICKS(1000/60));		//Block to run Task at 60Hz
    28be:	20a0      	movs	r0, #160	; 0xa0
    28c0:	47b8      	blx	r7
		xSemaphoreTake(xMutex, 0);     //Take semaphore, do not block/wait.
    28c2:	2300      	movs	r3, #0
    28c4:	2200      	movs	r2, #0
    28c6:	2100      	movs	r1, #0
    28c8:	6830      	ldr	r0, [r6, #0]
    28ca:	4c2c      	ldr	r4, [pc, #176]	; (297c <vKeypad_Display_Task+0x138>)
    28cc:	47a0      	blx	r4
		poll();		//read keypad
    28ce:	4b2c      	ldr	r3, [pc, #176]	; (2980 <vKeypad_Display_Task+0x13c>)
    28d0:	4798      	blx	r3
		if(ent_key==0){
    28d2:	4b2c      	ldr	r3, [pc, #176]	; (2984 <vKeypad_Display_Task+0x140>)
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d0bd      	beq.n	2856 <vKeypad_Display_Task+0x12>
		else if(ent_key==1){
    28da:	4b2a      	ldr	r3, [pc, #168]	; (2984 <vKeypad_Display_Task+0x140>)
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	2b01      	cmp	r3, #1
    28e0:	d1e6      	bne.n	28b0 <vKeypad_Display_Task+0x6c>
			if(mode == 0){
    28e2:	4b29      	ldr	r3, [pc, #164]	; (2988 <vKeypad_Display_Task+0x144>)
    28e4:	681b      	ldr	r3, [r3, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d135      	bne.n	2956 <vKeypad_Display_Task+0x112>
					convert(filterRawSpeed);
    28ea:	4b28      	ldr	r3, [pc, #160]	; (298c <vKeypad_Display_Task+0x148>)
    28ec:	6818      	ldr	r0, [r3, #0]
    28ee:	4b28      	ldr	r3, [pc, #160]	; (2990 <vKeypad_Display_Task+0x14c>)
    28f0:	4798      	blx	r3
			porA->OUTCLR.reg = 	PORT_PA07;
    28f2:	4c1d      	ldr	r4, [pc, #116]	; (2968 <vKeypad_Display_Task+0x124>)
    28f4:	2380      	movs	r3, #128	; 0x80
    28f6:	469b      	mov	fp, r3
    28f8:	6163      	str	r3, [r4, #20]
			display(ConArrayPtr);
    28fa:	4b26      	ldr	r3, [pc, #152]	; (2994 <vKeypad_Display_Task+0x150>)
    28fc:	469a      	mov	sl, r3
    28fe:	6818      	ldr	r0, [r3, #0]
    2900:	4b1b      	ldr	r3, [pc, #108]	; (2970 <vKeypad_Display_Task+0x12c>)
    2902:	4699      	mov	r9, r3
    2904:	4798      	blx	r3
			wait(1);
    2906:	2001      	movs	r0, #1
    2908:	4b1a      	ldr	r3, [pc, #104]	; (2974 <vKeypad_Display_Task+0x130>)
    290a:	4698      	mov	r8, r3
    290c:	4798      	blx	r3
			porA->OUTSET.reg = 	PORT_PA07;
    290e:	465b      	mov	r3, fp
    2910:	61a3      	str	r3, [r4, #24]
			porA->OUTCLR.reg = 	PORT_PA06;
    2912:	3b40      	subs	r3, #64	; 0x40
    2914:	469b      	mov	fp, r3
    2916:	6163      	str	r3, [r4, #20]
			display(ConArrayPtr + 1);
    2918:	4653      	mov	r3, sl
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	1c58      	adds	r0, r3, #1
    291e:	47c8      	blx	r9
			wait(1);
    2920:	2001      	movs	r0, #1
    2922:	47c0      	blx	r8
			porA->OUTSET.reg = 	PORT_PA06;
    2924:	465b      	mov	r3, fp
    2926:	61a3      	str	r3, [r4, #24]
			porA->OUTCLR.reg = 	PORT_PA05;
    2928:	3b20      	subs	r3, #32
    292a:	469b      	mov	fp, r3
    292c:	6163      	str	r3, [r4, #20]
			display(ConArrayPtr + 2);
    292e:	4653      	mov	r3, sl
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	1c98      	adds	r0, r3, #2
    2934:	47c8      	blx	r9
			wait(1);
    2936:	2001      	movs	r0, #1
    2938:	47c0      	blx	r8
			porA->OUTSET.reg = 	PORT_PA05;
    293a:	465b      	mov	r3, fp
    293c:	61a3      	str	r3, [r4, #24]
			porA->OUTCLR.reg = 	PORT_PA04;
    293e:	3b10      	subs	r3, #16
    2940:	469b      	mov	fp, r3
    2942:	6163      	str	r3, [r4, #20]
			display(ConArrayPtr + 3);
    2944:	4653      	mov	r3, sl
    2946:	6818      	ldr	r0, [r3, #0]
    2948:	3003      	adds	r0, #3
    294a:	47c8      	blx	r9
			wait(1);
    294c:	2001      	movs	r0, #1
    294e:	47c0      	blx	r8
			porA->OUTSET.reg = 	PORT_PA04;
    2950:	465b      	mov	r3, fp
    2952:	61a3      	str	r3, [r4, #24]
    2954:	e7ac      	b.n	28b0 <vKeypad_Display_Task+0x6c>
					convert(errorDisplay);
    2956:	4b10      	ldr	r3, [pc, #64]	; (2998 <vKeypad_Display_Task+0x154>)
    2958:	6818      	ldr	r0, [r3, #0]
    295a:	4b0d      	ldr	r3, [pc, #52]	; (2990 <vKeypad_Display_Task+0x14c>)
    295c:	4798      	blx	r3
    295e:	e7c8      	b.n	28f2 <vKeypad_Display_Task+0xae>
    2960:	00000fa1 	.word	0x00000fa1
    2964:	20003c94 	.word	0x20003c94
    2968:	41004400 	.word	0x41004400
    296c:	20003cb0 	.word	0x20003cb0
    2970:	000027a1 	.word	0x000027a1
    2974:	000021c1 	.word	0x000021c1
    2978:	00000615 	.word	0x00000615
    297c:	000008a5 	.word	0x000008a5
    2980:	00002235 	.word	0x00002235
    2984:	20000038 	.word	0x20000038
    2988:	20000040 	.word	0x20000040
    298c:	20003c68 	.word	0x20003c68
    2990:	000026a9 	.word	0x000026a9
    2994:	20003ca8 	.word	0x20003ca8
    2998:	20003c9c 	.word	0x20003c9c

0000299c <__divsi3>:
    299c:	4603      	mov	r3, r0
    299e:	430b      	orrs	r3, r1
    29a0:	d47f      	bmi.n	2aa2 <__divsi3+0x106>
    29a2:	2200      	movs	r2, #0
    29a4:	0843      	lsrs	r3, r0, #1
    29a6:	428b      	cmp	r3, r1
    29a8:	d374      	bcc.n	2a94 <__divsi3+0xf8>
    29aa:	0903      	lsrs	r3, r0, #4
    29ac:	428b      	cmp	r3, r1
    29ae:	d35f      	bcc.n	2a70 <__divsi3+0xd4>
    29b0:	0a03      	lsrs	r3, r0, #8
    29b2:	428b      	cmp	r3, r1
    29b4:	d344      	bcc.n	2a40 <__divsi3+0xa4>
    29b6:	0b03      	lsrs	r3, r0, #12
    29b8:	428b      	cmp	r3, r1
    29ba:	d328      	bcc.n	2a0e <__divsi3+0x72>
    29bc:	0c03      	lsrs	r3, r0, #16
    29be:	428b      	cmp	r3, r1
    29c0:	d30d      	bcc.n	29de <__divsi3+0x42>
    29c2:	22ff      	movs	r2, #255	; 0xff
    29c4:	0209      	lsls	r1, r1, #8
    29c6:	ba12      	rev	r2, r2
    29c8:	0c03      	lsrs	r3, r0, #16
    29ca:	428b      	cmp	r3, r1
    29cc:	d302      	bcc.n	29d4 <__divsi3+0x38>
    29ce:	1212      	asrs	r2, r2, #8
    29d0:	0209      	lsls	r1, r1, #8
    29d2:	d065      	beq.n	2aa0 <__divsi3+0x104>
    29d4:	0b03      	lsrs	r3, r0, #12
    29d6:	428b      	cmp	r3, r1
    29d8:	d319      	bcc.n	2a0e <__divsi3+0x72>
    29da:	e000      	b.n	29de <__divsi3+0x42>
    29dc:	0a09      	lsrs	r1, r1, #8
    29de:	0bc3      	lsrs	r3, r0, #15
    29e0:	428b      	cmp	r3, r1
    29e2:	d301      	bcc.n	29e8 <__divsi3+0x4c>
    29e4:	03cb      	lsls	r3, r1, #15
    29e6:	1ac0      	subs	r0, r0, r3
    29e8:	4152      	adcs	r2, r2
    29ea:	0b83      	lsrs	r3, r0, #14
    29ec:	428b      	cmp	r3, r1
    29ee:	d301      	bcc.n	29f4 <__divsi3+0x58>
    29f0:	038b      	lsls	r3, r1, #14
    29f2:	1ac0      	subs	r0, r0, r3
    29f4:	4152      	adcs	r2, r2
    29f6:	0b43      	lsrs	r3, r0, #13
    29f8:	428b      	cmp	r3, r1
    29fa:	d301      	bcc.n	2a00 <__divsi3+0x64>
    29fc:	034b      	lsls	r3, r1, #13
    29fe:	1ac0      	subs	r0, r0, r3
    2a00:	4152      	adcs	r2, r2
    2a02:	0b03      	lsrs	r3, r0, #12
    2a04:	428b      	cmp	r3, r1
    2a06:	d301      	bcc.n	2a0c <__divsi3+0x70>
    2a08:	030b      	lsls	r3, r1, #12
    2a0a:	1ac0      	subs	r0, r0, r3
    2a0c:	4152      	adcs	r2, r2
    2a0e:	0ac3      	lsrs	r3, r0, #11
    2a10:	428b      	cmp	r3, r1
    2a12:	d301      	bcc.n	2a18 <__divsi3+0x7c>
    2a14:	02cb      	lsls	r3, r1, #11
    2a16:	1ac0      	subs	r0, r0, r3
    2a18:	4152      	adcs	r2, r2
    2a1a:	0a83      	lsrs	r3, r0, #10
    2a1c:	428b      	cmp	r3, r1
    2a1e:	d301      	bcc.n	2a24 <__divsi3+0x88>
    2a20:	028b      	lsls	r3, r1, #10
    2a22:	1ac0      	subs	r0, r0, r3
    2a24:	4152      	adcs	r2, r2
    2a26:	0a43      	lsrs	r3, r0, #9
    2a28:	428b      	cmp	r3, r1
    2a2a:	d301      	bcc.n	2a30 <__divsi3+0x94>
    2a2c:	024b      	lsls	r3, r1, #9
    2a2e:	1ac0      	subs	r0, r0, r3
    2a30:	4152      	adcs	r2, r2
    2a32:	0a03      	lsrs	r3, r0, #8
    2a34:	428b      	cmp	r3, r1
    2a36:	d301      	bcc.n	2a3c <__divsi3+0xa0>
    2a38:	020b      	lsls	r3, r1, #8
    2a3a:	1ac0      	subs	r0, r0, r3
    2a3c:	4152      	adcs	r2, r2
    2a3e:	d2cd      	bcs.n	29dc <__divsi3+0x40>
    2a40:	09c3      	lsrs	r3, r0, #7
    2a42:	428b      	cmp	r3, r1
    2a44:	d301      	bcc.n	2a4a <__divsi3+0xae>
    2a46:	01cb      	lsls	r3, r1, #7
    2a48:	1ac0      	subs	r0, r0, r3
    2a4a:	4152      	adcs	r2, r2
    2a4c:	0983      	lsrs	r3, r0, #6
    2a4e:	428b      	cmp	r3, r1
    2a50:	d301      	bcc.n	2a56 <__divsi3+0xba>
    2a52:	018b      	lsls	r3, r1, #6
    2a54:	1ac0      	subs	r0, r0, r3
    2a56:	4152      	adcs	r2, r2
    2a58:	0943      	lsrs	r3, r0, #5
    2a5a:	428b      	cmp	r3, r1
    2a5c:	d301      	bcc.n	2a62 <__divsi3+0xc6>
    2a5e:	014b      	lsls	r3, r1, #5
    2a60:	1ac0      	subs	r0, r0, r3
    2a62:	4152      	adcs	r2, r2
    2a64:	0903      	lsrs	r3, r0, #4
    2a66:	428b      	cmp	r3, r1
    2a68:	d301      	bcc.n	2a6e <__divsi3+0xd2>
    2a6a:	010b      	lsls	r3, r1, #4
    2a6c:	1ac0      	subs	r0, r0, r3
    2a6e:	4152      	adcs	r2, r2
    2a70:	08c3      	lsrs	r3, r0, #3
    2a72:	428b      	cmp	r3, r1
    2a74:	d301      	bcc.n	2a7a <__divsi3+0xde>
    2a76:	00cb      	lsls	r3, r1, #3
    2a78:	1ac0      	subs	r0, r0, r3
    2a7a:	4152      	adcs	r2, r2
    2a7c:	0883      	lsrs	r3, r0, #2
    2a7e:	428b      	cmp	r3, r1
    2a80:	d301      	bcc.n	2a86 <__divsi3+0xea>
    2a82:	008b      	lsls	r3, r1, #2
    2a84:	1ac0      	subs	r0, r0, r3
    2a86:	4152      	adcs	r2, r2
    2a88:	0843      	lsrs	r3, r0, #1
    2a8a:	428b      	cmp	r3, r1
    2a8c:	d301      	bcc.n	2a92 <__divsi3+0xf6>
    2a8e:	004b      	lsls	r3, r1, #1
    2a90:	1ac0      	subs	r0, r0, r3
    2a92:	4152      	adcs	r2, r2
    2a94:	1a41      	subs	r1, r0, r1
    2a96:	d200      	bcs.n	2a9a <__divsi3+0xfe>
    2a98:	4601      	mov	r1, r0
    2a9a:	4152      	adcs	r2, r2
    2a9c:	4610      	mov	r0, r2
    2a9e:	4770      	bx	lr
    2aa0:	e05d      	b.n	2b5e <__divsi3+0x1c2>
    2aa2:	0fca      	lsrs	r2, r1, #31
    2aa4:	d000      	beq.n	2aa8 <__divsi3+0x10c>
    2aa6:	4249      	negs	r1, r1
    2aa8:	1003      	asrs	r3, r0, #32
    2aaa:	d300      	bcc.n	2aae <__divsi3+0x112>
    2aac:	4240      	negs	r0, r0
    2aae:	4053      	eors	r3, r2
    2ab0:	2200      	movs	r2, #0
    2ab2:	469c      	mov	ip, r3
    2ab4:	0903      	lsrs	r3, r0, #4
    2ab6:	428b      	cmp	r3, r1
    2ab8:	d32d      	bcc.n	2b16 <__divsi3+0x17a>
    2aba:	0a03      	lsrs	r3, r0, #8
    2abc:	428b      	cmp	r3, r1
    2abe:	d312      	bcc.n	2ae6 <__divsi3+0x14a>
    2ac0:	22fc      	movs	r2, #252	; 0xfc
    2ac2:	0189      	lsls	r1, r1, #6
    2ac4:	ba12      	rev	r2, r2
    2ac6:	0a03      	lsrs	r3, r0, #8
    2ac8:	428b      	cmp	r3, r1
    2aca:	d30c      	bcc.n	2ae6 <__divsi3+0x14a>
    2acc:	0189      	lsls	r1, r1, #6
    2ace:	1192      	asrs	r2, r2, #6
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d308      	bcc.n	2ae6 <__divsi3+0x14a>
    2ad4:	0189      	lsls	r1, r1, #6
    2ad6:	1192      	asrs	r2, r2, #6
    2ad8:	428b      	cmp	r3, r1
    2ada:	d304      	bcc.n	2ae6 <__divsi3+0x14a>
    2adc:	0189      	lsls	r1, r1, #6
    2ade:	d03a      	beq.n	2b56 <__divsi3+0x1ba>
    2ae0:	1192      	asrs	r2, r2, #6
    2ae2:	e000      	b.n	2ae6 <__divsi3+0x14a>
    2ae4:	0989      	lsrs	r1, r1, #6
    2ae6:	09c3      	lsrs	r3, r0, #7
    2ae8:	428b      	cmp	r3, r1
    2aea:	d301      	bcc.n	2af0 <__divsi3+0x154>
    2aec:	01cb      	lsls	r3, r1, #7
    2aee:	1ac0      	subs	r0, r0, r3
    2af0:	4152      	adcs	r2, r2
    2af2:	0983      	lsrs	r3, r0, #6
    2af4:	428b      	cmp	r3, r1
    2af6:	d301      	bcc.n	2afc <__divsi3+0x160>
    2af8:	018b      	lsls	r3, r1, #6
    2afa:	1ac0      	subs	r0, r0, r3
    2afc:	4152      	adcs	r2, r2
    2afe:	0943      	lsrs	r3, r0, #5
    2b00:	428b      	cmp	r3, r1
    2b02:	d301      	bcc.n	2b08 <__divsi3+0x16c>
    2b04:	014b      	lsls	r3, r1, #5
    2b06:	1ac0      	subs	r0, r0, r3
    2b08:	4152      	adcs	r2, r2
    2b0a:	0903      	lsrs	r3, r0, #4
    2b0c:	428b      	cmp	r3, r1
    2b0e:	d301      	bcc.n	2b14 <__divsi3+0x178>
    2b10:	010b      	lsls	r3, r1, #4
    2b12:	1ac0      	subs	r0, r0, r3
    2b14:	4152      	adcs	r2, r2
    2b16:	08c3      	lsrs	r3, r0, #3
    2b18:	428b      	cmp	r3, r1
    2b1a:	d301      	bcc.n	2b20 <__divsi3+0x184>
    2b1c:	00cb      	lsls	r3, r1, #3
    2b1e:	1ac0      	subs	r0, r0, r3
    2b20:	4152      	adcs	r2, r2
    2b22:	0883      	lsrs	r3, r0, #2
    2b24:	428b      	cmp	r3, r1
    2b26:	d301      	bcc.n	2b2c <__divsi3+0x190>
    2b28:	008b      	lsls	r3, r1, #2
    2b2a:	1ac0      	subs	r0, r0, r3
    2b2c:	4152      	adcs	r2, r2
    2b2e:	d2d9      	bcs.n	2ae4 <__divsi3+0x148>
    2b30:	0843      	lsrs	r3, r0, #1
    2b32:	428b      	cmp	r3, r1
    2b34:	d301      	bcc.n	2b3a <__divsi3+0x19e>
    2b36:	004b      	lsls	r3, r1, #1
    2b38:	1ac0      	subs	r0, r0, r3
    2b3a:	4152      	adcs	r2, r2
    2b3c:	1a41      	subs	r1, r0, r1
    2b3e:	d200      	bcs.n	2b42 <__divsi3+0x1a6>
    2b40:	4601      	mov	r1, r0
    2b42:	4663      	mov	r3, ip
    2b44:	4152      	adcs	r2, r2
    2b46:	105b      	asrs	r3, r3, #1
    2b48:	4610      	mov	r0, r2
    2b4a:	d301      	bcc.n	2b50 <__divsi3+0x1b4>
    2b4c:	4240      	negs	r0, r0
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d500      	bpl.n	2b54 <__divsi3+0x1b8>
    2b52:	4249      	negs	r1, r1
    2b54:	4770      	bx	lr
    2b56:	4663      	mov	r3, ip
    2b58:	105b      	asrs	r3, r3, #1
    2b5a:	d300      	bcc.n	2b5e <__divsi3+0x1c2>
    2b5c:	4240      	negs	r0, r0
    2b5e:	b501      	push	{r0, lr}
    2b60:	2000      	movs	r0, #0
    2b62:	f000 f805 	bl	2b70 <__aeabi_idiv0>
    2b66:	bd02      	pop	{r1, pc}

00002b68 <__aeabi_idivmod>:
    2b68:	2900      	cmp	r1, #0
    2b6a:	d0f8      	beq.n	2b5e <__divsi3+0x1c2>
    2b6c:	e716      	b.n	299c <__divsi3>
    2b6e:	4770      	bx	lr

00002b70 <__aeabi_idiv0>:
    2b70:	4770      	bx	lr
    2b72:	46c0      	nop			; (mov r8, r8)

00002b74 <__aeabi_cfrcmple>:
    2b74:	4684      	mov	ip, r0
    2b76:	1c08      	adds	r0, r1, #0
    2b78:	4661      	mov	r1, ip
    2b7a:	e7ff      	b.n	2b7c <__aeabi_cfcmpeq>

00002b7c <__aeabi_cfcmpeq>:
    2b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2b7e:	f000 fb73 	bl	3268 <__lesf2>
    2b82:	2800      	cmp	r0, #0
    2b84:	d401      	bmi.n	2b8a <__aeabi_cfcmpeq+0xe>
    2b86:	2100      	movs	r1, #0
    2b88:	42c8      	cmn	r0, r1
    2b8a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002b8c <__aeabi_fcmpeq>:
    2b8c:	b510      	push	{r4, lr}
    2b8e:	f000 fb05 	bl	319c <__eqsf2>
    2b92:	4240      	negs	r0, r0
    2b94:	3001      	adds	r0, #1
    2b96:	bd10      	pop	{r4, pc}

00002b98 <__aeabi_fcmplt>:
    2b98:	b510      	push	{r4, lr}
    2b9a:	f000 fb65 	bl	3268 <__lesf2>
    2b9e:	2800      	cmp	r0, #0
    2ba0:	db01      	blt.n	2ba6 <__aeabi_fcmplt+0xe>
    2ba2:	2000      	movs	r0, #0
    2ba4:	bd10      	pop	{r4, pc}
    2ba6:	2001      	movs	r0, #1
    2ba8:	bd10      	pop	{r4, pc}
    2baa:	46c0      	nop			; (mov r8, r8)

00002bac <__aeabi_fcmple>:
    2bac:	b510      	push	{r4, lr}
    2bae:	f000 fb5b 	bl	3268 <__lesf2>
    2bb2:	2800      	cmp	r0, #0
    2bb4:	dd01      	ble.n	2bba <__aeabi_fcmple+0xe>
    2bb6:	2000      	movs	r0, #0
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	2001      	movs	r0, #1
    2bbc:	bd10      	pop	{r4, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)

00002bc0 <__aeabi_fcmpgt>:
    2bc0:	b510      	push	{r4, lr}
    2bc2:	f000 fb11 	bl	31e8 <__gesf2>
    2bc6:	2800      	cmp	r0, #0
    2bc8:	dc01      	bgt.n	2bce <__aeabi_fcmpgt+0xe>
    2bca:	2000      	movs	r0, #0
    2bcc:	bd10      	pop	{r4, pc}
    2bce:	2001      	movs	r0, #1
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	46c0      	nop			; (mov r8, r8)

00002bd4 <__aeabi_fcmpge>:
    2bd4:	b510      	push	{r4, lr}
    2bd6:	f000 fb07 	bl	31e8 <__gesf2>
    2bda:	2800      	cmp	r0, #0
    2bdc:	da01      	bge.n	2be2 <__aeabi_fcmpge+0xe>
    2bde:	2000      	movs	r0, #0
    2be0:	bd10      	pop	{r4, pc}
    2be2:	2001      	movs	r0, #1
    2be4:	bd10      	pop	{r4, pc}
    2be6:	46c0      	nop			; (mov r8, r8)

00002be8 <__aeabi_fadd>:
    2be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bea:	46c6      	mov	lr, r8
    2bec:	024e      	lsls	r6, r1, #9
    2bee:	0247      	lsls	r7, r0, #9
    2bf0:	0a76      	lsrs	r6, r6, #9
    2bf2:	0a7b      	lsrs	r3, r7, #9
    2bf4:	0044      	lsls	r4, r0, #1
    2bf6:	0fc5      	lsrs	r5, r0, #31
    2bf8:	00f7      	lsls	r7, r6, #3
    2bfa:	0048      	lsls	r0, r1, #1
    2bfc:	4698      	mov	r8, r3
    2bfe:	b500      	push	{lr}
    2c00:	0e24      	lsrs	r4, r4, #24
    2c02:	002a      	movs	r2, r5
    2c04:	00db      	lsls	r3, r3, #3
    2c06:	0e00      	lsrs	r0, r0, #24
    2c08:	0fc9      	lsrs	r1, r1, #31
    2c0a:	46bc      	mov	ip, r7
    2c0c:	428d      	cmp	r5, r1
    2c0e:	d067      	beq.n	2ce0 <__aeabi_fadd+0xf8>
    2c10:	1a22      	subs	r2, r4, r0
    2c12:	2a00      	cmp	r2, #0
    2c14:	dc00      	bgt.n	2c18 <__aeabi_fadd+0x30>
    2c16:	e0a5      	b.n	2d64 <__aeabi_fadd+0x17c>
    2c18:	2800      	cmp	r0, #0
    2c1a:	d13a      	bne.n	2c92 <__aeabi_fadd+0xaa>
    2c1c:	2f00      	cmp	r7, #0
    2c1e:	d100      	bne.n	2c22 <__aeabi_fadd+0x3a>
    2c20:	e093      	b.n	2d4a <__aeabi_fadd+0x162>
    2c22:	1e51      	subs	r1, r2, #1
    2c24:	2900      	cmp	r1, #0
    2c26:	d000      	beq.n	2c2a <__aeabi_fadd+0x42>
    2c28:	e0bc      	b.n	2da4 <__aeabi_fadd+0x1bc>
    2c2a:	2401      	movs	r4, #1
    2c2c:	1bdb      	subs	r3, r3, r7
    2c2e:	015a      	lsls	r2, r3, #5
    2c30:	d546      	bpl.n	2cc0 <__aeabi_fadd+0xd8>
    2c32:	019b      	lsls	r3, r3, #6
    2c34:	099e      	lsrs	r6, r3, #6
    2c36:	0030      	movs	r0, r6
    2c38:	f001 fcf0 	bl	461c <__clzsi2>
    2c3c:	3805      	subs	r0, #5
    2c3e:	4086      	lsls	r6, r0
    2c40:	4284      	cmp	r4, r0
    2c42:	dd00      	ble.n	2c46 <__aeabi_fadd+0x5e>
    2c44:	e09d      	b.n	2d82 <__aeabi_fadd+0x19a>
    2c46:	1b04      	subs	r4, r0, r4
    2c48:	0032      	movs	r2, r6
    2c4a:	2020      	movs	r0, #32
    2c4c:	3401      	adds	r4, #1
    2c4e:	40e2      	lsrs	r2, r4
    2c50:	1b04      	subs	r4, r0, r4
    2c52:	40a6      	lsls	r6, r4
    2c54:	0033      	movs	r3, r6
    2c56:	1e5e      	subs	r6, r3, #1
    2c58:	41b3      	sbcs	r3, r6
    2c5a:	2400      	movs	r4, #0
    2c5c:	4313      	orrs	r3, r2
    2c5e:	075a      	lsls	r2, r3, #29
    2c60:	d004      	beq.n	2c6c <__aeabi_fadd+0x84>
    2c62:	220f      	movs	r2, #15
    2c64:	401a      	ands	r2, r3
    2c66:	2a04      	cmp	r2, #4
    2c68:	d000      	beq.n	2c6c <__aeabi_fadd+0x84>
    2c6a:	3304      	adds	r3, #4
    2c6c:	015a      	lsls	r2, r3, #5
    2c6e:	d529      	bpl.n	2cc4 <__aeabi_fadd+0xdc>
    2c70:	3401      	adds	r4, #1
    2c72:	2cff      	cmp	r4, #255	; 0xff
    2c74:	d100      	bne.n	2c78 <__aeabi_fadd+0x90>
    2c76:	e081      	b.n	2d7c <__aeabi_fadd+0x194>
    2c78:	002a      	movs	r2, r5
    2c7a:	019b      	lsls	r3, r3, #6
    2c7c:	0a5b      	lsrs	r3, r3, #9
    2c7e:	b2e4      	uxtb	r4, r4
    2c80:	025b      	lsls	r3, r3, #9
    2c82:	05e4      	lsls	r4, r4, #23
    2c84:	0a58      	lsrs	r0, r3, #9
    2c86:	07d2      	lsls	r2, r2, #31
    2c88:	4320      	orrs	r0, r4
    2c8a:	4310      	orrs	r0, r2
    2c8c:	bc04      	pop	{r2}
    2c8e:	4690      	mov	r8, r2
    2c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c92:	2cff      	cmp	r4, #255	; 0xff
    2c94:	d0e3      	beq.n	2c5e <__aeabi_fadd+0x76>
    2c96:	2180      	movs	r1, #128	; 0x80
    2c98:	0038      	movs	r0, r7
    2c9a:	04c9      	lsls	r1, r1, #19
    2c9c:	4308      	orrs	r0, r1
    2c9e:	4684      	mov	ip, r0
    2ca0:	2a1b      	cmp	r2, #27
    2ca2:	dd00      	ble.n	2ca6 <__aeabi_fadd+0xbe>
    2ca4:	e082      	b.n	2dac <__aeabi_fadd+0x1c4>
    2ca6:	2020      	movs	r0, #32
    2ca8:	4661      	mov	r1, ip
    2caa:	40d1      	lsrs	r1, r2
    2cac:	1a82      	subs	r2, r0, r2
    2cae:	4660      	mov	r0, ip
    2cb0:	4090      	lsls	r0, r2
    2cb2:	0002      	movs	r2, r0
    2cb4:	1e50      	subs	r0, r2, #1
    2cb6:	4182      	sbcs	r2, r0
    2cb8:	430a      	orrs	r2, r1
    2cba:	1a9b      	subs	r3, r3, r2
    2cbc:	015a      	lsls	r2, r3, #5
    2cbe:	d4b8      	bmi.n	2c32 <__aeabi_fadd+0x4a>
    2cc0:	075a      	lsls	r2, r3, #29
    2cc2:	d1ce      	bne.n	2c62 <__aeabi_fadd+0x7a>
    2cc4:	08de      	lsrs	r6, r3, #3
    2cc6:	002a      	movs	r2, r5
    2cc8:	2cff      	cmp	r4, #255	; 0xff
    2cca:	d13a      	bne.n	2d42 <__aeabi_fadd+0x15a>
    2ccc:	2e00      	cmp	r6, #0
    2cce:	d100      	bne.n	2cd2 <__aeabi_fadd+0xea>
    2cd0:	e0ae      	b.n	2e30 <__aeabi_fadd+0x248>
    2cd2:	2380      	movs	r3, #128	; 0x80
    2cd4:	03db      	lsls	r3, r3, #15
    2cd6:	4333      	orrs	r3, r6
    2cd8:	025b      	lsls	r3, r3, #9
    2cda:	0a5b      	lsrs	r3, r3, #9
    2cdc:	24ff      	movs	r4, #255	; 0xff
    2cde:	e7cf      	b.n	2c80 <__aeabi_fadd+0x98>
    2ce0:	1a21      	subs	r1, r4, r0
    2ce2:	2900      	cmp	r1, #0
    2ce4:	dd52      	ble.n	2d8c <__aeabi_fadd+0x1a4>
    2ce6:	2800      	cmp	r0, #0
    2ce8:	d031      	beq.n	2d4e <__aeabi_fadd+0x166>
    2cea:	2cff      	cmp	r4, #255	; 0xff
    2cec:	d0b7      	beq.n	2c5e <__aeabi_fadd+0x76>
    2cee:	2080      	movs	r0, #128	; 0x80
    2cf0:	003e      	movs	r6, r7
    2cf2:	04c0      	lsls	r0, r0, #19
    2cf4:	4306      	orrs	r6, r0
    2cf6:	46b4      	mov	ip, r6
    2cf8:	291b      	cmp	r1, #27
    2cfa:	dd00      	ble.n	2cfe <__aeabi_fadd+0x116>
    2cfc:	e0aa      	b.n	2e54 <__aeabi_fadd+0x26c>
    2cfe:	2620      	movs	r6, #32
    2d00:	4660      	mov	r0, ip
    2d02:	40c8      	lsrs	r0, r1
    2d04:	1a71      	subs	r1, r6, r1
    2d06:	4666      	mov	r6, ip
    2d08:	408e      	lsls	r6, r1
    2d0a:	0031      	movs	r1, r6
    2d0c:	1e4e      	subs	r6, r1, #1
    2d0e:	41b1      	sbcs	r1, r6
    2d10:	4301      	orrs	r1, r0
    2d12:	185b      	adds	r3, r3, r1
    2d14:	0159      	lsls	r1, r3, #5
    2d16:	d5d3      	bpl.n	2cc0 <__aeabi_fadd+0xd8>
    2d18:	3401      	adds	r4, #1
    2d1a:	2cff      	cmp	r4, #255	; 0xff
    2d1c:	d100      	bne.n	2d20 <__aeabi_fadd+0x138>
    2d1e:	e087      	b.n	2e30 <__aeabi_fadd+0x248>
    2d20:	2201      	movs	r2, #1
    2d22:	4978      	ldr	r1, [pc, #480]	; (2f04 <__aeabi_fadd+0x31c>)
    2d24:	401a      	ands	r2, r3
    2d26:	085b      	lsrs	r3, r3, #1
    2d28:	400b      	ands	r3, r1
    2d2a:	4313      	orrs	r3, r2
    2d2c:	e797      	b.n	2c5e <__aeabi_fadd+0x76>
    2d2e:	2c00      	cmp	r4, #0
    2d30:	d000      	beq.n	2d34 <__aeabi_fadd+0x14c>
    2d32:	e0a7      	b.n	2e84 <__aeabi_fadd+0x29c>
    2d34:	2b00      	cmp	r3, #0
    2d36:	d000      	beq.n	2d3a <__aeabi_fadd+0x152>
    2d38:	e0b6      	b.n	2ea8 <__aeabi_fadd+0x2c0>
    2d3a:	1e3b      	subs	r3, r7, #0
    2d3c:	d162      	bne.n	2e04 <__aeabi_fadd+0x21c>
    2d3e:	2600      	movs	r6, #0
    2d40:	2200      	movs	r2, #0
    2d42:	0273      	lsls	r3, r6, #9
    2d44:	0a5b      	lsrs	r3, r3, #9
    2d46:	b2e4      	uxtb	r4, r4
    2d48:	e79a      	b.n	2c80 <__aeabi_fadd+0x98>
    2d4a:	0014      	movs	r4, r2
    2d4c:	e787      	b.n	2c5e <__aeabi_fadd+0x76>
    2d4e:	2f00      	cmp	r7, #0
    2d50:	d04d      	beq.n	2dee <__aeabi_fadd+0x206>
    2d52:	1e48      	subs	r0, r1, #1
    2d54:	2800      	cmp	r0, #0
    2d56:	d157      	bne.n	2e08 <__aeabi_fadd+0x220>
    2d58:	4463      	add	r3, ip
    2d5a:	2401      	movs	r4, #1
    2d5c:	015a      	lsls	r2, r3, #5
    2d5e:	d5af      	bpl.n	2cc0 <__aeabi_fadd+0xd8>
    2d60:	2402      	movs	r4, #2
    2d62:	e7dd      	b.n	2d20 <__aeabi_fadd+0x138>
    2d64:	2a00      	cmp	r2, #0
    2d66:	d124      	bne.n	2db2 <__aeabi_fadd+0x1ca>
    2d68:	1c62      	adds	r2, r4, #1
    2d6a:	b2d2      	uxtb	r2, r2
    2d6c:	2a01      	cmp	r2, #1
    2d6e:	ddde      	ble.n	2d2e <__aeabi_fadd+0x146>
    2d70:	1bde      	subs	r6, r3, r7
    2d72:	0172      	lsls	r2, r6, #5
    2d74:	d535      	bpl.n	2de2 <__aeabi_fadd+0x1fa>
    2d76:	1afe      	subs	r6, r7, r3
    2d78:	000d      	movs	r5, r1
    2d7a:	e75c      	b.n	2c36 <__aeabi_fadd+0x4e>
    2d7c:	002a      	movs	r2, r5
    2d7e:	2300      	movs	r3, #0
    2d80:	e77e      	b.n	2c80 <__aeabi_fadd+0x98>
    2d82:	0033      	movs	r3, r6
    2d84:	4a60      	ldr	r2, [pc, #384]	; (2f08 <__aeabi_fadd+0x320>)
    2d86:	1a24      	subs	r4, r4, r0
    2d88:	4013      	ands	r3, r2
    2d8a:	e768      	b.n	2c5e <__aeabi_fadd+0x76>
    2d8c:	2900      	cmp	r1, #0
    2d8e:	d163      	bne.n	2e58 <__aeabi_fadd+0x270>
    2d90:	1c61      	adds	r1, r4, #1
    2d92:	b2c8      	uxtb	r0, r1
    2d94:	2801      	cmp	r0, #1
    2d96:	dd4e      	ble.n	2e36 <__aeabi_fadd+0x24e>
    2d98:	29ff      	cmp	r1, #255	; 0xff
    2d9a:	d049      	beq.n	2e30 <__aeabi_fadd+0x248>
    2d9c:	4463      	add	r3, ip
    2d9e:	085b      	lsrs	r3, r3, #1
    2da0:	000c      	movs	r4, r1
    2da2:	e75c      	b.n	2c5e <__aeabi_fadd+0x76>
    2da4:	2aff      	cmp	r2, #255	; 0xff
    2da6:	d041      	beq.n	2e2c <__aeabi_fadd+0x244>
    2da8:	000a      	movs	r2, r1
    2daa:	e779      	b.n	2ca0 <__aeabi_fadd+0xb8>
    2dac:	2201      	movs	r2, #1
    2dae:	1a9b      	subs	r3, r3, r2
    2db0:	e784      	b.n	2cbc <__aeabi_fadd+0xd4>
    2db2:	2c00      	cmp	r4, #0
    2db4:	d01d      	beq.n	2df2 <__aeabi_fadd+0x20a>
    2db6:	28ff      	cmp	r0, #255	; 0xff
    2db8:	d022      	beq.n	2e00 <__aeabi_fadd+0x218>
    2dba:	2480      	movs	r4, #128	; 0x80
    2dbc:	04e4      	lsls	r4, r4, #19
    2dbe:	4252      	negs	r2, r2
    2dc0:	4323      	orrs	r3, r4
    2dc2:	2a1b      	cmp	r2, #27
    2dc4:	dd00      	ble.n	2dc8 <__aeabi_fadd+0x1e0>
    2dc6:	e08a      	b.n	2ede <__aeabi_fadd+0x2f6>
    2dc8:	001c      	movs	r4, r3
    2dca:	2520      	movs	r5, #32
    2dcc:	40d4      	lsrs	r4, r2
    2dce:	1aaa      	subs	r2, r5, r2
    2dd0:	4093      	lsls	r3, r2
    2dd2:	1e5a      	subs	r2, r3, #1
    2dd4:	4193      	sbcs	r3, r2
    2dd6:	4323      	orrs	r3, r4
    2dd8:	4662      	mov	r2, ip
    2dda:	0004      	movs	r4, r0
    2ddc:	1ad3      	subs	r3, r2, r3
    2dde:	000d      	movs	r5, r1
    2de0:	e725      	b.n	2c2e <__aeabi_fadd+0x46>
    2de2:	2e00      	cmp	r6, #0
    2de4:	d000      	beq.n	2de8 <__aeabi_fadd+0x200>
    2de6:	e726      	b.n	2c36 <__aeabi_fadd+0x4e>
    2de8:	2200      	movs	r2, #0
    2dea:	2400      	movs	r4, #0
    2dec:	e7a9      	b.n	2d42 <__aeabi_fadd+0x15a>
    2dee:	000c      	movs	r4, r1
    2df0:	e735      	b.n	2c5e <__aeabi_fadd+0x76>
    2df2:	2b00      	cmp	r3, #0
    2df4:	d04d      	beq.n	2e92 <__aeabi_fadd+0x2aa>
    2df6:	43d2      	mvns	r2, r2
    2df8:	2a00      	cmp	r2, #0
    2dfa:	d0ed      	beq.n	2dd8 <__aeabi_fadd+0x1f0>
    2dfc:	28ff      	cmp	r0, #255	; 0xff
    2dfe:	d1e0      	bne.n	2dc2 <__aeabi_fadd+0x1da>
    2e00:	4663      	mov	r3, ip
    2e02:	24ff      	movs	r4, #255	; 0xff
    2e04:	000d      	movs	r5, r1
    2e06:	e72a      	b.n	2c5e <__aeabi_fadd+0x76>
    2e08:	29ff      	cmp	r1, #255	; 0xff
    2e0a:	d00f      	beq.n	2e2c <__aeabi_fadd+0x244>
    2e0c:	0001      	movs	r1, r0
    2e0e:	e773      	b.n	2cf8 <__aeabi_fadd+0x110>
    2e10:	2b00      	cmp	r3, #0
    2e12:	d061      	beq.n	2ed8 <__aeabi_fadd+0x2f0>
    2e14:	24ff      	movs	r4, #255	; 0xff
    2e16:	2f00      	cmp	r7, #0
    2e18:	d100      	bne.n	2e1c <__aeabi_fadd+0x234>
    2e1a:	e720      	b.n	2c5e <__aeabi_fadd+0x76>
    2e1c:	2280      	movs	r2, #128	; 0x80
    2e1e:	4641      	mov	r1, r8
    2e20:	03d2      	lsls	r2, r2, #15
    2e22:	4211      	tst	r1, r2
    2e24:	d002      	beq.n	2e2c <__aeabi_fadd+0x244>
    2e26:	4216      	tst	r6, r2
    2e28:	d100      	bne.n	2e2c <__aeabi_fadd+0x244>
    2e2a:	003b      	movs	r3, r7
    2e2c:	24ff      	movs	r4, #255	; 0xff
    2e2e:	e716      	b.n	2c5e <__aeabi_fadd+0x76>
    2e30:	24ff      	movs	r4, #255	; 0xff
    2e32:	2300      	movs	r3, #0
    2e34:	e724      	b.n	2c80 <__aeabi_fadd+0x98>
    2e36:	2c00      	cmp	r4, #0
    2e38:	d1ea      	bne.n	2e10 <__aeabi_fadd+0x228>
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d058      	beq.n	2ef0 <__aeabi_fadd+0x308>
    2e3e:	2f00      	cmp	r7, #0
    2e40:	d100      	bne.n	2e44 <__aeabi_fadd+0x25c>
    2e42:	e70c      	b.n	2c5e <__aeabi_fadd+0x76>
    2e44:	4463      	add	r3, ip
    2e46:	015a      	lsls	r2, r3, #5
    2e48:	d400      	bmi.n	2e4c <__aeabi_fadd+0x264>
    2e4a:	e739      	b.n	2cc0 <__aeabi_fadd+0xd8>
    2e4c:	4a2e      	ldr	r2, [pc, #184]	; (2f08 <__aeabi_fadd+0x320>)
    2e4e:	000c      	movs	r4, r1
    2e50:	4013      	ands	r3, r2
    2e52:	e704      	b.n	2c5e <__aeabi_fadd+0x76>
    2e54:	2101      	movs	r1, #1
    2e56:	e75c      	b.n	2d12 <__aeabi_fadd+0x12a>
    2e58:	2c00      	cmp	r4, #0
    2e5a:	d11e      	bne.n	2e9a <__aeabi_fadd+0x2b2>
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d040      	beq.n	2ee2 <__aeabi_fadd+0x2fa>
    2e60:	43c9      	mvns	r1, r1
    2e62:	2900      	cmp	r1, #0
    2e64:	d00b      	beq.n	2e7e <__aeabi_fadd+0x296>
    2e66:	28ff      	cmp	r0, #255	; 0xff
    2e68:	d036      	beq.n	2ed8 <__aeabi_fadd+0x2f0>
    2e6a:	291b      	cmp	r1, #27
    2e6c:	dc47      	bgt.n	2efe <__aeabi_fadd+0x316>
    2e6e:	001c      	movs	r4, r3
    2e70:	2620      	movs	r6, #32
    2e72:	40cc      	lsrs	r4, r1
    2e74:	1a71      	subs	r1, r6, r1
    2e76:	408b      	lsls	r3, r1
    2e78:	1e59      	subs	r1, r3, #1
    2e7a:	418b      	sbcs	r3, r1
    2e7c:	4323      	orrs	r3, r4
    2e7e:	4463      	add	r3, ip
    2e80:	0004      	movs	r4, r0
    2e82:	e747      	b.n	2d14 <__aeabi_fadd+0x12c>
    2e84:	2b00      	cmp	r3, #0
    2e86:	d118      	bne.n	2eba <__aeabi_fadd+0x2d2>
    2e88:	1e3b      	subs	r3, r7, #0
    2e8a:	d02d      	beq.n	2ee8 <__aeabi_fadd+0x300>
    2e8c:	000d      	movs	r5, r1
    2e8e:	24ff      	movs	r4, #255	; 0xff
    2e90:	e6e5      	b.n	2c5e <__aeabi_fadd+0x76>
    2e92:	003b      	movs	r3, r7
    2e94:	0004      	movs	r4, r0
    2e96:	000d      	movs	r5, r1
    2e98:	e6e1      	b.n	2c5e <__aeabi_fadd+0x76>
    2e9a:	28ff      	cmp	r0, #255	; 0xff
    2e9c:	d01c      	beq.n	2ed8 <__aeabi_fadd+0x2f0>
    2e9e:	2480      	movs	r4, #128	; 0x80
    2ea0:	04e4      	lsls	r4, r4, #19
    2ea2:	4249      	negs	r1, r1
    2ea4:	4323      	orrs	r3, r4
    2ea6:	e7e0      	b.n	2e6a <__aeabi_fadd+0x282>
    2ea8:	2f00      	cmp	r7, #0
    2eaa:	d100      	bne.n	2eae <__aeabi_fadd+0x2c6>
    2eac:	e6d7      	b.n	2c5e <__aeabi_fadd+0x76>
    2eae:	1bde      	subs	r6, r3, r7
    2eb0:	0172      	lsls	r2, r6, #5
    2eb2:	d51f      	bpl.n	2ef4 <__aeabi_fadd+0x30c>
    2eb4:	1afb      	subs	r3, r7, r3
    2eb6:	000d      	movs	r5, r1
    2eb8:	e6d1      	b.n	2c5e <__aeabi_fadd+0x76>
    2eba:	24ff      	movs	r4, #255	; 0xff
    2ebc:	2f00      	cmp	r7, #0
    2ebe:	d100      	bne.n	2ec2 <__aeabi_fadd+0x2da>
    2ec0:	e6cd      	b.n	2c5e <__aeabi_fadd+0x76>
    2ec2:	2280      	movs	r2, #128	; 0x80
    2ec4:	4640      	mov	r0, r8
    2ec6:	03d2      	lsls	r2, r2, #15
    2ec8:	4210      	tst	r0, r2
    2eca:	d0af      	beq.n	2e2c <__aeabi_fadd+0x244>
    2ecc:	4216      	tst	r6, r2
    2ece:	d1ad      	bne.n	2e2c <__aeabi_fadd+0x244>
    2ed0:	003b      	movs	r3, r7
    2ed2:	000d      	movs	r5, r1
    2ed4:	24ff      	movs	r4, #255	; 0xff
    2ed6:	e6c2      	b.n	2c5e <__aeabi_fadd+0x76>
    2ed8:	4663      	mov	r3, ip
    2eda:	24ff      	movs	r4, #255	; 0xff
    2edc:	e6bf      	b.n	2c5e <__aeabi_fadd+0x76>
    2ede:	2301      	movs	r3, #1
    2ee0:	e77a      	b.n	2dd8 <__aeabi_fadd+0x1f0>
    2ee2:	003b      	movs	r3, r7
    2ee4:	0004      	movs	r4, r0
    2ee6:	e6ba      	b.n	2c5e <__aeabi_fadd+0x76>
    2ee8:	2680      	movs	r6, #128	; 0x80
    2eea:	2200      	movs	r2, #0
    2eec:	03f6      	lsls	r6, r6, #15
    2eee:	e6f0      	b.n	2cd2 <__aeabi_fadd+0xea>
    2ef0:	003b      	movs	r3, r7
    2ef2:	e6b4      	b.n	2c5e <__aeabi_fadd+0x76>
    2ef4:	1e33      	subs	r3, r6, #0
    2ef6:	d000      	beq.n	2efa <__aeabi_fadd+0x312>
    2ef8:	e6e2      	b.n	2cc0 <__aeabi_fadd+0xd8>
    2efa:	2200      	movs	r2, #0
    2efc:	e721      	b.n	2d42 <__aeabi_fadd+0x15a>
    2efe:	2301      	movs	r3, #1
    2f00:	e7bd      	b.n	2e7e <__aeabi_fadd+0x296>
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	7dffffff 	.word	0x7dffffff
    2f08:	fbffffff 	.word	0xfbffffff

00002f0c <__aeabi_fdiv>:
    2f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f0e:	4657      	mov	r7, sl
    2f10:	464e      	mov	r6, r9
    2f12:	46de      	mov	lr, fp
    2f14:	4645      	mov	r5, r8
    2f16:	b5e0      	push	{r5, r6, r7, lr}
    2f18:	0244      	lsls	r4, r0, #9
    2f1a:	0043      	lsls	r3, r0, #1
    2f1c:	0fc6      	lsrs	r6, r0, #31
    2f1e:	b083      	sub	sp, #12
    2f20:	1c0f      	adds	r7, r1, #0
    2f22:	0a64      	lsrs	r4, r4, #9
    2f24:	0e1b      	lsrs	r3, r3, #24
    2f26:	46b2      	mov	sl, r6
    2f28:	d053      	beq.n	2fd2 <__aeabi_fdiv+0xc6>
    2f2a:	2bff      	cmp	r3, #255	; 0xff
    2f2c:	d027      	beq.n	2f7e <__aeabi_fdiv+0x72>
    2f2e:	2280      	movs	r2, #128	; 0x80
    2f30:	00e4      	lsls	r4, r4, #3
    2f32:	04d2      	lsls	r2, r2, #19
    2f34:	4314      	orrs	r4, r2
    2f36:	227f      	movs	r2, #127	; 0x7f
    2f38:	4252      	negs	r2, r2
    2f3a:	4690      	mov	r8, r2
    2f3c:	4498      	add	r8, r3
    2f3e:	2300      	movs	r3, #0
    2f40:	4699      	mov	r9, r3
    2f42:	469b      	mov	fp, r3
    2f44:	027d      	lsls	r5, r7, #9
    2f46:	0078      	lsls	r0, r7, #1
    2f48:	0ffb      	lsrs	r3, r7, #31
    2f4a:	0a6d      	lsrs	r5, r5, #9
    2f4c:	0e00      	lsrs	r0, r0, #24
    2f4e:	9300      	str	r3, [sp, #0]
    2f50:	d024      	beq.n	2f9c <__aeabi_fdiv+0x90>
    2f52:	28ff      	cmp	r0, #255	; 0xff
    2f54:	d046      	beq.n	2fe4 <__aeabi_fdiv+0xd8>
    2f56:	2380      	movs	r3, #128	; 0x80
    2f58:	2100      	movs	r1, #0
    2f5a:	00ed      	lsls	r5, r5, #3
    2f5c:	04db      	lsls	r3, r3, #19
    2f5e:	431d      	orrs	r5, r3
    2f60:	387f      	subs	r0, #127	; 0x7f
    2f62:	4647      	mov	r7, r8
    2f64:	1a38      	subs	r0, r7, r0
    2f66:	464f      	mov	r7, r9
    2f68:	430f      	orrs	r7, r1
    2f6a:	00bf      	lsls	r7, r7, #2
    2f6c:	46b9      	mov	r9, r7
    2f6e:	0033      	movs	r3, r6
    2f70:	9a00      	ldr	r2, [sp, #0]
    2f72:	4f87      	ldr	r7, [pc, #540]	; (3190 <__aeabi_fdiv+0x284>)
    2f74:	4053      	eors	r3, r2
    2f76:	464a      	mov	r2, r9
    2f78:	58ba      	ldr	r2, [r7, r2]
    2f7a:	9301      	str	r3, [sp, #4]
    2f7c:	4697      	mov	pc, r2
    2f7e:	2c00      	cmp	r4, #0
    2f80:	d14e      	bne.n	3020 <__aeabi_fdiv+0x114>
    2f82:	2308      	movs	r3, #8
    2f84:	4699      	mov	r9, r3
    2f86:	33f7      	adds	r3, #247	; 0xf7
    2f88:	4698      	mov	r8, r3
    2f8a:	3bfd      	subs	r3, #253	; 0xfd
    2f8c:	469b      	mov	fp, r3
    2f8e:	027d      	lsls	r5, r7, #9
    2f90:	0078      	lsls	r0, r7, #1
    2f92:	0ffb      	lsrs	r3, r7, #31
    2f94:	0a6d      	lsrs	r5, r5, #9
    2f96:	0e00      	lsrs	r0, r0, #24
    2f98:	9300      	str	r3, [sp, #0]
    2f9a:	d1da      	bne.n	2f52 <__aeabi_fdiv+0x46>
    2f9c:	2d00      	cmp	r5, #0
    2f9e:	d126      	bne.n	2fee <__aeabi_fdiv+0xe2>
    2fa0:	2000      	movs	r0, #0
    2fa2:	2101      	movs	r1, #1
    2fa4:	0033      	movs	r3, r6
    2fa6:	9a00      	ldr	r2, [sp, #0]
    2fa8:	4f7a      	ldr	r7, [pc, #488]	; (3194 <__aeabi_fdiv+0x288>)
    2faa:	4053      	eors	r3, r2
    2fac:	4642      	mov	r2, r8
    2fae:	1a10      	subs	r0, r2, r0
    2fb0:	464a      	mov	r2, r9
    2fb2:	430a      	orrs	r2, r1
    2fb4:	0092      	lsls	r2, r2, #2
    2fb6:	58ba      	ldr	r2, [r7, r2]
    2fb8:	001d      	movs	r5, r3
    2fba:	4697      	mov	pc, r2
    2fbc:	9b00      	ldr	r3, [sp, #0]
    2fbe:	002c      	movs	r4, r5
    2fc0:	469a      	mov	sl, r3
    2fc2:	468b      	mov	fp, r1
    2fc4:	465b      	mov	r3, fp
    2fc6:	2b02      	cmp	r3, #2
    2fc8:	d131      	bne.n	302e <__aeabi_fdiv+0x122>
    2fca:	4653      	mov	r3, sl
    2fcc:	21ff      	movs	r1, #255	; 0xff
    2fce:	2400      	movs	r4, #0
    2fd0:	e038      	b.n	3044 <__aeabi_fdiv+0x138>
    2fd2:	2c00      	cmp	r4, #0
    2fd4:	d117      	bne.n	3006 <__aeabi_fdiv+0xfa>
    2fd6:	2304      	movs	r3, #4
    2fd8:	4699      	mov	r9, r3
    2fda:	2300      	movs	r3, #0
    2fdc:	4698      	mov	r8, r3
    2fde:	3301      	adds	r3, #1
    2fe0:	469b      	mov	fp, r3
    2fe2:	e7af      	b.n	2f44 <__aeabi_fdiv+0x38>
    2fe4:	20ff      	movs	r0, #255	; 0xff
    2fe6:	2d00      	cmp	r5, #0
    2fe8:	d10b      	bne.n	3002 <__aeabi_fdiv+0xf6>
    2fea:	2102      	movs	r1, #2
    2fec:	e7da      	b.n	2fa4 <__aeabi_fdiv+0x98>
    2fee:	0028      	movs	r0, r5
    2ff0:	f001 fb14 	bl	461c <__clzsi2>
    2ff4:	1f43      	subs	r3, r0, #5
    2ff6:	409d      	lsls	r5, r3
    2ff8:	2376      	movs	r3, #118	; 0x76
    2ffa:	425b      	negs	r3, r3
    2ffc:	1a18      	subs	r0, r3, r0
    2ffe:	2100      	movs	r1, #0
    3000:	e7af      	b.n	2f62 <__aeabi_fdiv+0x56>
    3002:	2103      	movs	r1, #3
    3004:	e7ad      	b.n	2f62 <__aeabi_fdiv+0x56>
    3006:	0020      	movs	r0, r4
    3008:	f001 fb08 	bl	461c <__clzsi2>
    300c:	1f43      	subs	r3, r0, #5
    300e:	409c      	lsls	r4, r3
    3010:	2376      	movs	r3, #118	; 0x76
    3012:	425b      	negs	r3, r3
    3014:	1a1b      	subs	r3, r3, r0
    3016:	4698      	mov	r8, r3
    3018:	2300      	movs	r3, #0
    301a:	4699      	mov	r9, r3
    301c:	469b      	mov	fp, r3
    301e:	e791      	b.n	2f44 <__aeabi_fdiv+0x38>
    3020:	230c      	movs	r3, #12
    3022:	4699      	mov	r9, r3
    3024:	33f3      	adds	r3, #243	; 0xf3
    3026:	4698      	mov	r8, r3
    3028:	3bfc      	subs	r3, #252	; 0xfc
    302a:	469b      	mov	fp, r3
    302c:	e78a      	b.n	2f44 <__aeabi_fdiv+0x38>
    302e:	2b03      	cmp	r3, #3
    3030:	d100      	bne.n	3034 <__aeabi_fdiv+0x128>
    3032:	e0a5      	b.n	3180 <__aeabi_fdiv+0x274>
    3034:	4655      	mov	r5, sl
    3036:	2b01      	cmp	r3, #1
    3038:	d000      	beq.n	303c <__aeabi_fdiv+0x130>
    303a:	e081      	b.n	3140 <__aeabi_fdiv+0x234>
    303c:	2301      	movs	r3, #1
    303e:	2100      	movs	r1, #0
    3040:	2400      	movs	r4, #0
    3042:	402b      	ands	r3, r5
    3044:	0264      	lsls	r4, r4, #9
    3046:	05c9      	lsls	r1, r1, #23
    3048:	0a60      	lsrs	r0, r4, #9
    304a:	07db      	lsls	r3, r3, #31
    304c:	4308      	orrs	r0, r1
    304e:	4318      	orrs	r0, r3
    3050:	b003      	add	sp, #12
    3052:	bc3c      	pop	{r2, r3, r4, r5}
    3054:	4690      	mov	r8, r2
    3056:	4699      	mov	r9, r3
    3058:	46a2      	mov	sl, r4
    305a:	46ab      	mov	fp, r5
    305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    305e:	2480      	movs	r4, #128	; 0x80
    3060:	2300      	movs	r3, #0
    3062:	03e4      	lsls	r4, r4, #15
    3064:	21ff      	movs	r1, #255	; 0xff
    3066:	e7ed      	b.n	3044 <__aeabi_fdiv+0x138>
    3068:	21ff      	movs	r1, #255	; 0xff
    306a:	2400      	movs	r4, #0
    306c:	e7ea      	b.n	3044 <__aeabi_fdiv+0x138>
    306e:	2301      	movs	r3, #1
    3070:	1a59      	subs	r1, r3, r1
    3072:	291b      	cmp	r1, #27
    3074:	dd66      	ble.n	3144 <__aeabi_fdiv+0x238>
    3076:	9a01      	ldr	r2, [sp, #4]
    3078:	4013      	ands	r3, r2
    307a:	2100      	movs	r1, #0
    307c:	2400      	movs	r4, #0
    307e:	e7e1      	b.n	3044 <__aeabi_fdiv+0x138>
    3080:	2380      	movs	r3, #128	; 0x80
    3082:	03db      	lsls	r3, r3, #15
    3084:	421c      	tst	r4, r3
    3086:	d038      	beq.n	30fa <__aeabi_fdiv+0x1ee>
    3088:	421d      	tst	r5, r3
    308a:	d051      	beq.n	3130 <__aeabi_fdiv+0x224>
    308c:	431c      	orrs	r4, r3
    308e:	0264      	lsls	r4, r4, #9
    3090:	0a64      	lsrs	r4, r4, #9
    3092:	0033      	movs	r3, r6
    3094:	21ff      	movs	r1, #255	; 0xff
    3096:	e7d5      	b.n	3044 <__aeabi_fdiv+0x138>
    3098:	0163      	lsls	r3, r4, #5
    309a:	016c      	lsls	r4, r5, #5
    309c:	42a3      	cmp	r3, r4
    309e:	d23b      	bcs.n	3118 <__aeabi_fdiv+0x20c>
    30a0:	261b      	movs	r6, #27
    30a2:	2100      	movs	r1, #0
    30a4:	3801      	subs	r0, #1
    30a6:	2501      	movs	r5, #1
    30a8:	001f      	movs	r7, r3
    30aa:	0049      	lsls	r1, r1, #1
    30ac:	005b      	lsls	r3, r3, #1
    30ae:	2f00      	cmp	r7, #0
    30b0:	db01      	blt.n	30b6 <__aeabi_fdiv+0x1aa>
    30b2:	429c      	cmp	r4, r3
    30b4:	d801      	bhi.n	30ba <__aeabi_fdiv+0x1ae>
    30b6:	1b1b      	subs	r3, r3, r4
    30b8:	4329      	orrs	r1, r5
    30ba:	3e01      	subs	r6, #1
    30bc:	2e00      	cmp	r6, #0
    30be:	d1f3      	bne.n	30a8 <__aeabi_fdiv+0x19c>
    30c0:	001c      	movs	r4, r3
    30c2:	1e63      	subs	r3, r4, #1
    30c4:	419c      	sbcs	r4, r3
    30c6:	430c      	orrs	r4, r1
    30c8:	0001      	movs	r1, r0
    30ca:	317f      	adds	r1, #127	; 0x7f
    30cc:	2900      	cmp	r1, #0
    30ce:	ddce      	ble.n	306e <__aeabi_fdiv+0x162>
    30d0:	0763      	lsls	r3, r4, #29
    30d2:	d004      	beq.n	30de <__aeabi_fdiv+0x1d2>
    30d4:	230f      	movs	r3, #15
    30d6:	4023      	ands	r3, r4
    30d8:	2b04      	cmp	r3, #4
    30da:	d000      	beq.n	30de <__aeabi_fdiv+0x1d2>
    30dc:	3404      	adds	r4, #4
    30de:	0123      	lsls	r3, r4, #4
    30e0:	d503      	bpl.n	30ea <__aeabi_fdiv+0x1de>
    30e2:	0001      	movs	r1, r0
    30e4:	4b2c      	ldr	r3, [pc, #176]	; (3198 <__aeabi_fdiv+0x28c>)
    30e6:	3180      	adds	r1, #128	; 0x80
    30e8:	401c      	ands	r4, r3
    30ea:	29fe      	cmp	r1, #254	; 0xfe
    30ec:	dd0d      	ble.n	310a <__aeabi_fdiv+0x1fe>
    30ee:	2301      	movs	r3, #1
    30f0:	9a01      	ldr	r2, [sp, #4]
    30f2:	21ff      	movs	r1, #255	; 0xff
    30f4:	4013      	ands	r3, r2
    30f6:	2400      	movs	r4, #0
    30f8:	e7a4      	b.n	3044 <__aeabi_fdiv+0x138>
    30fa:	2380      	movs	r3, #128	; 0x80
    30fc:	03db      	lsls	r3, r3, #15
    30fe:	431c      	orrs	r4, r3
    3100:	0264      	lsls	r4, r4, #9
    3102:	0a64      	lsrs	r4, r4, #9
    3104:	0033      	movs	r3, r6
    3106:	21ff      	movs	r1, #255	; 0xff
    3108:	e79c      	b.n	3044 <__aeabi_fdiv+0x138>
    310a:	2301      	movs	r3, #1
    310c:	9a01      	ldr	r2, [sp, #4]
    310e:	01a4      	lsls	r4, r4, #6
    3110:	0a64      	lsrs	r4, r4, #9
    3112:	b2c9      	uxtb	r1, r1
    3114:	4013      	ands	r3, r2
    3116:	e795      	b.n	3044 <__aeabi_fdiv+0x138>
    3118:	1b1b      	subs	r3, r3, r4
    311a:	261a      	movs	r6, #26
    311c:	2101      	movs	r1, #1
    311e:	e7c2      	b.n	30a6 <__aeabi_fdiv+0x19a>
    3120:	9b00      	ldr	r3, [sp, #0]
    3122:	468b      	mov	fp, r1
    3124:	469a      	mov	sl, r3
    3126:	2400      	movs	r4, #0
    3128:	e74c      	b.n	2fc4 <__aeabi_fdiv+0xb8>
    312a:	0263      	lsls	r3, r4, #9
    312c:	d5e5      	bpl.n	30fa <__aeabi_fdiv+0x1ee>
    312e:	2500      	movs	r5, #0
    3130:	2480      	movs	r4, #128	; 0x80
    3132:	03e4      	lsls	r4, r4, #15
    3134:	432c      	orrs	r4, r5
    3136:	0264      	lsls	r4, r4, #9
    3138:	0a64      	lsrs	r4, r4, #9
    313a:	9b00      	ldr	r3, [sp, #0]
    313c:	21ff      	movs	r1, #255	; 0xff
    313e:	e781      	b.n	3044 <__aeabi_fdiv+0x138>
    3140:	9501      	str	r5, [sp, #4]
    3142:	e7c1      	b.n	30c8 <__aeabi_fdiv+0x1bc>
    3144:	0023      	movs	r3, r4
    3146:	2020      	movs	r0, #32
    3148:	40cb      	lsrs	r3, r1
    314a:	1a41      	subs	r1, r0, r1
    314c:	408c      	lsls	r4, r1
    314e:	1e61      	subs	r1, r4, #1
    3150:	418c      	sbcs	r4, r1
    3152:	431c      	orrs	r4, r3
    3154:	0763      	lsls	r3, r4, #29
    3156:	d004      	beq.n	3162 <__aeabi_fdiv+0x256>
    3158:	230f      	movs	r3, #15
    315a:	4023      	ands	r3, r4
    315c:	2b04      	cmp	r3, #4
    315e:	d000      	beq.n	3162 <__aeabi_fdiv+0x256>
    3160:	3404      	adds	r4, #4
    3162:	0163      	lsls	r3, r4, #5
    3164:	d505      	bpl.n	3172 <__aeabi_fdiv+0x266>
    3166:	2301      	movs	r3, #1
    3168:	9a01      	ldr	r2, [sp, #4]
    316a:	2101      	movs	r1, #1
    316c:	4013      	ands	r3, r2
    316e:	2400      	movs	r4, #0
    3170:	e768      	b.n	3044 <__aeabi_fdiv+0x138>
    3172:	2301      	movs	r3, #1
    3174:	9a01      	ldr	r2, [sp, #4]
    3176:	01a4      	lsls	r4, r4, #6
    3178:	0a64      	lsrs	r4, r4, #9
    317a:	4013      	ands	r3, r2
    317c:	2100      	movs	r1, #0
    317e:	e761      	b.n	3044 <__aeabi_fdiv+0x138>
    3180:	2380      	movs	r3, #128	; 0x80
    3182:	03db      	lsls	r3, r3, #15
    3184:	431c      	orrs	r4, r3
    3186:	0264      	lsls	r4, r4, #9
    3188:	0a64      	lsrs	r4, r4, #9
    318a:	4653      	mov	r3, sl
    318c:	21ff      	movs	r1, #255	; 0xff
    318e:	e759      	b.n	3044 <__aeabi_fdiv+0x138>
    3190:	0000478c 	.word	0x0000478c
    3194:	000047cc 	.word	0x000047cc
    3198:	f7ffffff 	.word	0xf7ffffff

0000319c <__eqsf2>:
    319c:	b570      	push	{r4, r5, r6, lr}
    319e:	0042      	lsls	r2, r0, #1
    31a0:	0245      	lsls	r5, r0, #9
    31a2:	024e      	lsls	r6, r1, #9
    31a4:	004c      	lsls	r4, r1, #1
    31a6:	0fc3      	lsrs	r3, r0, #31
    31a8:	0a6d      	lsrs	r5, r5, #9
    31aa:	0e12      	lsrs	r2, r2, #24
    31ac:	0a76      	lsrs	r6, r6, #9
    31ae:	0e24      	lsrs	r4, r4, #24
    31b0:	0fc9      	lsrs	r1, r1, #31
    31b2:	2001      	movs	r0, #1
    31b4:	2aff      	cmp	r2, #255	; 0xff
    31b6:	d006      	beq.n	31c6 <__eqsf2+0x2a>
    31b8:	2cff      	cmp	r4, #255	; 0xff
    31ba:	d003      	beq.n	31c4 <__eqsf2+0x28>
    31bc:	42a2      	cmp	r2, r4
    31be:	d101      	bne.n	31c4 <__eqsf2+0x28>
    31c0:	42b5      	cmp	r5, r6
    31c2:	d006      	beq.n	31d2 <__eqsf2+0x36>
    31c4:	bd70      	pop	{r4, r5, r6, pc}
    31c6:	2d00      	cmp	r5, #0
    31c8:	d1fc      	bne.n	31c4 <__eqsf2+0x28>
    31ca:	2cff      	cmp	r4, #255	; 0xff
    31cc:	d1fa      	bne.n	31c4 <__eqsf2+0x28>
    31ce:	2e00      	cmp	r6, #0
    31d0:	d1f8      	bne.n	31c4 <__eqsf2+0x28>
    31d2:	428b      	cmp	r3, r1
    31d4:	d006      	beq.n	31e4 <__eqsf2+0x48>
    31d6:	2001      	movs	r0, #1
    31d8:	2a00      	cmp	r2, #0
    31da:	d1f3      	bne.n	31c4 <__eqsf2+0x28>
    31dc:	0028      	movs	r0, r5
    31de:	1e45      	subs	r5, r0, #1
    31e0:	41a8      	sbcs	r0, r5
    31e2:	e7ef      	b.n	31c4 <__eqsf2+0x28>
    31e4:	2000      	movs	r0, #0
    31e6:	e7ed      	b.n	31c4 <__eqsf2+0x28>

000031e8 <__gesf2>:
    31e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ea:	0042      	lsls	r2, r0, #1
    31ec:	0245      	lsls	r5, r0, #9
    31ee:	024c      	lsls	r4, r1, #9
    31f0:	0fc3      	lsrs	r3, r0, #31
    31f2:	0048      	lsls	r0, r1, #1
    31f4:	0a6d      	lsrs	r5, r5, #9
    31f6:	0e12      	lsrs	r2, r2, #24
    31f8:	0a64      	lsrs	r4, r4, #9
    31fa:	0e00      	lsrs	r0, r0, #24
    31fc:	0fc9      	lsrs	r1, r1, #31
    31fe:	2aff      	cmp	r2, #255	; 0xff
    3200:	d01e      	beq.n	3240 <__gesf2+0x58>
    3202:	28ff      	cmp	r0, #255	; 0xff
    3204:	d021      	beq.n	324a <__gesf2+0x62>
    3206:	2a00      	cmp	r2, #0
    3208:	d10a      	bne.n	3220 <__gesf2+0x38>
    320a:	426e      	negs	r6, r5
    320c:	416e      	adcs	r6, r5
    320e:	b2f6      	uxtb	r6, r6
    3210:	2800      	cmp	r0, #0
    3212:	d10f      	bne.n	3234 <__gesf2+0x4c>
    3214:	2c00      	cmp	r4, #0
    3216:	d10d      	bne.n	3234 <__gesf2+0x4c>
    3218:	2000      	movs	r0, #0
    321a:	2d00      	cmp	r5, #0
    321c:	d009      	beq.n	3232 <__gesf2+0x4a>
    321e:	e005      	b.n	322c <__gesf2+0x44>
    3220:	2800      	cmp	r0, #0
    3222:	d101      	bne.n	3228 <__gesf2+0x40>
    3224:	2c00      	cmp	r4, #0
    3226:	d001      	beq.n	322c <__gesf2+0x44>
    3228:	428b      	cmp	r3, r1
    322a:	d011      	beq.n	3250 <__gesf2+0x68>
    322c:	2101      	movs	r1, #1
    322e:	4258      	negs	r0, r3
    3230:	4308      	orrs	r0, r1
    3232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3234:	2e00      	cmp	r6, #0
    3236:	d0f7      	beq.n	3228 <__gesf2+0x40>
    3238:	2001      	movs	r0, #1
    323a:	3901      	subs	r1, #1
    323c:	4308      	orrs	r0, r1
    323e:	e7f8      	b.n	3232 <__gesf2+0x4a>
    3240:	2d00      	cmp	r5, #0
    3242:	d0de      	beq.n	3202 <__gesf2+0x1a>
    3244:	2002      	movs	r0, #2
    3246:	4240      	negs	r0, r0
    3248:	e7f3      	b.n	3232 <__gesf2+0x4a>
    324a:	2c00      	cmp	r4, #0
    324c:	d0db      	beq.n	3206 <__gesf2+0x1e>
    324e:	e7f9      	b.n	3244 <__gesf2+0x5c>
    3250:	4282      	cmp	r2, r0
    3252:	dceb      	bgt.n	322c <__gesf2+0x44>
    3254:	db04      	blt.n	3260 <__gesf2+0x78>
    3256:	42a5      	cmp	r5, r4
    3258:	d8e8      	bhi.n	322c <__gesf2+0x44>
    325a:	2000      	movs	r0, #0
    325c:	42a5      	cmp	r5, r4
    325e:	d2e8      	bcs.n	3232 <__gesf2+0x4a>
    3260:	2101      	movs	r1, #1
    3262:	1e58      	subs	r0, r3, #1
    3264:	4308      	orrs	r0, r1
    3266:	e7e4      	b.n	3232 <__gesf2+0x4a>

00003268 <__lesf2>:
    3268:	b5f0      	push	{r4, r5, r6, r7, lr}
    326a:	0042      	lsls	r2, r0, #1
    326c:	024d      	lsls	r5, r1, #9
    326e:	004c      	lsls	r4, r1, #1
    3270:	0246      	lsls	r6, r0, #9
    3272:	0a76      	lsrs	r6, r6, #9
    3274:	0e12      	lsrs	r2, r2, #24
    3276:	0fc3      	lsrs	r3, r0, #31
    3278:	0a6d      	lsrs	r5, r5, #9
    327a:	0e24      	lsrs	r4, r4, #24
    327c:	0fc9      	lsrs	r1, r1, #31
    327e:	2aff      	cmp	r2, #255	; 0xff
    3280:	d016      	beq.n	32b0 <__lesf2+0x48>
    3282:	2cff      	cmp	r4, #255	; 0xff
    3284:	d018      	beq.n	32b8 <__lesf2+0x50>
    3286:	2a00      	cmp	r2, #0
    3288:	d10a      	bne.n	32a0 <__lesf2+0x38>
    328a:	4270      	negs	r0, r6
    328c:	4170      	adcs	r0, r6
    328e:	b2c0      	uxtb	r0, r0
    3290:	2c00      	cmp	r4, #0
    3292:	d015      	beq.n	32c0 <__lesf2+0x58>
    3294:	2800      	cmp	r0, #0
    3296:	d005      	beq.n	32a4 <__lesf2+0x3c>
    3298:	2001      	movs	r0, #1
    329a:	3901      	subs	r1, #1
    329c:	4308      	orrs	r0, r1
    329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a0:	2c00      	cmp	r4, #0
    32a2:	d013      	beq.n	32cc <__lesf2+0x64>
    32a4:	4299      	cmp	r1, r3
    32a6:	d014      	beq.n	32d2 <__lesf2+0x6a>
    32a8:	2001      	movs	r0, #1
    32aa:	425b      	negs	r3, r3
    32ac:	4318      	orrs	r0, r3
    32ae:	e7f6      	b.n	329e <__lesf2+0x36>
    32b0:	2002      	movs	r0, #2
    32b2:	2e00      	cmp	r6, #0
    32b4:	d1f3      	bne.n	329e <__lesf2+0x36>
    32b6:	e7e4      	b.n	3282 <__lesf2+0x1a>
    32b8:	2002      	movs	r0, #2
    32ba:	2d00      	cmp	r5, #0
    32bc:	d1ef      	bne.n	329e <__lesf2+0x36>
    32be:	e7e2      	b.n	3286 <__lesf2+0x1e>
    32c0:	2d00      	cmp	r5, #0
    32c2:	d1e7      	bne.n	3294 <__lesf2+0x2c>
    32c4:	2000      	movs	r0, #0
    32c6:	2e00      	cmp	r6, #0
    32c8:	d0e9      	beq.n	329e <__lesf2+0x36>
    32ca:	e7ed      	b.n	32a8 <__lesf2+0x40>
    32cc:	2d00      	cmp	r5, #0
    32ce:	d1e9      	bne.n	32a4 <__lesf2+0x3c>
    32d0:	e7ea      	b.n	32a8 <__lesf2+0x40>
    32d2:	42a2      	cmp	r2, r4
    32d4:	dc06      	bgt.n	32e4 <__lesf2+0x7c>
    32d6:	dbdf      	blt.n	3298 <__lesf2+0x30>
    32d8:	42ae      	cmp	r6, r5
    32da:	d803      	bhi.n	32e4 <__lesf2+0x7c>
    32dc:	2000      	movs	r0, #0
    32de:	42ae      	cmp	r6, r5
    32e0:	d3da      	bcc.n	3298 <__lesf2+0x30>
    32e2:	e7dc      	b.n	329e <__lesf2+0x36>
    32e4:	2001      	movs	r0, #1
    32e6:	4249      	negs	r1, r1
    32e8:	4308      	orrs	r0, r1
    32ea:	e7d8      	b.n	329e <__lesf2+0x36>

000032ec <__aeabi_fmul>:
    32ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ee:	4657      	mov	r7, sl
    32f0:	464e      	mov	r6, r9
    32f2:	4645      	mov	r5, r8
    32f4:	46de      	mov	lr, fp
    32f6:	b5e0      	push	{r5, r6, r7, lr}
    32f8:	0247      	lsls	r7, r0, #9
    32fa:	0046      	lsls	r6, r0, #1
    32fc:	4688      	mov	r8, r1
    32fe:	0a7f      	lsrs	r7, r7, #9
    3300:	0e36      	lsrs	r6, r6, #24
    3302:	0fc4      	lsrs	r4, r0, #31
    3304:	2e00      	cmp	r6, #0
    3306:	d047      	beq.n	3398 <__aeabi_fmul+0xac>
    3308:	2eff      	cmp	r6, #255	; 0xff
    330a:	d024      	beq.n	3356 <__aeabi_fmul+0x6a>
    330c:	00fb      	lsls	r3, r7, #3
    330e:	2780      	movs	r7, #128	; 0x80
    3310:	04ff      	lsls	r7, r7, #19
    3312:	431f      	orrs	r7, r3
    3314:	2300      	movs	r3, #0
    3316:	4699      	mov	r9, r3
    3318:	469a      	mov	sl, r3
    331a:	3e7f      	subs	r6, #127	; 0x7f
    331c:	4643      	mov	r3, r8
    331e:	025d      	lsls	r5, r3, #9
    3320:	0058      	lsls	r0, r3, #1
    3322:	0fdb      	lsrs	r3, r3, #31
    3324:	0a6d      	lsrs	r5, r5, #9
    3326:	0e00      	lsrs	r0, r0, #24
    3328:	4698      	mov	r8, r3
    332a:	d043      	beq.n	33b4 <__aeabi_fmul+0xc8>
    332c:	28ff      	cmp	r0, #255	; 0xff
    332e:	d03b      	beq.n	33a8 <__aeabi_fmul+0xbc>
    3330:	00eb      	lsls	r3, r5, #3
    3332:	2580      	movs	r5, #128	; 0x80
    3334:	2200      	movs	r2, #0
    3336:	04ed      	lsls	r5, r5, #19
    3338:	431d      	orrs	r5, r3
    333a:	387f      	subs	r0, #127	; 0x7f
    333c:	1836      	adds	r6, r6, r0
    333e:	1c73      	adds	r3, r6, #1
    3340:	4641      	mov	r1, r8
    3342:	469b      	mov	fp, r3
    3344:	464b      	mov	r3, r9
    3346:	4061      	eors	r1, r4
    3348:	4313      	orrs	r3, r2
    334a:	2b0f      	cmp	r3, #15
    334c:	d864      	bhi.n	3418 <__aeabi_fmul+0x12c>
    334e:	4875      	ldr	r0, [pc, #468]	; (3524 <__aeabi_fmul+0x238>)
    3350:	009b      	lsls	r3, r3, #2
    3352:	58c3      	ldr	r3, [r0, r3]
    3354:	469f      	mov	pc, r3
    3356:	2f00      	cmp	r7, #0
    3358:	d142      	bne.n	33e0 <__aeabi_fmul+0xf4>
    335a:	2308      	movs	r3, #8
    335c:	4699      	mov	r9, r3
    335e:	3b06      	subs	r3, #6
    3360:	26ff      	movs	r6, #255	; 0xff
    3362:	469a      	mov	sl, r3
    3364:	e7da      	b.n	331c <__aeabi_fmul+0x30>
    3366:	4641      	mov	r1, r8
    3368:	2a02      	cmp	r2, #2
    336a:	d028      	beq.n	33be <__aeabi_fmul+0xd2>
    336c:	2a03      	cmp	r2, #3
    336e:	d100      	bne.n	3372 <__aeabi_fmul+0x86>
    3370:	e0ce      	b.n	3510 <__aeabi_fmul+0x224>
    3372:	2a01      	cmp	r2, #1
    3374:	d000      	beq.n	3378 <__aeabi_fmul+0x8c>
    3376:	e0ac      	b.n	34d2 <__aeabi_fmul+0x1e6>
    3378:	4011      	ands	r1, r2
    337a:	2000      	movs	r0, #0
    337c:	2200      	movs	r2, #0
    337e:	b2cc      	uxtb	r4, r1
    3380:	0240      	lsls	r0, r0, #9
    3382:	05d2      	lsls	r2, r2, #23
    3384:	0a40      	lsrs	r0, r0, #9
    3386:	07e4      	lsls	r4, r4, #31
    3388:	4310      	orrs	r0, r2
    338a:	4320      	orrs	r0, r4
    338c:	bc3c      	pop	{r2, r3, r4, r5}
    338e:	4690      	mov	r8, r2
    3390:	4699      	mov	r9, r3
    3392:	46a2      	mov	sl, r4
    3394:	46ab      	mov	fp, r5
    3396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3398:	2f00      	cmp	r7, #0
    339a:	d115      	bne.n	33c8 <__aeabi_fmul+0xdc>
    339c:	2304      	movs	r3, #4
    339e:	4699      	mov	r9, r3
    33a0:	3b03      	subs	r3, #3
    33a2:	2600      	movs	r6, #0
    33a4:	469a      	mov	sl, r3
    33a6:	e7b9      	b.n	331c <__aeabi_fmul+0x30>
    33a8:	20ff      	movs	r0, #255	; 0xff
    33aa:	2202      	movs	r2, #2
    33ac:	2d00      	cmp	r5, #0
    33ae:	d0c5      	beq.n	333c <__aeabi_fmul+0x50>
    33b0:	2203      	movs	r2, #3
    33b2:	e7c3      	b.n	333c <__aeabi_fmul+0x50>
    33b4:	2d00      	cmp	r5, #0
    33b6:	d119      	bne.n	33ec <__aeabi_fmul+0x100>
    33b8:	2000      	movs	r0, #0
    33ba:	2201      	movs	r2, #1
    33bc:	e7be      	b.n	333c <__aeabi_fmul+0x50>
    33be:	2401      	movs	r4, #1
    33c0:	22ff      	movs	r2, #255	; 0xff
    33c2:	400c      	ands	r4, r1
    33c4:	2000      	movs	r0, #0
    33c6:	e7db      	b.n	3380 <__aeabi_fmul+0x94>
    33c8:	0038      	movs	r0, r7
    33ca:	f001 f927 	bl	461c <__clzsi2>
    33ce:	2676      	movs	r6, #118	; 0x76
    33d0:	1f43      	subs	r3, r0, #5
    33d2:	409f      	lsls	r7, r3
    33d4:	2300      	movs	r3, #0
    33d6:	4276      	negs	r6, r6
    33d8:	1a36      	subs	r6, r6, r0
    33da:	4699      	mov	r9, r3
    33dc:	469a      	mov	sl, r3
    33de:	e79d      	b.n	331c <__aeabi_fmul+0x30>
    33e0:	230c      	movs	r3, #12
    33e2:	4699      	mov	r9, r3
    33e4:	3b09      	subs	r3, #9
    33e6:	26ff      	movs	r6, #255	; 0xff
    33e8:	469a      	mov	sl, r3
    33ea:	e797      	b.n	331c <__aeabi_fmul+0x30>
    33ec:	0028      	movs	r0, r5
    33ee:	f001 f915 	bl	461c <__clzsi2>
    33f2:	1f43      	subs	r3, r0, #5
    33f4:	409d      	lsls	r5, r3
    33f6:	2376      	movs	r3, #118	; 0x76
    33f8:	425b      	negs	r3, r3
    33fa:	1a18      	subs	r0, r3, r0
    33fc:	2200      	movs	r2, #0
    33fe:	e79d      	b.n	333c <__aeabi_fmul+0x50>
    3400:	2080      	movs	r0, #128	; 0x80
    3402:	2400      	movs	r4, #0
    3404:	03c0      	lsls	r0, r0, #15
    3406:	22ff      	movs	r2, #255	; 0xff
    3408:	e7ba      	b.n	3380 <__aeabi_fmul+0x94>
    340a:	003d      	movs	r5, r7
    340c:	4652      	mov	r2, sl
    340e:	e7ab      	b.n	3368 <__aeabi_fmul+0x7c>
    3410:	003d      	movs	r5, r7
    3412:	0021      	movs	r1, r4
    3414:	4652      	mov	r2, sl
    3416:	e7a7      	b.n	3368 <__aeabi_fmul+0x7c>
    3418:	0c3b      	lsrs	r3, r7, #16
    341a:	469c      	mov	ip, r3
    341c:	042a      	lsls	r2, r5, #16
    341e:	0c12      	lsrs	r2, r2, #16
    3420:	0c2b      	lsrs	r3, r5, #16
    3422:	0014      	movs	r4, r2
    3424:	4660      	mov	r0, ip
    3426:	4665      	mov	r5, ip
    3428:	043f      	lsls	r7, r7, #16
    342a:	0c3f      	lsrs	r7, r7, #16
    342c:	437c      	muls	r4, r7
    342e:	4342      	muls	r2, r0
    3430:	435d      	muls	r5, r3
    3432:	437b      	muls	r3, r7
    3434:	0c27      	lsrs	r7, r4, #16
    3436:	189b      	adds	r3, r3, r2
    3438:	18ff      	adds	r7, r7, r3
    343a:	42ba      	cmp	r2, r7
    343c:	d903      	bls.n	3446 <__aeabi_fmul+0x15a>
    343e:	2380      	movs	r3, #128	; 0x80
    3440:	025b      	lsls	r3, r3, #9
    3442:	469c      	mov	ip, r3
    3444:	4465      	add	r5, ip
    3446:	0424      	lsls	r4, r4, #16
    3448:	043a      	lsls	r2, r7, #16
    344a:	0c24      	lsrs	r4, r4, #16
    344c:	1912      	adds	r2, r2, r4
    344e:	0193      	lsls	r3, r2, #6
    3450:	1e5c      	subs	r4, r3, #1
    3452:	41a3      	sbcs	r3, r4
    3454:	0c3f      	lsrs	r7, r7, #16
    3456:	0e92      	lsrs	r2, r2, #26
    3458:	197d      	adds	r5, r7, r5
    345a:	431a      	orrs	r2, r3
    345c:	01ad      	lsls	r5, r5, #6
    345e:	4315      	orrs	r5, r2
    3460:	012b      	lsls	r3, r5, #4
    3462:	d504      	bpl.n	346e <__aeabi_fmul+0x182>
    3464:	2301      	movs	r3, #1
    3466:	465e      	mov	r6, fp
    3468:	086a      	lsrs	r2, r5, #1
    346a:	401d      	ands	r5, r3
    346c:	4315      	orrs	r5, r2
    346e:	0032      	movs	r2, r6
    3470:	327f      	adds	r2, #127	; 0x7f
    3472:	2a00      	cmp	r2, #0
    3474:	dd25      	ble.n	34c2 <__aeabi_fmul+0x1d6>
    3476:	076b      	lsls	r3, r5, #29
    3478:	d004      	beq.n	3484 <__aeabi_fmul+0x198>
    347a:	230f      	movs	r3, #15
    347c:	402b      	ands	r3, r5
    347e:	2b04      	cmp	r3, #4
    3480:	d000      	beq.n	3484 <__aeabi_fmul+0x198>
    3482:	3504      	adds	r5, #4
    3484:	012b      	lsls	r3, r5, #4
    3486:	d503      	bpl.n	3490 <__aeabi_fmul+0x1a4>
    3488:	0032      	movs	r2, r6
    348a:	4b27      	ldr	r3, [pc, #156]	; (3528 <__aeabi_fmul+0x23c>)
    348c:	3280      	adds	r2, #128	; 0x80
    348e:	401d      	ands	r5, r3
    3490:	2afe      	cmp	r2, #254	; 0xfe
    3492:	dc94      	bgt.n	33be <__aeabi_fmul+0xd2>
    3494:	2401      	movs	r4, #1
    3496:	01a8      	lsls	r0, r5, #6
    3498:	0a40      	lsrs	r0, r0, #9
    349a:	b2d2      	uxtb	r2, r2
    349c:	400c      	ands	r4, r1
    349e:	e76f      	b.n	3380 <__aeabi_fmul+0x94>
    34a0:	2080      	movs	r0, #128	; 0x80
    34a2:	03c0      	lsls	r0, r0, #15
    34a4:	4207      	tst	r7, r0
    34a6:	d007      	beq.n	34b8 <__aeabi_fmul+0x1cc>
    34a8:	4205      	tst	r5, r0
    34aa:	d105      	bne.n	34b8 <__aeabi_fmul+0x1cc>
    34ac:	4328      	orrs	r0, r5
    34ae:	0240      	lsls	r0, r0, #9
    34b0:	0a40      	lsrs	r0, r0, #9
    34b2:	4644      	mov	r4, r8
    34b4:	22ff      	movs	r2, #255	; 0xff
    34b6:	e763      	b.n	3380 <__aeabi_fmul+0x94>
    34b8:	4338      	orrs	r0, r7
    34ba:	0240      	lsls	r0, r0, #9
    34bc:	0a40      	lsrs	r0, r0, #9
    34be:	22ff      	movs	r2, #255	; 0xff
    34c0:	e75e      	b.n	3380 <__aeabi_fmul+0x94>
    34c2:	2401      	movs	r4, #1
    34c4:	1aa3      	subs	r3, r4, r2
    34c6:	2b1b      	cmp	r3, #27
    34c8:	dd05      	ble.n	34d6 <__aeabi_fmul+0x1ea>
    34ca:	400c      	ands	r4, r1
    34cc:	2200      	movs	r2, #0
    34ce:	2000      	movs	r0, #0
    34d0:	e756      	b.n	3380 <__aeabi_fmul+0x94>
    34d2:	465e      	mov	r6, fp
    34d4:	e7cb      	b.n	346e <__aeabi_fmul+0x182>
    34d6:	002a      	movs	r2, r5
    34d8:	2020      	movs	r0, #32
    34da:	40da      	lsrs	r2, r3
    34dc:	1ac3      	subs	r3, r0, r3
    34de:	409d      	lsls	r5, r3
    34e0:	002b      	movs	r3, r5
    34e2:	1e5d      	subs	r5, r3, #1
    34e4:	41ab      	sbcs	r3, r5
    34e6:	4313      	orrs	r3, r2
    34e8:	075a      	lsls	r2, r3, #29
    34ea:	d004      	beq.n	34f6 <__aeabi_fmul+0x20a>
    34ec:	220f      	movs	r2, #15
    34ee:	401a      	ands	r2, r3
    34f0:	2a04      	cmp	r2, #4
    34f2:	d000      	beq.n	34f6 <__aeabi_fmul+0x20a>
    34f4:	3304      	adds	r3, #4
    34f6:	015a      	lsls	r2, r3, #5
    34f8:	d504      	bpl.n	3504 <__aeabi_fmul+0x218>
    34fa:	2401      	movs	r4, #1
    34fc:	2201      	movs	r2, #1
    34fe:	400c      	ands	r4, r1
    3500:	2000      	movs	r0, #0
    3502:	e73d      	b.n	3380 <__aeabi_fmul+0x94>
    3504:	2401      	movs	r4, #1
    3506:	019b      	lsls	r3, r3, #6
    3508:	0a58      	lsrs	r0, r3, #9
    350a:	400c      	ands	r4, r1
    350c:	2200      	movs	r2, #0
    350e:	e737      	b.n	3380 <__aeabi_fmul+0x94>
    3510:	2080      	movs	r0, #128	; 0x80
    3512:	2401      	movs	r4, #1
    3514:	03c0      	lsls	r0, r0, #15
    3516:	4328      	orrs	r0, r5
    3518:	0240      	lsls	r0, r0, #9
    351a:	0a40      	lsrs	r0, r0, #9
    351c:	400c      	ands	r4, r1
    351e:	22ff      	movs	r2, #255	; 0xff
    3520:	e72e      	b.n	3380 <__aeabi_fmul+0x94>
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	0000480c 	.word	0x0000480c
    3528:	f7ffffff 	.word	0xf7ffffff

0000352c <__aeabi_fsub>:
    352c:	b5f0      	push	{r4, r5, r6, r7, lr}
    352e:	464f      	mov	r7, r9
    3530:	46d6      	mov	lr, sl
    3532:	4646      	mov	r6, r8
    3534:	0044      	lsls	r4, r0, #1
    3536:	b5c0      	push	{r6, r7, lr}
    3538:	0fc2      	lsrs	r2, r0, #31
    353a:	0247      	lsls	r7, r0, #9
    353c:	0248      	lsls	r0, r1, #9
    353e:	0a40      	lsrs	r0, r0, #9
    3540:	4684      	mov	ip, r0
    3542:	4666      	mov	r6, ip
    3544:	0a7b      	lsrs	r3, r7, #9
    3546:	0048      	lsls	r0, r1, #1
    3548:	0fc9      	lsrs	r1, r1, #31
    354a:	469a      	mov	sl, r3
    354c:	0e24      	lsrs	r4, r4, #24
    354e:	0015      	movs	r5, r2
    3550:	00db      	lsls	r3, r3, #3
    3552:	0e00      	lsrs	r0, r0, #24
    3554:	4689      	mov	r9, r1
    3556:	00f6      	lsls	r6, r6, #3
    3558:	28ff      	cmp	r0, #255	; 0xff
    355a:	d100      	bne.n	355e <__aeabi_fsub+0x32>
    355c:	e08f      	b.n	367e <__aeabi_fsub+0x152>
    355e:	2101      	movs	r1, #1
    3560:	464f      	mov	r7, r9
    3562:	404f      	eors	r7, r1
    3564:	0039      	movs	r1, r7
    3566:	4291      	cmp	r1, r2
    3568:	d066      	beq.n	3638 <__aeabi_fsub+0x10c>
    356a:	1a22      	subs	r2, r4, r0
    356c:	2a00      	cmp	r2, #0
    356e:	dc00      	bgt.n	3572 <__aeabi_fsub+0x46>
    3570:	e09d      	b.n	36ae <__aeabi_fsub+0x182>
    3572:	2800      	cmp	r0, #0
    3574:	d13d      	bne.n	35f2 <__aeabi_fsub+0xc6>
    3576:	2e00      	cmp	r6, #0
    3578:	d100      	bne.n	357c <__aeabi_fsub+0x50>
    357a:	e08b      	b.n	3694 <__aeabi_fsub+0x168>
    357c:	1e51      	subs	r1, r2, #1
    357e:	2900      	cmp	r1, #0
    3580:	d000      	beq.n	3584 <__aeabi_fsub+0x58>
    3582:	e0b5      	b.n	36f0 <__aeabi_fsub+0x1c4>
    3584:	2401      	movs	r4, #1
    3586:	1b9b      	subs	r3, r3, r6
    3588:	015a      	lsls	r2, r3, #5
    358a:	d544      	bpl.n	3616 <__aeabi_fsub+0xea>
    358c:	019b      	lsls	r3, r3, #6
    358e:	099f      	lsrs	r7, r3, #6
    3590:	0038      	movs	r0, r7
    3592:	f001 f843 	bl	461c <__clzsi2>
    3596:	3805      	subs	r0, #5
    3598:	4087      	lsls	r7, r0
    359a:	4284      	cmp	r4, r0
    359c:	dd00      	ble.n	35a0 <__aeabi_fsub+0x74>
    359e:	e096      	b.n	36ce <__aeabi_fsub+0x1a2>
    35a0:	1b04      	subs	r4, r0, r4
    35a2:	003a      	movs	r2, r7
    35a4:	2020      	movs	r0, #32
    35a6:	3401      	adds	r4, #1
    35a8:	40e2      	lsrs	r2, r4
    35aa:	1b04      	subs	r4, r0, r4
    35ac:	40a7      	lsls	r7, r4
    35ae:	003b      	movs	r3, r7
    35b0:	1e5f      	subs	r7, r3, #1
    35b2:	41bb      	sbcs	r3, r7
    35b4:	2400      	movs	r4, #0
    35b6:	4313      	orrs	r3, r2
    35b8:	075a      	lsls	r2, r3, #29
    35ba:	d004      	beq.n	35c6 <__aeabi_fsub+0x9a>
    35bc:	220f      	movs	r2, #15
    35be:	401a      	ands	r2, r3
    35c0:	2a04      	cmp	r2, #4
    35c2:	d000      	beq.n	35c6 <__aeabi_fsub+0x9a>
    35c4:	3304      	adds	r3, #4
    35c6:	015a      	lsls	r2, r3, #5
    35c8:	d527      	bpl.n	361a <__aeabi_fsub+0xee>
    35ca:	3401      	adds	r4, #1
    35cc:	2cff      	cmp	r4, #255	; 0xff
    35ce:	d100      	bne.n	35d2 <__aeabi_fsub+0xa6>
    35d0:	e079      	b.n	36c6 <__aeabi_fsub+0x19a>
    35d2:	2201      	movs	r2, #1
    35d4:	019b      	lsls	r3, r3, #6
    35d6:	0a5b      	lsrs	r3, r3, #9
    35d8:	b2e4      	uxtb	r4, r4
    35da:	402a      	ands	r2, r5
    35dc:	025b      	lsls	r3, r3, #9
    35de:	05e4      	lsls	r4, r4, #23
    35e0:	0a58      	lsrs	r0, r3, #9
    35e2:	07d2      	lsls	r2, r2, #31
    35e4:	4320      	orrs	r0, r4
    35e6:	4310      	orrs	r0, r2
    35e8:	bc1c      	pop	{r2, r3, r4}
    35ea:	4690      	mov	r8, r2
    35ec:	4699      	mov	r9, r3
    35ee:	46a2      	mov	sl, r4
    35f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35f2:	2cff      	cmp	r4, #255	; 0xff
    35f4:	d0e0      	beq.n	35b8 <__aeabi_fsub+0x8c>
    35f6:	2180      	movs	r1, #128	; 0x80
    35f8:	04c9      	lsls	r1, r1, #19
    35fa:	430e      	orrs	r6, r1
    35fc:	2a1b      	cmp	r2, #27
    35fe:	dc7b      	bgt.n	36f8 <__aeabi_fsub+0x1cc>
    3600:	0031      	movs	r1, r6
    3602:	2020      	movs	r0, #32
    3604:	40d1      	lsrs	r1, r2
    3606:	1a82      	subs	r2, r0, r2
    3608:	4096      	lsls	r6, r2
    360a:	1e72      	subs	r2, r6, #1
    360c:	4196      	sbcs	r6, r2
    360e:	430e      	orrs	r6, r1
    3610:	1b9b      	subs	r3, r3, r6
    3612:	015a      	lsls	r2, r3, #5
    3614:	d4ba      	bmi.n	358c <__aeabi_fsub+0x60>
    3616:	075a      	lsls	r2, r3, #29
    3618:	d1d0      	bne.n	35bc <__aeabi_fsub+0x90>
    361a:	2201      	movs	r2, #1
    361c:	08df      	lsrs	r7, r3, #3
    361e:	402a      	ands	r2, r5
    3620:	2cff      	cmp	r4, #255	; 0xff
    3622:	d133      	bne.n	368c <__aeabi_fsub+0x160>
    3624:	2f00      	cmp	r7, #0
    3626:	d100      	bne.n	362a <__aeabi_fsub+0xfe>
    3628:	e0a8      	b.n	377c <__aeabi_fsub+0x250>
    362a:	2380      	movs	r3, #128	; 0x80
    362c:	03db      	lsls	r3, r3, #15
    362e:	433b      	orrs	r3, r7
    3630:	025b      	lsls	r3, r3, #9
    3632:	0a5b      	lsrs	r3, r3, #9
    3634:	24ff      	movs	r4, #255	; 0xff
    3636:	e7d1      	b.n	35dc <__aeabi_fsub+0xb0>
    3638:	1a21      	subs	r1, r4, r0
    363a:	2900      	cmp	r1, #0
    363c:	dd4c      	ble.n	36d8 <__aeabi_fsub+0x1ac>
    363e:	2800      	cmp	r0, #0
    3640:	d02a      	beq.n	3698 <__aeabi_fsub+0x16c>
    3642:	2cff      	cmp	r4, #255	; 0xff
    3644:	d0b8      	beq.n	35b8 <__aeabi_fsub+0x8c>
    3646:	2080      	movs	r0, #128	; 0x80
    3648:	04c0      	lsls	r0, r0, #19
    364a:	4306      	orrs	r6, r0
    364c:	291b      	cmp	r1, #27
    364e:	dd00      	ble.n	3652 <__aeabi_fsub+0x126>
    3650:	e0af      	b.n	37b2 <__aeabi_fsub+0x286>
    3652:	0030      	movs	r0, r6
    3654:	2720      	movs	r7, #32
    3656:	40c8      	lsrs	r0, r1
    3658:	1a79      	subs	r1, r7, r1
    365a:	408e      	lsls	r6, r1
    365c:	1e71      	subs	r1, r6, #1
    365e:	418e      	sbcs	r6, r1
    3660:	4306      	orrs	r6, r0
    3662:	199b      	adds	r3, r3, r6
    3664:	0159      	lsls	r1, r3, #5
    3666:	d5d6      	bpl.n	3616 <__aeabi_fsub+0xea>
    3668:	3401      	adds	r4, #1
    366a:	2cff      	cmp	r4, #255	; 0xff
    366c:	d100      	bne.n	3670 <__aeabi_fsub+0x144>
    366e:	e085      	b.n	377c <__aeabi_fsub+0x250>
    3670:	2201      	movs	r2, #1
    3672:	497a      	ldr	r1, [pc, #488]	; (385c <__aeabi_fsub+0x330>)
    3674:	401a      	ands	r2, r3
    3676:	085b      	lsrs	r3, r3, #1
    3678:	400b      	ands	r3, r1
    367a:	4313      	orrs	r3, r2
    367c:	e79c      	b.n	35b8 <__aeabi_fsub+0x8c>
    367e:	2e00      	cmp	r6, #0
    3680:	d000      	beq.n	3684 <__aeabi_fsub+0x158>
    3682:	e770      	b.n	3566 <__aeabi_fsub+0x3a>
    3684:	e76b      	b.n	355e <__aeabi_fsub+0x32>
    3686:	1e3b      	subs	r3, r7, #0
    3688:	d1c5      	bne.n	3616 <__aeabi_fsub+0xea>
    368a:	2200      	movs	r2, #0
    368c:	027b      	lsls	r3, r7, #9
    368e:	0a5b      	lsrs	r3, r3, #9
    3690:	b2e4      	uxtb	r4, r4
    3692:	e7a3      	b.n	35dc <__aeabi_fsub+0xb0>
    3694:	0014      	movs	r4, r2
    3696:	e78f      	b.n	35b8 <__aeabi_fsub+0x8c>
    3698:	2e00      	cmp	r6, #0
    369a:	d04d      	beq.n	3738 <__aeabi_fsub+0x20c>
    369c:	1e48      	subs	r0, r1, #1
    369e:	2800      	cmp	r0, #0
    36a0:	d157      	bne.n	3752 <__aeabi_fsub+0x226>
    36a2:	199b      	adds	r3, r3, r6
    36a4:	2401      	movs	r4, #1
    36a6:	015a      	lsls	r2, r3, #5
    36a8:	d5b5      	bpl.n	3616 <__aeabi_fsub+0xea>
    36aa:	2402      	movs	r4, #2
    36ac:	e7e0      	b.n	3670 <__aeabi_fsub+0x144>
    36ae:	2a00      	cmp	r2, #0
    36b0:	d125      	bne.n	36fe <__aeabi_fsub+0x1d2>
    36b2:	1c62      	adds	r2, r4, #1
    36b4:	b2d2      	uxtb	r2, r2
    36b6:	2a01      	cmp	r2, #1
    36b8:	dd72      	ble.n	37a0 <__aeabi_fsub+0x274>
    36ba:	1b9f      	subs	r7, r3, r6
    36bc:	017a      	lsls	r2, r7, #5
    36be:	d535      	bpl.n	372c <__aeabi_fsub+0x200>
    36c0:	1af7      	subs	r7, r6, r3
    36c2:	000d      	movs	r5, r1
    36c4:	e764      	b.n	3590 <__aeabi_fsub+0x64>
    36c6:	2201      	movs	r2, #1
    36c8:	2300      	movs	r3, #0
    36ca:	402a      	ands	r2, r5
    36cc:	e786      	b.n	35dc <__aeabi_fsub+0xb0>
    36ce:	003b      	movs	r3, r7
    36d0:	4a63      	ldr	r2, [pc, #396]	; (3860 <__aeabi_fsub+0x334>)
    36d2:	1a24      	subs	r4, r4, r0
    36d4:	4013      	ands	r3, r2
    36d6:	e76f      	b.n	35b8 <__aeabi_fsub+0x8c>
    36d8:	2900      	cmp	r1, #0
    36da:	d16c      	bne.n	37b6 <__aeabi_fsub+0x28a>
    36dc:	1c61      	adds	r1, r4, #1
    36de:	b2c8      	uxtb	r0, r1
    36e0:	2801      	cmp	r0, #1
    36e2:	dd4e      	ble.n	3782 <__aeabi_fsub+0x256>
    36e4:	29ff      	cmp	r1, #255	; 0xff
    36e6:	d049      	beq.n	377c <__aeabi_fsub+0x250>
    36e8:	199b      	adds	r3, r3, r6
    36ea:	085b      	lsrs	r3, r3, #1
    36ec:	000c      	movs	r4, r1
    36ee:	e763      	b.n	35b8 <__aeabi_fsub+0x8c>
    36f0:	2aff      	cmp	r2, #255	; 0xff
    36f2:	d041      	beq.n	3778 <__aeabi_fsub+0x24c>
    36f4:	000a      	movs	r2, r1
    36f6:	e781      	b.n	35fc <__aeabi_fsub+0xd0>
    36f8:	2601      	movs	r6, #1
    36fa:	1b9b      	subs	r3, r3, r6
    36fc:	e789      	b.n	3612 <__aeabi_fsub+0xe6>
    36fe:	2c00      	cmp	r4, #0
    3700:	d01c      	beq.n	373c <__aeabi_fsub+0x210>
    3702:	28ff      	cmp	r0, #255	; 0xff
    3704:	d021      	beq.n	374a <__aeabi_fsub+0x21e>
    3706:	2480      	movs	r4, #128	; 0x80
    3708:	04e4      	lsls	r4, r4, #19
    370a:	4252      	negs	r2, r2
    370c:	4323      	orrs	r3, r4
    370e:	2a1b      	cmp	r2, #27
    3710:	dd00      	ble.n	3714 <__aeabi_fsub+0x1e8>
    3712:	e096      	b.n	3842 <__aeabi_fsub+0x316>
    3714:	001c      	movs	r4, r3
    3716:	2520      	movs	r5, #32
    3718:	40d4      	lsrs	r4, r2
    371a:	1aaa      	subs	r2, r5, r2
    371c:	4093      	lsls	r3, r2
    371e:	1e5a      	subs	r2, r3, #1
    3720:	4193      	sbcs	r3, r2
    3722:	4323      	orrs	r3, r4
    3724:	1af3      	subs	r3, r6, r3
    3726:	0004      	movs	r4, r0
    3728:	000d      	movs	r5, r1
    372a:	e72d      	b.n	3588 <__aeabi_fsub+0x5c>
    372c:	2f00      	cmp	r7, #0
    372e:	d000      	beq.n	3732 <__aeabi_fsub+0x206>
    3730:	e72e      	b.n	3590 <__aeabi_fsub+0x64>
    3732:	2200      	movs	r2, #0
    3734:	2400      	movs	r4, #0
    3736:	e7a9      	b.n	368c <__aeabi_fsub+0x160>
    3738:	000c      	movs	r4, r1
    373a:	e73d      	b.n	35b8 <__aeabi_fsub+0x8c>
    373c:	2b00      	cmp	r3, #0
    373e:	d058      	beq.n	37f2 <__aeabi_fsub+0x2c6>
    3740:	43d2      	mvns	r2, r2
    3742:	2a00      	cmp	r2, #0
    3744:	d0ee      	beq.n	3724 <__aeabi_fsub+0x1f8>
    3746:	28ff      	cmp	r0, #255	; 0xff
    3748:	d1e1      	bne.n	370e <__aeabi_fsub+0x1e2>
    374a:	0033      	movs	r3, r6
    374c:	24ff      	movs	r4, #255	; 0xff
    374e:	000d      	movs	r5, r1
    3750:	e732      	b.n	35b8 <__aeabi_fsub+0x8c>
    3752:	29ff      	cmp	r1, #255	; 0xff
    3754:	d010      	beq.n	3778 <__aeabi_fsub+0x24c>
    3756:	0001      	movs	r1, r0
    3758:	e778      	b.n	364c <__aeabi_fsub+0x120>
    375a:	2b00      	cmp	r3, #0
    375c:	d06e      	beq.n	383c <__aeabi_fsub+0x310>
    375e:	24ff      	movs	r4, #255	; 0xff
    3760:	2e00      	cmp	r6, #0
    3762:	d100      	bne.n	3766 <__aeabi_fsub+0x23a>
    3764:	e728      	b.n	35b8 <__aeabi_fsub+0x8c>
    3766:	2280      	movs	r2, #128	; 0x80
    3768:	4651      	mov	r1, sl
    376a:	03d2      	lsls	r2, r2, #15
    376c:	4211      	tst	r1, r2
    376e:	d003      	beq.n	3778 <__aeabi_fsub+0x24c>
    3770:	4661      	mov	r1, ip
    3772:	4211      	tst	r1, r2
    3774:	d100      	bne.n	3778 <__aeabi_fsub+0x24c>
    3776:	0033      	movs	r3, r6
    3778:	24ff      	movs	r4, #255	; 0xff
    377a:	e71d      	b.n	35b8 <__aeabi_fsub+0x8c>
    377c:	24ff      	movs	r4, #255	; 0xff
    377e:	2300      	movs	r3, #0
    3780:	e72c      	b.n	35dc <__aeabi_fsub+0xb0>
    3782:	2c00      	cmp	r4, #0
    3784:	d1e9      	bne.n	375a <__aeabi_fsub+0x22e>
    3786:	2b00      	cmp	r3, #0
    3788:	d063      	beq.n	3852 <__aeabi_fsub+0x326>
    378a:	2e00      	cmp	r6, #0
    378c:	d100      	bne.n	3790 <__aeabi_fsub+0x264>
    378e:	e713      	b.n	35b8 <__aeabi_fsub+0x8c>
    3790:	199b      	adds	r3, r3, r6
    3792:	015a      	lsls	r2, r3, #5
    3794:	d400      	bmi.n	3798 <__aeabi_fsub+0x26c>
    3796:	e73e      	b.n	3616 <__aeabi_fsub+0xea>
    3798:	4a31      	ldr	r2, [pc, #196]	; (3860 <__aeabi_fsub+0x334>)
    379a:	000c      	movs	r4, r1
    379c:	4013      	ands	r3, r2
    379e:	e70b      	b.n	35b8 <__aeabi_fsub+0x8c>
    37a0:	2c00      	cmp	r4, #0
    37a2:	d11e      	bne.n	37e2 <__aeabi_fsub+0x2b6>
    37a4:	2b00      	cmp	r3, #0
    37a6:	d12f      	bne.n	3808 <__aeabi_fsub+0x2dc>
    37a8:	2e00      	cmp	r6, #0
    37aa:	d04f      	beq.n	384c <__aeabi_fsub+0x320>
    37ac:	0033      	movs	r3, r6
    37ae:	000d      	movs	r5, r1
    37b0:	e702      	b.n	35b8 <__aeabi_fsub+0x8c>
    37b2:	2601      	movs	r6, #1
    37b4:	e755      	b.n	3662 <__aeabi_fsub+0x136>
    37b6:	2c00      	cmp	r4, #0
    37b8:	d11f      	bne.n	37fa <__aeabi_fsub+0x2ce>
    37ba:	2b00      	cmp	r3, #0
    37bc:	d043      	beq.n	3846 <__aeabi_fsub+0x31a>
    37be:	43c9      	mvns	r1, r1
    37c0:	2900      	cmp	r1, #0
    37c2:	d00b      	beq.n	37dc <__aeabi_fsub+0x2b0>
    37c4:	28ff      	cmp	r0, #255	; 0xff
    37c6:	d039      	beq.n	383c <__aeabi_fsub+0x310>
    37c8:	291b      	cmp	r1, #27
    37ca:	dc44      	bgt.n	3856 <__aeabi_fsub+0x32a>
    37cc:	001c      	movs	r4, r3
    37ce:	2720      	movs	r7, #32
    37d0:	40cc      	lsrs	r4, r1
    37d2:	1a79      	subs	r1, r7, r1
    37d4:	408b      	lsls	r3, r1
    37d6:	1e59      	subs	r1, r3, #1
    37d8:	418b      	sbcs	r3, r1
    37da:	4323      	orrs	r3, r4
    37dc:	199b      	adds	r3, r3, r6
    37de:	0004      	movs	r4, r0
    37e0:	e740      	b.n	3664 <__aeabi_fsub+0x138>
    37e2:	2b00      	cmp	r3, #0
    37e4:	d11a      	bne.n	381c <__aeabi_fsub+0x2f0>
    37e6:	2e00      	cmp	r6, #0
    37e8:	d124      	bne.n	3834 <__aeabi_fsub+0x308>
    37ea:	2780      	movs	r7, #128	; 0x80
    37ec:	2200      	movs	r2, #0
    37ee:	03ff      	lsls	r7, r7, #15
    37f0:	e71b      	b.n	362a <__aeabi_fsub+0xfe>
    37f2:	0033      	movs	r3, r6
    37f4:	0004      	movs	r4, r0
    37f6:	000d      	movs	r5, r1
    37f8:	e6de      	b.n	35b8 <__aeabi_fsub+0x8c>
    37fa:	28ff      	cmp	r0, #255	; 0xff
    37fc:	d01e      	beq.n	383c <__aeabi_fsub+0x310>
    37fe:	2480      	movs	r4, #128	; 0x80
    3800:	04e4      	lsls	r4, r4, #19
    3802:	4249      	negs	r1, r1
    3804:	4323      	orrs	r3, r4
    3806:	e7df      	b.n	37c8 <__aeabi_fsub+0x29c>
    3808:	2e00      	cmp	r6, #0
    380a:	d100      	bne.n	380e <__aeabi_fsub+0x2e2>
    380c:	e6d4      	b.n	35b8 <__aeabi_fsub+0x8c>
    380e:	1b9f      	subs	r7, r3, r6
    3810:	017a      	lsls	r2, r7, #5
    3812:	d400      	bmi.n	3816 <__aeabi_fsub+0x2ea>
    3814:	e737      	b.n	3686 <__aeabi_fsub+0x15a>
    3816:	1af3      	subs	r3, r6, r3
    3818:	000d      	movs	r5, r1
    381a:	e6cd      	b.n	35b8 <__aeabi_fsub+0x8c>
    381c:	24ff      	movs	r4, #255	; 0xff
    381e:	2e00      	cmp	r6, #0
    3820:	d100      	bne.n	3824 <__aeabi_fsub+0x2f8>
    3822:	e6c9      	b.n	35b8 <__aeabi_fsub+0x8c>
    3824:	2280      	movs	r2, #128	; 0x80
    3826:	4650      	mov	r0, sl
    3828:	03d2      	lsls	r2, r2, #15
    382a:	4210      	tst	r0, r2
    382c:	d0a4      	beq.n	3778 <__aeabi_fsub+0x24c>
    382e:	4660      	mov	r0, ip
    3830:	4210      	tst	r0, r2
    3832:	d1a1      	bne.n	3778 <__aeabi_fsub+0x24c>
    3834:	0033      	movs	r3, r6
    3836:	000d      	movs	r5, r1
    3838:	24ff      	movs	r4, #255	; 0xff
    383a:	e6bd      	b.n	35b8 <__aeabi_fsub+0x8c>
    383c:	0033      	movs	r3, r6
    383e:	24ff      	movs	r4, #255	; 0xff
    3840:	e6ba      	b.n	35b8 <__aeabi_fsub+0x8c>
    3842:	2301      	movs	r3, #1
    3844:	e76e      	b.n	3724 <__aeabi_fsub+0x1f8>
    3846:	0033      	movs	r3, r6
    3848:	0004      	movs	r4, r0
    384a:	e6b5      	b.n	35b8 <__aeabi_fsub+0x8c>
    384c:	2700      	movs	r7, #0
    384e:	2200      	movs	r2, #0
    3850:	e71c      	b.n	368c <__aeabi_fsub+0x160>
    3852:	0033      	movs	r3, r6
    3854:	e6b0      	b.n	35b8 <__aeabi_fsub+0x8c>
    3856:	2301      	movs	r3, #1
    3858:	e7c0      	b.n	37dc <__aeabi_fsub+0x2b0>
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	7dffffff 	.word	0x7dffffff
    3860:	fbffffff 	.word	0xfbffffff

00003864 <__aeabi_f2iz>:
    3864:	0241      	lsls	r1, r0, #9
    3866:	0043      	lsls	r3, r0, #1
    3868:	0fc2      	lsrs	r2, r0, #31
    386a:	0a49      	lsrs	r1, r1, #9
    386c:	0e1b      	lsrs	r3, r3, #24
    386e:	2000      	movs	r0, #0
    3870:	2b7e      	cmp	r3, #126	; 0x7e
    3872:	dd0d      	ble.n	3890 <__aeabi_f2iz+0x2c>
    3874:	2b9d      	cmp	r3, #157	; 0x9d
    3876:	dc0c      	bgt.n	3892 <__aeabi_f2iz+0x2e>
    3878:	2080      	movs	r0, #128	; 0x80
    387a:	0400      	lsls	r0, r0, #16
    387c:	4301      	orrs	r1, r0
    387e:	2b95      	cmp	r3, #149	; 0x95
    3880:	dc0a      	bgt.n	3898 <__aeabi_f2iz+0x34>
    3882:	2096      	movs	r0, #150	; 0x96
    3884:	1ac3      	subs	r3, r0, r3
    3886:	40d9      	lsrs	r1, r3
    3888:	4248      	negs	r0, r1
    388a:	2a00      	cmp	r2, #0
    388c:	d100      	bne.n	3890 <__aeabi_f2iz+0x2c>
    388e:	0008      	movs	r0, r1
    3890:	4770      	bx	lr
    3892:	4b03      	ldr	r3, [pc, #12]	; (38a0 <__aeabi_f2iz+0x3c>)
    3894:	18d0      	adds	r0, r2, r3
    3896:	e7fb      	b.n	3890 <__aeabi_f2iz+0x2c>
    3898:	3b96      	subs	r3, #150	; 0x96
    389a:	4099      	lsls	r1, r3
    389c:	e7f4      	b.n	3888 <__aeabi_f2iz+0x24>
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	7fffffff 	.word	0x7fffffff

000038a4 <__aeabi_i2f>:
    38a4:	b570      	push	{r4, r5, r6, lr}
    38a6:	2800      	cmp	r0, #0
    38a8:	d030      	beq.n	390c <__aeabi_i2f+0x68>
    38aa:	17c3      	asrs	r3, r0, #31
    38ac:	18c4      	adds	r4, r0, r3
    38ae:	405c      	eors	r4, r3
    38b0:	0fc5      	lsrs	r5, r0, #31
    38b2:	0020      	movs	r0, r4
    38b4:	f000 feb2 	bl	461c <__clzsi2>
    38b8:	239e      	movs	r3, #158	; 0x9e
    38ba:	1a1b      	subs	r3, r3, r0
    38bc:	2b96      	cmp	r3, #150	; 0x96
    38be:	dc0d      	bgt.n	38dc <__aeabi_i2f+0x38>
    38c0:	2296      	movs	r2, #150	; 0x96
    38c2:	1ad2      	subs	r2, r2, r3
    38c4:	4094      	lsls	r4, r2
    38c6:	002a      	movs	r2, r5
    38c8:	0264      	lsls	r4, r4, #9
    38ca:	0a64      	lsrs	r4, r4, #9
    38cc:	b2db      	uxtb	r3, r3
    38ce:	0264      	lsls	r4, r4, #9
    38d0:	05db      	lsls	r3, r3, #23
    38d2:	0a60      	lsrs	r0, r4, #9
    38d4:	07d2      	lsls	r2, r2, #31
    38d6:	4318      	orrs	r0, r3
    38d8:	4310      	orrs	r0, r2
    38da:	bd70      	pop	{r4, r5, r6, pc}
    38dc:	2b99      	cmp	r3, #153	; 0x99
    38de:	dc19      	bgt.n	3914 <__aeabi_i2f+0x70>
    38e0:	2299      	movs	r2, #153	; 0x99
    38e2:	1ad2      	subs	r2, r2, r3
    38e4:	2a00      	cmp	r2, #0
    38e6:	dd29      	ble.n	393c <__aeabi_i2f+0x98>
    38e8:	4094      	lsls	r4, r2
    38ea:	0022      	movs	r2, r4
    38ec:	4c14      	ldr	r4, [pc, #80]	; (3940 <__aeabi_i2f+0x9c>)
    38ee:	4014      	ands	r4, r2
    38f0:	0751      	lsls	r1, r2, #29
    38f2:	d004      	beq.n	38fe <__aeabi_i2f+0x5a>
    38f4:	210f      	movs	r1, #15
    38f6:	400a      	ands	r2, r1
    38f8:	2a04      	cmp	r2, #4
    38fa:	d000      	beq.n	38fe <__aeabi_i2f+0x5a>
    38fc:	3404      	adds	r4, #4
    38fe:	0162      	lsls	r2, r4, #5
    3900:	d413      	bmi.n	392a <__aeabi_i2f+0x86>
    3902:	01a4      	lsls	r4, r4, #6
    3904:	0a64      	lsrs	r4, r4, #9
    3906:	b2db      	uxtb	r3, r3
    3908:	002a      	movs	r2, r5
    390a:	e7e0      	b.n	38ce <__aeabi_i2f+0x2a>
    390c:	2200      	movs	r2, #0
    390e:	2300      	movs	r3, #0
    3910:	2400      	movs	r4, #0
    3912:	e7dc      	b.n	38ce <__aeabi_i2f+0x2a>
    3914:	2205      	movs	r2, #5
    3916:	0021      	movs	r1, r4
    3918:	1a12      	subs	r2, r2, r0
    391a:	40d1      	lsrs	r1, r2
    391c:	22b9      	movs	r2, #185	; 0xb9
    391e:	1ad2      	subs	r2, r2, r3
    3920:	4094      	lsls	r4, r2
    3922:	1e62      	subs	r2, r4, #1
    3924:	4194      	sbcs	r4, r2
    3926:	430c      	orrs	r4, r1
    3928:	e7da      	b.n	38e0 <__aeabi_i2f+0x3c>
    392a:	4b05      	ldr	r3, [pc, #20]	; (3940 <__aeabi_i2f+0x9c>)
    392c:	002a      	movs	r2, r5
    392e:	401c      	ands	r4, r3
    3930:	239f      	movs	r3, #159	; 0x9f
    3932:	01a4      	lsls	r4, r4, #6
    3934:	1a1b      	subs	r3, r3, r0
    3936:	0a64      	lsrs	r4, r4, #9
    3938:	b2db      	uxtb	r3, r3
    393a:	e7c8      	b.n	38ce <__aeabi_i2f+0x2a>
    393c:	0022      	movs	r2, r4
    393e:	e7d5      	b.n	38ec <__aeabi_i2f+0x48>
    3940:	fbffffff 	.word	0xfbffffff

00003944 <__aeabi_dadd>:
    3944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3946:	4645      	mov	r5, r8
    3948:	46de      	mov	lr, fp
    394a:	4657      	mov	r7, sl
    394c:	464e      	mov	r6, r9
    394e:	030c      	lsls	r4, r1, #12
    3950:	b5e0      	push	{r5, r6, r7, lr}
    3952:	004e      	lsls	r6, r1, #1
    3954:	0fc9      	lsrs	r1, r1, #31
    3956:	4688      	mov	r8, r1
    3958:	000d      	movs	r5, r1
    395a:	0a61      	lsrs	r1, r4, #9
    395c:	0f44      	lsrs	r4, r0, #29
    395e:	430c      	orrs	r4, r1
    3960:	00c7      	lsls	r7, r0, #3
    3962:	0319      	lsls	r1, r3, #12
    3964:	0058      	lsls	r0, r3, #1
    3966:	0fdb      	lsrs	r3, r3, #31
    3968:	469b      	mov	fp, r3
    396a:	0a4b      	lsrs	r3, r1, #9
    396c:	0f51      	lsrs	r1, r2, #29
    396e:	430b      	orrs	r3, r1
    3970:	0d76      	lsrs	r6, r6, #21
    3972:	0d40      	lsrs	r0, r0, #21
    3974:	0019      	movs	r1, r3
    3976:	00d2      	lsls	r2, r2, #3
    3978:	45d8      	cmp	r8, fp
    397a:	d100      	bne.n	397e <__aeabi_dadd+0x3a>
    397c:	e0ae      	b.n	3adc <__aeabi_dadd+0x198>
    397e:	1a35      	subs	r5, r6, r0
    3980:	2d00      	cmp	r5, #0
    3982:	dc00      	bgt.n	3986 <__aeabi_dadd+0x42>
    3984:	e0f6      	b.n	3b74 <__aeabi_dadd+0x230>
    3986:	2800      	cmp	r0, #0
    3988:	d10f      	bne.n	39aa <__aeabi_dadd+0x66>
    398a:	4313      	orrs	r3, r2
    398c:	d100      	bne.n	3990 <__aeabi_dadd+0x4c>
    398e:	e0db      	b.n	3b48 <__aeabi_dadd+0x204>
    3990:	1e6b      	subs	r3, r5, #1
    3992:	2b00      	cmp	r3, #0
    3994:	d000      	beq.n	3998 <__aeabi_dadd+0x54>
    3996:	e137      	b.n	3c08 <__aeabi_dadd+0x2c4>
    3998:	1aba      	subs	r2, r7, r2
    399a:	4297      	cmp	r7, r2
    399c:	41bf      	sbcs	r7, r7
    399e:	1a64      	subs	r4, r4, r1
    39a0:	427f      	negs	r7, r7
    39a2:	1be4      	subs	r4, r4, r7
    39a4:	2601      	movs	r6, #1
    39a6:	0017      	movs	r7, r2
    39a8:	e024      	b.n	39f4 <__aeabi_dadd+0xb0>
    39aa:	4bc6      	ldr	r3, [pc, #792]	; (3cc4 <__aeabi_dadd+0x380>)
    39ac:	429e      	cmp	r6, r3
    39ae:	d04d      	beq.n	3a4c <__aeabi_dadd+0x108>
    39b0:	2380      	movs	r3, #128	; 0x80
    39b2:	041b      	lsls	r3, r3, #16
    39b4:	4319      	orrs	r1, r3
    39b6:	2d38      	cmp	r5, #56	; 0x38
    39b8:	dd00      	ble.n	39bc <__aeabi_dadd+0x78>
    39ba:	e107      	b.n	3bcc <__aeabi_dadd+0x288>
    39bc:	2d1f      	cmp	r5, #31
    39be:	dd00      	ble.n	39c2 <__aeabi_dadd+0x7e>
    39c0:	e138      	b.n	3c34 <__aeabi_dadd+0x2f0>
    39c2:	2020      	movs	r0, #32
    39c4:	1b43      	subs	r3, r0, r5
    39c6:	469a      	mov	sl, r3
    39c8:	000b      	movs	r3, r1
    39ca:	4650      	mov	r0, sl
    39cc:	4083      	lsls	r3, r0
    39ce:	4699      	mov	r9, r3
    39d0:	0013      	movs	r3, r2
    39d2:	4648      	mov	r0, r9
    39d4:	40eb      	lsrs	r3, r5
    39d6:	4318      	orrs	r0, r3
    39d8:	0003      	movs	r3, r0
    39da:	4650      	mov	r0, sl
    39dc:	4082      	lsls	r2, r0
    39de:	1e50      	subs	r0, r2, #1
    39e0:	4182      	sbcs	r2, r0
    39e2:	40e9      	lsrs	r1, r5
    39e4:	431a      	orrs	r2, r3
    39e6:	1aba      	subs	r2, r7, r2
    39e8:	1a61      	subs	r1, r4, r1
    39ea:	4297      	cmp	r7, r2
    39ec:	41a4      	sbcs	r4, r4
    39ee:	0017      	movs	r7, r2
    39f0:	4264      	negs	r4, r4
    39f2:	1b0c      	subs	r4, r1, r4
    39f4:	0223      	lsls	r3, r4, #8
    39f6:	d562      	bpl.n	3abe <__aeabi_dadd+0x17a>
    39f8:	0264      	lsls	r4, r4, #9
    39fa:	0a65      	lsrs	r5, r4, #9
    39fc:	2d00      	cmp	r5, #0
    39fe:	d100      	bne.n	3a02 <__aeabi_dadd+0xbe>
    3a00:	e0df      	b.n	3bc2 <__aeabi_dadd+0x27e>
    3a02:	0028      	movs	r0, r5
    3a04:	f000 fe0a 	bl	461c <__clzsi2>
    3a08:	0003      	movs	r3, r0
    3a0a:	3b08      	subs	r3, #8
    3a0c:	2b1f      	cmp	r3, #31
    3a0e:	dd00      	ble.n	3a12 <__aeabi_dadd+0xce>
    3a10:	e0d2      	b.n	3bb8 <__aeabi_dadd+0x274>
    3a12:	2220      	movs	r2, #32
    3a14:	003c      	movs	r4, r7
    3a16:	1ad2      	subs	r2, r2, r3
    3a18:	409d      	lsls	r5, r3
    3a1a:	40d4      	lsrs	r4, r2
    3a1c:	409f      	lsls	r7, r3
    3a1e:	4325      	orrs	r5, r4
    3a20:	429e      	cmp	r6, r3
    3a22:	dd00      	ble.n	3a26 <__aeabi_dadd+0xe2>
    3a24:	e0c4      	b.n	3bb0 <__aeabi_dadd+0x26c>
    3a26:	1b9e      	subs	r6, r3, r6
    3a28:	1c73      	adds	r3, r6, #1
    3a2a:	2b1f      	cmp	r3, #31
    3a2c:	dd00      	ble.n	3a30 <__aeabi_dadd+0xec>
    3a2e:	e0f1      	b.n	3c14 <__aeabi_dadd+0x2d0>
    3a30:	2220      	movs	r2, #32
    3a32:	0038      	movs	r0, r7
    3a34:	0029      	movs	r1, r5
    3a36:	1ad2      	subs	r2, r2, r3
    3a38:	40d8      	lsrs	r0, r3
    3a3a:	4091      	lsls	r1, r2
    3a3c:	4097      	lsls	r7, r2
    3a3e:	002c      	movs	r4, r5
    3a40:	4301      	orrs	r1, r0
    3a42:	1e78      	subs	r0, r7, #1
    3a44:	4187      	sbcs	r7, r0
    3a46:	40dc      	lsrs	r4, r3
    3a48:	2600      	movs	r6, #0
    3a4a:	430f      	orrs	r7, r1
    3a4c:	077b      	lsls	r3, r7, #29
    3a4e:	d009      	beq.n	3a64 <__aeabi_dadd+0x120>
    3a50:	230f      	movs	r3, #15
    3a52:	403b      	ands	r3, r7
    3a54:	2b04      	cmp	r3, #4
    3a56:	d005      	beq.n	3a64 <__aeabi_dadd+0x120>
    3a58:	1d3b      	adds	r3, r7, #4
    3a5a:	42bb      	cmp	r3, r7
    3a5c:	41bf      	sbcs	r7, r7
    3a5e:	427f      	negs	r7, r7
    3a60:	19e4      	adds	r4, r4, r7
    3a62:	001f      	movs	r7, r3
    3a64:	0223      	lsls	r3, r4, #8
    3a66:	d52c      	bpl.n	3ac2 <__aeabi_dadd+0x17e>
    3a68:	4b96      	ldr	r3, [pc, #600]	; (3cc4 <__aeabi_dadd+0x380>)
    3a6a:	3601      	adds	r6, #1
    3a6c:	429e      	cmp	r6, r3
    3a6e:	d100      	bne.n	3a72 <__aeabi_dadd+0x12e>
    3a70:	e09a      	b.n	3ba8 <__aeabi_dadd+0x264>
    3a72:	4645      	mov	r5, r8
    3a74:	4b94      	ldr	r3, [pc, #592]	; (3cc8 <__aeabi_dadd+0x384>)
    3a76:	08ff      	lsrs	r7, r7, #3
    3a78:	401c      	ands	r4, r3
    3a7a:	0760      	lsls	r0, r4, #29
    3a7c:	0576      	lsls	r6, r6, #21
    3a7e:	0264      	lsls	r4, r4, #9
    3a80:	4307      	orrs	r7, r0
    3a82:	0b24      	lsrs	r4, r4, #12
    3a84:	0d76      	lsrs	r6, r6, #21
    3a86:	2100      	movs	r1, #0
    3a88:	0324      	lsls	r4, r4, #12
    3a8a:	0b23      	lsrs	r3, r4, #12
    3a8c:	0d0c      	lsrs	r4, r1, #20
    3a8e:	4a8f      	ldr	r2, [pc, #572]	; (3ccc <__aeabi_dadd+0x388>)
    3a90:	0524      	lsls	r4, r4, #20
    3a92:	431c      	orrs	r4, r3
    3a94:	4014      	ands	r4, r2
    3a96:	0533      	lsls	r3, r6, #20
    3a98:	4323      	orrs	r3, r4
    3a9a:	005b      	lsls	r3, r3, #1
    3a9c:	07ed      	lsls	r5, r5, #31
    3a9e:	085b      	lsrs	r3, r3, #1
    3aa0:	432b      	orrs	r3, r5
    3aa2:	0038      	movs	r0, r7
    3aa4:	0019      	movs	r1, r3
    3aa6:	bc3c      	pop	{r2, r3, r4, r5}
    3aa8:	4690      	mov	r8, r2
    3aaa:	4699      	mov	r9, r3
    3aac:	46a2      	mov	sl, r4
    3aae:	46ab      	mov	fp, r5
    3ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ab2:	4664      	mov	r4, ip
    3ab4:	4304      	orrs	r4, r0
    3ab6:	d100      	bne.n	3aba <__aeabi_dadd+0x176>
    3ab8:	e211      	b.n	3ede <__aeabi_dadd+0x59a>
    3aba:	0004      	movs	r4, r0
    3abc:	4667      	mov	r7, ip
    3abe:	077b      	lsls	r3, r7, #29
    3ac0:	d1c6      	bne.n	3a50 <__aeabi_dadd+0x10c>
    3ac2:	4645      	mov	r5, r8
    3ac4:	0760      	lsls	r0, r4, #29
    3ac6:	08ff      	lsrs	r7, r7, #3
    3ac8:	4307      	orrs	r7, r0
    3aca:	08e4      	lsrs	r4, r4, #3
    3acc:	4b7d      	ldr	r3, [pc, #500]	; (3cc4 <__aeabi_dadd+0x380>)
    3ace:	429e      	cmp	r6, r3
    3ad0:	d030      	beq.n	3b34 <__aeabi_dadd+0x1f0>
    3ad2:	0324      	lsls	r4, r4, #12
    3ad4:	0576      	lsls	r6, r6, #21
    3ad6:	0b24      	lsrs	r4, r4, #12
    3ad8:	0d76      	lsrs	r6, r6, #21
    3ada:	e7d4      	b.n	3a86 <__aeabi_dadd+0x142>
    3adc:	1a33      	subs	r3, r6, r0
    3ade:	469a      	mov	sl, r3
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	dd78      	ble.n	3bd6 <__aeabi_dadd+0x292>
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d031      	beq.n	3b4c <__aeabi_dadd+0x208>
    3ae8:	4876      	ldr	r0, [pc, #472]	; (3cc4 <__aeabi_dadd+0x380>)
    3aea:	4286      	cmp	r6, r0
    3aec:	d0ae      	beq.n	3a4c <__aeabi_dadd+0x108>
    3aee:	2080      	movs	r0, #128	; 0x80
    3af0:	0400      	lsls	r0, r0, #16
    3af2:	4301      	orrs	r1, r0
    3af4:	4653      	mov	r3, sl
    3af6:	2b38      	cmp	r3, #56	; 0x38
    3af8:	dc00      	bgt.n	3afc <__aeabi_dadd+0x1b8>
    3afa:	e0e9      	b.n	3cd0 <__aeabi_dadd+0x38c>
    3afc:	430a      	orrs	r2, r1
    3afe:	1e51      	subs	r1, r2, #1
    3b00:	418a      	sbcs	r2, r1
    3b02:	2100      	movs	r1, #0
    3b04:	19d2      	adds	r2, r2, r7
    3b06:	42ba      	cmp	r2, r7
    3b08:	41bf      	sbcs	r7, r7
    3b0a:	1909      	adds	r1, r1, r4
    3b0c:	427c      	negs	r4, r7
    3b0e:	0017      	movs	r7, r2
    3b10:	190c      	adds	r4, r1, r4
    3b12:	0223      	lsls	r3, r4, #8
    3b14:	d5d3      	bpl.n	3abe <__aeabi_dadd+0x17a>
    3b16:	4b6b      	ldr	r3, [pc, #428]	; (3cc4 <__aeabi_dadd+0x380>)
    3b18:	3601      	adds	r6, #1
    3b1a:	429e      	cmp	r6, r3
    3b1c:	d100      	bne.n	3b20 <__aeabi_dadd+0x1dc>
    3b1e:	e13a      	b.n	3d96 <__aeabi_dadd+0x452>
    3b20:	2001      	movs	r0, #1
    3b22:	4b69      	ldr	r3, [pc, #420]	; (3cc8 <__aeabi_dadd+0x384>)
    3b24:	401c      	ands	r4, r3
    3b26:	087b      	lsrs	r3, r7, #1
    3b28:	4007      	ands	r7, r0
    3b2a:	431f      	orrs	r7, r3
    3b2c:	07e0      	lsls	r0, r4, #31
    3b2e:	4307      	orrs	r7, r0
    3b30:	0864      	lsrs	r4, r4, #1
    3b32:	e78b      	b.n	3a4c <__aeabi_dadd+0x108>
    3b34:	0023      	movs	r3, r4
    3b36:	433b      	orrs	r3, r7
    3b38:	d100      	bne.n	3b3c <__aeabi_dadd+0x1f8>
    3b3a:	e1cb      	b.n	3ed4 <__aeabi_dadd+0x590>
    3b3c:	2280      	movs	r2, #128	; 0x80
    3b3e:	0312      	lsls	r2, r2, #12
    3b40:	4314      	orrs	r4, r2
    3b42:	0324      	lsls	r4, r4, #12
    3b44:	0b24      	lsrs	r4, r4, #12
    3b46:	e79e      	b.n	3a86 <__aeabi_dadd+0x142>
    3b48:	002e      	movs	r6, r5
    3b4a:	e77f      	b.n	3a4c <__aeabi_dadd+0x108>
    3b4c:	0008      	movs	r0, r1
    3b4e:	4310      	orrs	r0, r2
    3b50:	d100      	bne.n	3b54 <__aeabi_dadd+0x210>
    3b52:	e0b4      	b.n	3cbe <__aeabi_dadd+0x37a>
    3b54:	1e58      	subs	r0, r3, #1
    3b56:	2800      	cmp	r0, #0
    3b58:	d000      	beq.n	3b5c <__aeabi_dadd+0x218>
    3b5a:	e0de      	b.n	3d1a <__aeabi_dadd+0x3d6>
    3b5c:	18ba      	adds	r2, r7, r2
    3b5e:	42ba      	cmp	r2, r7
    3b60:	419b      	sbcs	r3, r3
    3b62:	1864      	adds	r4, r4, r1
    3b64:	425b      	negs	r3, r3
    3b66:	18e4      	adds	r4, r4, r3
    3b68:	0017      	movs	r7, r2
    3b6a:	2601      	movs	r6, #1
    3b6c:	0223      	lsls	r3, r4, #8
    3b6e:	d5a6      	bpl.n	3abe <__aeabi_dadd+0x17a>
    3b70:	2602      	movs	r6, #2
    3b72:	e7d5      	b.n	3b20 <__aeabi_dadd+0x1dc>
    3b74:	2d00      	cmp	r5, #0
    3b76:	d16e      	bne.n	3c56 <__aeabi_dadd+0x312>
    3b78:	1c70      	adds	r0, r6, #1
    3b7a:	0540      	lsls	r0, r0, #21
    3b7c:	0d40      	lsrs	r0, r0, #21
    3b7e:	2801      	cmp	r0, #1
    3b80:	dc00      	bgt.n	3b84 <__aeabi_dadd+0x240>
    3b82:	e0f9      	b.n	3d78 <__aeabi_dadd+0x434>
    3b84:	1ab8      	subs	r0, r7, r2
    3b86:	4684      	mov	ip, r0
    3b88:	4287      	cmp	r7, r0
    3b8a:	4180      	sbcs	r0, r0
    3b8c:	1ae5      	subs	r5, r4, r3
    3b8e:	4240      	negs	r0, r0
    3b90:	1a2d      	subs	r5, r5, r0
    3b92:	0228      	lsls	r0, r5, #8
    3b94:	d400      	bmi.n	3b98 <__aeabi_dadd+0x254>
    3b96:	e089      	b.n	3cac <__aeabi_dadd+0x368>
    3b98:	1bd7      	subs	r7, r2, r7
    3b9a:	42ba      	cmp	r2, r7
    3b9c:	4192      	sbcs	r2, r2
    3b9e:	1b1c      	subs	r4, r3, r4
    3ba0:	4252      	negs	r2, r2
    3ba2:	1aa5      	subs	r5, r4, r2
    3ba4:	46d8      	mov	r8, fp
    3ba6:	e729      	b.n	39fc <__aeabi_dadd+0xb8>
    3ba8:	4645      	mov	r5, r8
    3baa:	2400      	movs	r4, #0
    3bac:	2700      	movs	r7, #0
    3bae:	e76a      	b.n	3a86 <__aeabi_dadd+0x142>
    3bb0:	4c45      	ldr	r4, [pc, #276]	; (3cc8 <__aeabi_dadd+0x384>)
    3bb2:	1af6      	subs	r6, r6, r3
    3bb4:	402c      	ands	r4, r5
    3bb6:	e749      	b.n	3a4c <__aeabi_dadd+0x108>
    3bb8:	003d      	movs	r5, r7
    3bba:	3828      	subs	r0, #40	; 0x28
    3bbc:	4085      	lsls	r5, r0
    3bbe:	2700      	movs	r7, #0
    3bc0:	e72e      	b.n	3a20 <__aeabi_dadd+0xdc>
    3bc2:	0038      	movs	r0, r7
    3bc4:	f000 fd2a 	bl	461c <__clzsi2>
    3bc8:	3020      	adds	r0, #32
    3bca:	e71d      	b.n	3a08 <__aeabi_dadd+0xc4>
    3bcc:	430a      	orrs	r2, r1
    3bce:	1e51      	subs	r1, r2, #1
    3bd0:	418a      	sbcs	r2, r1
    3bd2:	2100      	movs	r1, #0
    3bd4:	e707      	b.n	39e6 <__aeabi_dadd+0xa2>
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d000      	beq.n	3bdc <__aeabi_dadd+0x298>
    3bda:	e0f3      	b.n	3dc4 <__aeabi_dadd+0x480>
    3bdc:	1c70      	adds	r0, r6, #1
    3bde:	0543      	lsls	r3, r0, #21
    3be0:	0d5b      	lsrs	r3, r3, #21
    3be2:	2b01      	cmp	r3, #1
    3be4:	dc00      	bgt.n	3be8 <__aeabi_dadd+0x2a4>
    3be6:	e0ad      	b.n	3d44 <__aeabi_dadd+0x400>
    3be8:	4b36      	ldr	r3, [pc, #216]	; (3cc4 <__aeabi_dadd+0x380>)
    3bea:	4298      	cmp	r0, r3
    3bec:	d100      	bne.n	3bf0 <__aeabi_dadd+0x2ac>
    3bee:	e0d1      	b.n	3d94 <__aeabi_dadd+0x450>
    3bf0:	18ba      	adds	r2, r7, r2
    3bf2:	42ba      	cmp	r2, r7
    3bf4:	41bf      	sbcs	r7, r7
    3bf6:	1864      	adds	r4, r4, r1
    3bf8:	427f      	negs	r7, r7
    3bfa:	19e4      	adds	r4, r4, r7
    3bfc:	07e7      	lsls	r7, r4, #31
    3bfe:	0852      	lsrs	r2, r2, #1
    3c00:	4317      	orrs	r7, r2
    3c02:	0864      	lsrs	r4, r4, #1
    3c04:	0006      	movs	r6, r0
    3c06:	e721      	b.n	3a4c <__aeabi_dadd+0x108>
    3c08:	482e      	ldr	r0, [pc, #184]	; (3cc4 <__aeabi_dadd+0x380>)
    3c0a:	4285      	cmp	r5, r0
    3c0c:	d100      	bne.n	3c10 <__aeabi_dadd+0x2cc>
    3c0e:	e093      	b.n	3d38 <__aeabi_dadd+0x3f4>
    3c10:	001d      	movs	r5, r3
    3c12:	e6d0      	b.n	39b6 <__aeabi_dadd+0x72>
    3c14:	0029      	movs	r1, r5
    3c16:	3e1f      	subs	r6, #31
    3c18:	40f1      	lsrs	r1, r6
    3c1a:	2b20      	cmp	r3, #32
    3c1c:	d100      	bne.n	3c20 <__aeabi_dadd+0x2dc>
    3c1e:	e08d      	b.n	3d3c <__aeabi_dadd+0x3f8>
    3c20:	2240      	movs	r2, #64	; 0x40
    3c22:	1ad3      	subs	r3, r2, r3
    3c24:	409d      	lsls	r5, r3
    3c26:	432f      	orrs	r7, r5
    3c28:	1e7d      	subs	r5, r7, #1
    3c2a:	41af      	sbcs	r7, r5
    3c2c:	2400      	movs	r4, #0
    3c2e:	430f      	orrs	r7, r1
    3c30:	2600      	movs	r6, #0
    3c32:	e744      	b.n	3abe <__aeabi_dadd+0x17a>
    3c34:	002b      	movs	r3, r5
    3c36:	0008      	movs	r0, r1
    3c38:	3b20      	subs	r3, #32
    3c3a:	40d8      	lsrs	r0, r3
    3c3c:	0003      	movs	r3, r0
    3c3e:	2d20      	cmp	r5, #32
    3c40:	d100      	bne.n	3c44 <__aeabi_dadd+0x300>
    3c42:	e07d      	b.n	3d40 <__aeabi_dadd+0x3fc>
    3c44:	2040      	movs	r0, #64	; 0x40
    3c46:	1b45      	subs	r5, r0, r5
    3c48:	40a9      	lsls	r1, r5
    3c4a:	430a      	orrs	r2, r1
    3c4c:	1e51      	subs	r1, r2, #1
    3c4e:	418a      	sbcs	r2, r1
    3c50:	2100      	movs	r1, #0
    3c52:	431a      	orrs	r2, r3
    3c54:	e6c7      	b.n	39e6 <__aeabi_dadd+0xa2>
    3c56:	2e00      	cmp	r6, #0
    3c58:	d050      	beq.n	3cfc <__aeabi_dadd+0x3b8>
    3c5a:	4e1a      	ldr	r6, [pc, #104]	; (3cc4 <__aeabi_dadd+0x380>)
    3c5c:	42b0      	cmp	r0, r6
    3c5e:	d057      	beq.n	3d10 <__aeabi_dadd+0x3cc>
    3c60:	2680      	movs	r6, #128	; 0x80
    3c62:	426b      	negs	r3, r5
    3c64:	4699      	mov	r9, r3
    3c66:	0436      	lsls	r6, r6, #16
    3c68:	4334      	orrs	r4, r6
    3c6a:	464b      	mov	r3, r9
    3c6c:	2b38      	cmp	r3, #56	; 0x38
    3c6e:	dd00      	ble.n	3c72 <__aeabi_dadd+0x32e>
    3c70:	e0d6      	b.n	3e20 <__aeabi_dadd+0x4dc>
    3c72:	2b1f      	cmp	r3, #31
    3c74:	dd00      	ble.n	3c78 <__aeabi_dadd+0x334>
    3c76:	e135      	b.n	3ee4 <__aeabi_dadd+0x5a0>
    3c78:	2620      	movs	r6, #32
    3c7a:	1af5      	subs	r5, r6, r3
    3c7c:	0026      	movs	r6, r4
    3c7e:	40ae      	lsls	r6, r5
    3c80:	46b2      	mov	sl, r6
    3c82:	003e      	movs	r6, r7
    3c84:	40de      	lsrs	r6, r3
    3c86:	46ac      	mov	ip, r5
    3c88:	0035      	movs	r5, r6
    3c8a:	4656      	mov	r6, sl
    3c8c:	432e      	orrs	r6, r5
    3c8e:	4665      	mov	r5, ip
    3c90:	40af      	lsls	r7, r5
    3c92:	1e7d      	subs	r5, r7, #1
    3c94:	41af      	sbcs	r7, r5
    3c96:	40dc      	lsrs	r4, r3
    3c98:	4337      	orrs	r7, r6
    3c9a:	1bd7      	subs	r7, r2, r7
    3c9c:	42ba      	cmp	r2, r7
    3c9e:	4192      	sbcs	r2, r2
    3ca0:	1b0c      	subs	r4, r1, r4
    3ca2:	4252      	negs	r2, r2
    3ca4:	1aa4      	subs	r4, r4, r2
    3ca6:	0006      	movs	r6, r0
    3ca8:	46d8      	mov	r8, fp
    3caa:	e6a3      	b.n	39f4 <__aeabi_dadd+0xb0>
    3cac:	4664      	mov	r4, ip
    3cae:	4667      	mov	r7, ip
    3cb0:	432c      	orrs	r4, r5
    3cb2:	d000      	beq.n	3cb6 <__aeabi_dadd+0x372>
    3cb4:	e6a2      	b.n	39fc <__aeabi_dadd+0xb8>
    3cb6:	2500      	movs	r5, #0
    3cb8:	2600      	movs	r6, #0
    3cba:	2700      	movs	r7, #0
    3cbc:	e706      	b.n	3acc <__aeabi_dadd+0x188>
    3cbe:	001e      	movs	r6, r3
    3cc0:	e6c4      	b.n	3a4c <__aeabi_dadd+0x108>
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	000007ff 	.word	0x000007ff
    3cc8:	ff7fffff 	.word	0xff7fffff
    3ccc:	800fffff 	.word	0x800fffff
    3cd0:	2b1f      	cmp	r3, #31
    3cd2:	dc63      	bgt.n	3d9c <__aeabi_dadd+0x458>
    3cd4:	2020      	movs	r0, #32
    3cd6:	1ac3      	subs	r3, r0, r3
    3cd8:	0008      	movs	r0, r1
    3cda:	4098      	lsls	r0, r3
    3cdc:	469c      	mov	ip, r3
    3cde:	4683      	mov	fp, r0
    3ce0:	4653      	mov	r3, sl
    3ce2:	0010      	movs	r0, r2
    3ce4:	40d8      	lsrs	r0, r3
    3ce6:	0003      	movs	r3, r0
    3ce8:	4658      	mov	r0, fp
    3cea:	4318      	orrs	r0, r3
    3cec:	4663      	mov	r3, ip
    3cee:	409a      	lsls	r2, r3
    3cf0:	1e53      	subs	r3, r2, #1
    3cf2:	419a      	sbcs	r2, r3
    3cf4:	4653      	mov	r3, sl
    3cf6:	4302      	orrs	r2, r0
    3cf8:	40d9      	lsrs	r1, r3
    3cfa:	e703      	b.n	3b04 <__aeabi_dadd+0x1c0>
    3cfc:	0026      	movs	r6, r4
    3cfe:	433e      	orrs	r6, r7
    3d00:	d006      	beq.n	3d10 <__aeabi_dadd+0x3cc>
    3d02:	43eb      	mvns	r3, r5
    3d04:	4699      	mov	r9, r3
    3d06:	2b00      	cmp	r3, #0
    3d08:	d0c7      	beq.n	3c9a <__aeabi_dadd+0x356>
    3d0a:	4e94      	ldr	r6, [pc, #592]	; (3f5c <__aeabi_dadd+0x618>)
    3d0c:	42b0      	cmp	r0, r6
    3d0e:	d1ac      	bne.n	3c6a <__aeabi_dadd+0x326>
    3d10:	000c      	movs	r4, r1
    3d12:	0017      	movs	r7, r2
    3d14:	0006      	movs	r6, r0
    3d16:	46d8      	mov	r8, fp
    3d18:	e698      	b.n	3a4c <__aeabi_dadd+0x108>
    3d1a:	4b90      	ldr	r3, [pc, #576]	; (3f5c <__aeabi_dadd+0x618>)
    3d1c:	459a      	cmp	sl, r3
    3d1e:	d00b      	beq.n	3d38 <__aeabi_dadd+0x3f4>
    3d20:	4682      	mov	sl, r0
    3d22:	e6e7      	b.n	3af4 <__aeabi_dadd+0x1b0>
    3d24:	2800      	cmp	r0, #0
    3d26:	d000      	beq.n	3d2a <__aeabi_dadd+0x3e6>
    3d28:	e09e      	b.n	3e68 <__aeabi_dadd+0x524>
    3d2a:	0018      	movs	r0, r3
    3d2c:	4310      	orrs	r0, r2
    3d2e:	d100      	bne.n	3d32 <__aeabi_dadd+0x3ee>
    3d30:	e0e9      	b.n	3f06 <__aeabi_dadd+0x5c2>
    3d32:	001c      	movs	r4, r3
    3d34:	0017      	movs	r7, r2
    3d36:	46d8      	mov	r8, fp
    3d38:	4e88      	ldr	r6, [pc, #544]	; (3f5c <__aeabi_dadd+0x618>)
    3d3a:	e687      	b.n	3a4c <__aeabi_dadd+0x108>
    3d3c:	2500      	movs	r5, #0
    3d3e:	e772      	b.n	3c26 <__aeabi_dadd+0x2e2>
    3d40:	2100      	movs	r1, #0
    3d42:	e782      	b.n	3c4a <__aeabi_dadd+0x306>
    3d44:	0023      	movs	r3, r4
    3d46:	433b      	orrs	r3, r7
    3d48:	2e00      	cmp	r6, #0
    3d4a:	d000      	beq.n	3d4e <__aeabi_dadd+0x40a>
    3d4c:	e0ab      	b.n	3ea6 <__aeabi_dadd+0x562>
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d100      	bne.n	3d54 <__aeabi_dadd+0x410>
    3d52:	e0e7      	b.n	3f24 <__aeabi_dadd+0x5e0>
    3d54:	000b      	movs	r3, r1
    3d56:	4313      	orrs	r3, r2
    3d58:	d100      	bne.n	3d5c <__aeabi_dadd+0x418>
    3d5a:	e677      	b.n	3a4c <__aeabi_dadd+0x108>
    3d5c:	18ba      	adds	r2, r7, r2
    3d5e:	42ba      	cmp	r2, r7
    3d60:	41bf      	sbcs	r7, r7
    3d62:	1864      	adds	r4, r4, r1
    3d64:	427f      	negs	r7, r7
    3d66:	19e4      	adds	r4, r4, r7
    3d68:	0223      	lsls	r3, r4, #8
    3d6a:	d400      	bmi.n	3d6e <__aeabi_dadd+0x42a>
    3d6c:	e0f2      	b.n	3f54 <__aeabi_dadd+0x610>
    3d6e:	4b7c      	ldr	r3, [pc, #496]	; (3f60 <__aeabi_dadd+0x61c>)
    3d70:	0017      	movs	r7, r2
    3d72:	401c      	ands	r4, r3
    3d74:	0006      	movs	r6, r0
    3d76:	e669      	b.n	3a4c <__aeabi_dadd+0x108>
    3d78:	0020      	movs	r0, r4
    3d7a:	4338      	orrs	r0, r7
    3d7c:	2e00      	cmp	r6, #0
    3d7e:	d1d1      	bne.n	3d24 <__aeabi_dadd+0x3e0>
    3d80:	2800      	cmp	r0, #0
    3d82:	d15b      	bne.n	3e3c <__aeabi_dadd+0x4f8>
    3d84:	001c      	movs	r4, r3
    3d86:	4314      	orrs	r4, r2
    3d88:	d100      	bne.n	3d8c <__aeabi_dadd+0x448>
    3d8a:	e0a8      	b.n	3ede <__aeabi_dadd+0x59a>
    3d8c:	001c      	movs	r4, r3
    3d8e:	0017      	movs	r7, r2
    3d90:	46d8      	mov	r8, fp
    3d92:	e65b      	b.n	3a4c <__aeabi_dadd+0x108>
    3d94:	0006      	movs	r6, r0
    3d96:	2400      	movs	r4, #0
    3d98:	2700      	movs	r7, #0
    3d9a:	e697      	b.n	3acc <__aeabi_dadd+0x188>
    3d9c:	4650      	mov	r0, sl
    3d9e:	000b      	movs	r3, r1
    3da0:	3820      	subs	r0, #32
    3da2:	40c3      	lsrs	r3, r0
    3da4:	4699      	mov	r9, r3
    3da6:	4653      	mov	r3, sl
    3da8:	2b20      	cmp	r3, #32
    3daa:	d100      	bne.n	3dae <__aeabi_dadd+0x46a>
    3dac:	e095      	b.n	3eda <__aeabi_dadd+0x596>
    3dae:	2340      	movs	r3, #64	; 0x40
    3db0:	4650      	mov	r0, sl
    3db2:	1a1b      	subs	r3, r3, r0
    3db4:	4099      	lsls	r1, r3
    3db6:	430a      	orrs	r2, r1
    3db8:	1e51      	subs	r1, r2, #1
    3dba:	418a      	sbcs	r2, r1
    3dbc:	464b      	mov	r3, r9
    3dbe:	2100      	movs	r1, #0
    3dc0:	431a      	orrs	r2, r3
    3dc2:	e69f      	b.n	3b04 <__aeabi_dadd+0x1c0>
    3dc4:	2e00      	cmp	r6, #0
    3dc6:	d130      	bne.n	3e2a <__aeabi_dadd+0x4e6>
    3dc8:	0026      	movs	r6, r4
    3dca:	433e      	orrs	r6, r7
    3dcc:	d067      	beq.n	3e9e <__aeabi_dadd+0x55a>
    3dce:	43db      	mvns	r3, r3
    3dd0:	469a      	mov	sl, r3
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d01c      	beq.n	3e10 <__aeabi_dadd+0x4cc>
    3dd6:	4e61      	ldr	r6, [pc, #388]	; (3f5c <__aeabi_dadd+0x618>)
    3dd8:	42b0      	cmp	r0, r6
    3dda:	d060      	beq.n	3e9e <__aeabi_dadd+0x55a>
    3ddc:	4653      	mov	r3, sl
    3dde:	2b38      	cmp	r3, #56	; 0x38
    3de0:	dd00      	ble.n	3de4 <__aeabi_dadd+0x4a0>
    3de2:	e096      	b.n	3f12 <__aeabi_dadd+0x5ce>
    3de4:	2b1f      	cmp	r3, #31
    3de6:	dd00      	ble.n	3dea <__aeabi_dadd+0x4a6>
    3de8:	e09f      	b.n	3f2a <__aeabi_dadd+0x5e6>
    3dea:	2620      	movs	r6, #32
    3dec:	1af3      	subs	r3, r6, r3
    3dee:	0026      	movs	r6, r4
    3df0:	409e      	lsls	r6, r3
    3df2:	469c      	mov	ip, r3
    3df4:	46b3      	mov	fp, r6
    3df6:	4653      	mov	r3, sl
    3df8:	003e      	movs	r6, r7
    3dfa:	40de      	lsrs	r6, r3
    3dfc:	0033      	movs	r3, r6
    3dfe:	465e      	mov	r6, fp
    3e00:	431e      	orrs	r6, r3
    3e02:	4663      	mov	r3, ip
    3e04:	409f      	lsls	r7, r3
    3e06:	1e7b      	subs	r3, r7, #1
    3e08:	419f      	sbcs	r7, r3
    3e0a:	4653      	mov	r3, sl
    3e0c:	40dc      	lsrs	r4, r3
    3e0e:	4337      	orrs	r7, r6
    3e10:	18bf      	adds	r7, r7, r2
    3e12:	4297      	cmp	r7, r2
    3e14:	4192      	sbcs	r2, r2
    3e16:	1864      	adds	r4, r4, r1
    3e18:	4252      	negs	r2, r2
    3e1a:	18a4      	adds	r4, r4, r2
    3e1c:	0006      	movs	r6, r0
    3e1e:	e678      	b.n	3b12 <__aeabi_dadd+0x1ce>
    3e20:	4327      	orrs	r7, r4
    3e22:	1e7c      	subs	r4, r7, #1
    3e24:	41a7      	sbcs	r7, r4
    3e26:	2400      	movs	r4, #0
    3e28:	e737      	b.n	3c9a <__aeabi_dadd+0x356>
    3e2a:	4e4c      	ldr	r6, [pc, #304]	; (3f5c <__aeabi_dadd+0x618>)
    3e2c:	42b0      	cmp	r0, r6
    3e2e:	d036      	beq.n	3e9e <__aeabi_dadd+0x55a>
    3e30:	2680      	movs	r6, #128	; 0x80
    3e32:	425b      	negs	r3, r3
    3e34:	0436      	lsls	r6, r6, #16
    3e36:	469a      	mov	sl, r3
    3e38:	4334      	orrs	r4, r6
    3e3a:	e7cf      	b.n	3ddc <__aeabi_dadd+0x498>
    3e3c:	0018      	movs	r0, r3
    3e3e:	4310      	orrs	r0, r2
    3e40:	d100      	bne.n	3e44 <__aeabi_dadd+0x500>
    3e42:	e603      	b.n	3a4c <__aeabi_dadd+0x108>
    3e44:	1ab8      	subs	r0, r7, r2
    3e46:	4684      	mov	ip, r0
    3e48:	4567      	cmp	r7, ip
    3e4a:	41ad      	sbcs	r5, r5
    3e4c:	1ae0      	subs	r0, r4, r3
    3e4e:	426d      	negs	r5, r5
    3e50:	1b40      	subs	r0, r0, r5
    3e52:	0205      	lsls	r5, r0, #8
    3e54:	d400      	bmi.n	3e58 <__aeabi_dadd+0x514>
    3e56:	e62c      	b.n	3ab2 <__aeabi_dadd+0x16e>
    3e58:	1bd7      	subs	r7, r2, r7
    3e5a:	42ba      	cmp	r2, r7
    3e5c:	4192      	sbcs	r2, r2
    3e5e:	1b1c      	subs	r4, r3, r4
    3e60:	4252      	negs	r2, r2
    3e62:	1aa4      	subs	r4, r4, r2
    3e64:	46d8      	mov	r8, fp
    3e66:	e5f1      	b.n	3a4c <__aeabi_dadd+0x108>
    3e68:	0018      	movs	r0, r3
    3e6a:	4310      	orrs	r0, r2
    3e6c:	d100      	bne.n	3e70 <__aeabi_dadd+0x52c>
    3e6e:	e763      	b.n	3d38 <__aeabi_dadd+0x3f4>
    3e70:	08f8      	lsrs	r0, r7, #3
    3e72:	0767      	lsls	r7, r4, #29
    3e74:	4307      	orrs	r7, r0
    3e76:	2080      	movs	r0, #128	; 0x80
    3e78:	08e4      	lsrs	r4, r4, #3
    3e7a:	0300      	lsls	r0, r0, #12
    3e7c:	4204      	tst	r4, r0
    3e7e:	d008      	beq.n	3e92 <__aeabi_dadd+0x54e>
    3e80:	08dd      	lsrs	r5, r3, #3
    3e82:	4205      	tst	r5, r0
    3e84:	d105      	bne.n	3e92 <__aeabi_dadd+0x54e>
    3e86:	08d2      	lsrs	r2, r2, #3
    3e88:	0759      	lsls	r1, r3, #29
    3e8a:	4311      	orrs	r1, r2
    3e8c:	000f      	movs	r7, r1
    3e8e:	002c      	movs	r4, r5
    3e90:	46d8      	mov	r8, fp
    3e92:	0f7b      	lsrs	r3, r7, #29
    3e94:	00e4      	lsls	r4, r4, #3
    3e96:	431c      	orrs	r4, r3
    3e98:	00ff      	lsls	r7, r7, #3
    3e9a:	4e30      	ldr	r6, [pc, #192]	; (3f5c <__aeabi_dadd+0x618>)
    3e9c:	e5d6      	b.n	3a4c <__aeabi_dadd+0x108>
    3e9e:	000c      	movs	r4, r1
    3ea0:	0017      	movs	r7, r2
    3ea2:	0006      	movs	r6, r0
    3ea4:	e5d2      	b.n	3a4c <__aeabi_dadd+0x108>
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d038      	beq.n	3f1c <__aeabi_dadd+0x5d8>
    3eaa:	000b      	movs	r3, r1
    3eac:	4313      	orrs	r3, r2
    3eae:	d100      	bne.n	3eb2 <__aeabi_dadd+0x56e>
    3eb0:	e742      	b.n	3d38 <__aeabi_dadd+0x3f4>
    3eb2:	08f8      	lsrs	r0, r7, #3
    3eb4:	0767      	lsls	r7, r4, #29
    3eb6:	4307      	orrs	r7, r0
    3eb8:	2080      	movs	r0, #128	; 0x80
    3eba:	08e4      	lsrs	r4, r4, #3
    3ebc:	0300      	lsls	r0, r0, #12
    3ebe:	4204      	tst	r4, r0
    3ec0:	d0e7      	beq.n	3e92 <__aeabi_dadd+0x54e>
    3ec2:	08cb      	lsrs	r3, r1, #3
    3ec4:	4203      	tst	r3, r0
    3ec6:	d1e4      	bne.n	3e92 <__aeabi_dadd+0x54e>
    3ec8:	08d2      	lsrs	r2, r2, #3
    3eca:	0749      	lsls	r1, r1, #29
    3ecc:	4311      	orrs	r1, r2
    3ece:	000f      	movs	r7, r1
    3ed0:	001c      	movs	r4, r3
    3ed2:	e7de      	b.n	3e92 <__aeabi_dadd+0x54e>
    3ed4:	2700      	movs	r7, #0
    3ed6:	2400      	movs	r4, #0
    3ed8:	e5d5      	b.n	3a86 <__aeabi_dadd+0x142>
    3eda:	2100      	movs	r1, #0
    3edc:	e76b      	b.n	3db6 <__aeabi_dadd+0x472>
    3ede:	2500      	movs	r5, #0
    3ee0:	2700      	movs	r7, #0
    3ee2:	e5f3      	b.n	3acc <__aeabi_dadd+0x188>
    3ee4:	464e      	mov	r6, r9
    3ee6:	0025      	movs	r5, r4
    3ee8:	3e20      	subs	r6, #32
    3eea:	40f5      	lsrs	r5, r6
    3eec:	464b      	mov	r3, r9
    3eee:	002e      	movs	r6, r5
    3ef0:	2b20      	cmp	r3, #32
    3ef2:	d02d      	beq.n	3f50 <__aeabi_dadd+0x60c>
    3ef4:	2540      	movs	r5, #64	; 0x40
    3ef6:	1aed      	subs	r5, r5, r3
    3ef8:	40ac      	lsls	r4, r5
    3efa:	4327      	orrs	r7, r4
    3efc:	1e7c      	subs	r4, r7, #1
    3efe:	41a7      	sbcs	r7, r4
    3f00:	2400      	movs	r4, #0
    3f02:	4337      	orrs	r7, r6
    3f04:	e6c9      	b.n	3c9a <__aeabi_dadd+0x356>
    3f06:	2480      	movs	r4, #128	; 0x80
    3f08:	2500      	movs	r5, #0
    3f0a:	0324      	lsls	r4, r4, #12
    3f0c:	4e13      	ldr	r6, [pc, #76]	; (3f5c <__aeabi_dadd+0x618>)
    3f0e:	2700      	movs	r7, #0
    3f10:	e5dc      	b.n	3acc <__aeabi_dadd+0x188>
    3f12:	4327      	orrs	r7, r4
    3f14:	1e7c      	subs	r4, r7, #1
    3f16:	41a7      	sbcs	r7, r4
    3f18:	2400      	movs	r4, #0
    3f1a:	e779      	b.n	3e10 <__aeabi_dadd+0x4cc>
    3f1c:	000c      	movs	r4, r1
    3f1e:	0017      	movs	r7, r2
    3f20:	4e0e      	ldr	r6, [pc, #56]	; (3f5c <__aeabi_dadd+0x618>)
    3f22:	e593      	b.n	3a4c <__aeabi_dadd+0x108>
    3f24:	000c      	movs	r4, r1
    3f26:	0017      	movs	r7, r2
    3f28:	e590      	b.n	3a4c <__aeabi_dadd+0x108>
    3f2a:	4656      	mov	r6, sl
    3f2c:	0023      	movs	r3, r4
    3f2e:	3e20      	subs	r6, #32
    3f30:	40f3      	lsrs	r3, r6
    3f32:	4699      	mov	r9, r3
    3f34:	4653      	mov	r3, sl
    3f36:	2b20      	cmp	r3, #32
    3f38:	d00e      	beq.n	3f58 <__aeabi_dadd+0x614>
    3f3a:	2340      	movs	r3, #64	; 0x40
    3f3c:	4656      	mov	r6, sl
    3f3e:	1b9b      	subs	r3, r3, r6
    3f40:	409c      	lsls	r4, r3
    3f42:	4327      	orrs	r7, r4
    3f44:	1e7c      	subs	r4, r7, #1
    3f46:	41a7      	sbcs	r7, r4
    3f48:	464b      	mov	r3, r9
    3f4a:	2400      	movs	r4, #0
    3f4c:	431f      	orrs	r7, r3
    3f4e:	e75f      	b.n	3e10 <__aeabi_dadd+0x4cc>
    3f50:	2400      	movs	r4, #0
    3f52:	e7d2      	b.n	3efa <__aeabi_dadd+0x5b6>
    3f54:	0017      	movs	r7, r2
    3f56:	e5b2      	b.n	3abe <__aeabi_dadd+0x17a>
    3f58:	2400      	movs	r4, #0
    3f5a:	e7f2      	b.n	3f42 <__aeabi_dadd+0x5fe>
    3f5c:	000007ff 	.word	0x000007ff
    3f60:	ff7fffff 	.word	0xff7fffff

00003f64 <__aeabi_dmul>:
    3f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f66:	4657      	mov	r7, sl
    3f68:	4645      	mov	r5, r8
    3f6a:	46de      	mov	lr, fp
    3f6c:	464e      	mov	r6, r9
    3f6e:	b5e0      	push	{r5, r6, r7, lr}
    3f70:	030c      	lsls	r4, r1, #12
    3f72:	4698      	mov	r8, r3
    3f74:	004e      	lsls	r6, r1, #1
    3f76:	0b23      	lsrs	r3, r4, #12
    3f78:	b087      	sub	sp, #28
    3f7a:	0007      	movs	r7, r0
    3f7c:	4692      	mov	sl, r2
    3f7e:	469b      	mov	fp, r3
    3f80:	0d76      	lsrs	r6, r6, #21
    3f82:	0fcd      	lsrs	r5, r1, #31
    3f84:	2e00      	cmp	r6, #0
    3f86:	d06b      	beq.n	4060 <__aeabi_dmul+0xfc>
    3f88:	4b6d      	ldr	r3, [pc, #436]	; (4140 <__aeabi_dmul+0x1dc>)
    3f8a:	429e      	cmp	r6, r3
    3f8c:	d035      	beq.n	3ffa <__aeabi_dmul+0x96>
    3f8e:	2480      	movs	r4, #128	; 0x80
    3f90:	465b      	mov	r3, fp
    3f92:	0f42      	lsrs	r2, r0, #29
    3f94:	0424      	lsls	r4, r4, #16
    3f96:	00db      	lsls	r3, r3, #3
    3f98:	4314      	orrs	r4, r2
    3f9a:	431c      	orrs	r4, r3
    3f9c:	00c3      	lsls	r3, r0, #3
    3f9e:	4699      	mov	r9, r3
    3fa0:	4b68      	ldr	r3, [pc, #416]	; (4144 <__aeabi_dmul+0x1e0>)
    3fa2:	46a3      	mov	fp, r4
    3fa4:	469c      	mov	ip, r3
    3fa6:	2300      	movs	r3, #0
    3fa8:	2700      	movs	r7, #0
    3faa:	4466      	add	r6, ip
    3fac:	9302      	str	r3, [sp, #8]
    3fae:	4643      	mov	r3, r8
    3fb0:	031c      	lsls	r4, r3, #12
    3fb2:	005a      	lsls	r2, r3, #1
    3fb4:	0fdb      	lsrs	r3, r3, #31
    3fb6:	4650      	mov	r0, sl
    3fb8:	0b24      	lsrs	r4, r4, #12
    3fba:	0d52      	lsrs	r2, r2, #21
    3fbc:	4698      	mov	r8, r3
    3fbe:	d100      	bne.n	3fc2 <__aeabi_dmul+0x5e>
    3fc0:	e076      	b.n	40b0 <__aeabi_dmul+0x14c>
    3fc2:	4b5f      	ldr	r3, [pc, #380]	; (4140 <__aeabi_dmul+0x1dc>)
    3fc4:	429a      	cmp	r2, r3
    3fc6:	d06d      	beq.n	40a4 <__aeabi_dmul+0x140>
    3fc8:	2380      	movs	r3, #128	; 0x80
    3fca:	0f41      	lsrs	r1, r0, #29
    3fcc:	041b      	lsls	r3, r3, #16
    3fce:	430b      	orrs	r3, r1
    3fd0:	495c      	ldr	r1, [pc, #368]	; (4144 <__aeabi_dmul+0x1e0>)
    3fd2:	00e4      	lsls	r4, r4, #3
    3fd4:	468c      	mov	ip, r1
    3fd6:	431c      	orrs	r4, r3
    3fd8:	00c3      	lsls	r3, r0, #3
    3fda:	2000      	movs	r0, #0
    3fdc:	4462      	add	r2, ip
    3fde:	4641      	mov	r1, r8
    3fe0:	18b6      	adds	r6, r6, r2
    3fe2:	4069      	eors	r1, r5
    3fe4:	1c72      	adds	r2, r6, #1
    3fe6:	9101      	str	r1, [sp, #4]
    3fe8:	4694      	mov	ip, r2
    3fea:	4307      	orrs	r7, r0
    3fec:	2f0f      	cmp	r7, #15
    3fee:	d900      	bls.n	3ff2 <__aeabi_dmul+0x8e>
    3ff0:	e0b0      	b.n	4154 <__aeabi_dmul+0x1f0>
    3ff2:	4a55      	ldr	r2, [pc, #340]	; (4148 <__aeabi_dmul+0x1e4>)
    3ff4:	00bf      	lsls	r7, r7, #2
    3ff6:	59d2      	ldr	r2, [r2, r7]
    3ff8:	4697      	mov	pc, r2
    3ffa:	465b      	mov	r3, fp
    3ffc:	4303      	orrs	r3, r0
    3ffe:	4699      	mov	r9, r3
    4000:	d000      	beq.n	4004 <__aeabi_dmul+0xa0>
    4002:	e087      	b.n	4114 <__aeabi_dmul+0x1b0>
    4004:	2300      	movs	r3, #0
    4006:	469b      	mov	fp, r3
    4008:	3302      	adds	r3, #2
    400a:	2708      	movs	r7, #8
    400c:	9302      	str	r3, [sp, #8]
    400e:	e7ce      	b.n	3fae <__aeabi_dmul+0x4a>
    4010:	4642      	mov	r2, r8
    4012:	9201      	str	r2, [sp, #4]
    4014:	2802      	cmp	r0, #2
    4016:	d067      	beq.n	40e8 <__aeabi_dmul+0x184>
    4018:	2803      	cmp	r0, #3
    401a:	d100      	bne.n	401e <__aeabi_dmul+0xba>
    401c:	e20e      	b.n	443c <__aeabi_dmul+0x4d8>
    401e:	2801      	cmp	r0, #1
    4020:	d000      	beq.n	4024 <__aeabi_dmul+0xc0>
    4022:	e162      	b.n	42ea <__aeabi_dmul+0x386>
    4024:	2300      	movs	r3, #0
    4026:	2400      	movs	r4, #0
    4028:	2200      	movs	r2, #0
    402a:	4699      	mov	r9, r3
    402c:	9901      	ldr	r1, [sp, #4]
    402e:	4001      	ands	r1, r0
    4030:	b2cd      	uxtb	r5, r1
    4032:	2100      	movs	r1, #0
    4034:	0312      	lsls	r2, r2, #12
    4036:	0d0b      	lsrs	r3, r1, #20
    4038:	0b12      	lsrs	r2, r2, #12
    403a:	051b      	lsls	r3, r3, #20
    403c:	4313      	orrs	r3, r2
    403e:	4a43      	ldr	r2, [pc, #268]	; (414c <__aeabi_dmul+0x1e8>)
    4040:	0524      	lsls	r4, r4, #20
    4042:	4013      	ands	r3, r2
    4044:	431c      	orrs	r4, r3
    4046:	0064      	lsls	r4, r4, #1
    4048:	07ed      	lsls	r5, r5, #31
    404a:	0864      	lsrs	r4, r4, #1
    404c:	432c      	orrs	r4, r5
    404e:	4648      	mov	r0, r9
    4050:	0021      	movs	r1, r4
    4052:	b007      	add	sp, #28
    4054:	bc3c      	pop	{r2, r3, r4, r5}
    4056:	4690      	mov	r8, r2
    4058:	4699      	mov	r9, r3
    405a:	46a2      	mov	sl, r4
    405c:	46ab      	mov	fp, r5
    405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4060:	4303      	orrs	r3, r0
    4062:	4699      	mov	r9, r3
    4064:	d04f      	beq.n	4106 <__aeabi_dmul+0x1a2>
    4066:	465b      	mov	r3, fp
    4068:	2b00      	cmp	r3, #0
    406a:	d100      	bne.n	406e <__aeabi_dmul+0x10a>
    406c:	e189      	b.n	4382 <__aeabi_dmul+0x41e>
    406e:	4658      	mov	r0, fp
    4070:	f000 fad4 	bl	461c <__clzsi2>
    4074:	0003      	movs	r3, r0
    4076:	3b0b      	subs	r3, #11
    4078:	2b1c      	cmp	r3, #28
    407a:	dd00      	ble.n	407e <__aeabi_dmul+0x11a>
    407c:	e17a      	b.n	4374 <__aeabi_dmul+0x410>
    407e:	221d      	movs	r2, #29
    4080:	1ad3      	subs	r3, r2, r3
    4082:	003a      	movs	r2, r7
    4084:	0001      	movs	r1, r0
    4086:	465c      	mov	r4, fp
    4088:	40da      	lsrs	r2, r3
    408a:	3908      	subs	r1, #8
    408c:	408c      	lsls	r4, r1
    408e:	0013      	movs	r3, r2
    4090:	408f      	lsls	r7, r1
    4092:	4323      	orrs	r3, r4
    4094:	469b      	mov	fp, r3
    4096:	46b9      	mov	r9, r7
    4098:	2300      	movs	r3, #0
    409a:	4e2d      	ldr	r6, [pc, #180]	; (4150 <__aeabi_dmul+0x1ec>)
    409c:	2700      	movs	r7, #0
    409e:	1a36      	subs	r6, r6, r0
    40a0:	9302      	str	r3, [sp, #8]
    40a2:	e784      	b.n	3fae <__aeabi_dmul+0x4a>
    40a4:	4653      	mov	r3, sl
    40a6:	4323      	orrs	r3, r4
    40a8:	d12a      	bne.n	4100 <__aeabi_dmul+0x19c>
    40aa:	2400      	movs	r4, #0
    40ac:	2002      	movs	r0, #2
    40ae:	e796      	b.n	3fde <__aeabi_dmul+0x7a>
    40b0:	4653      	mov	r3, sl
    40b2:	4323      	orrs	r3, r4
    40b4:	d020      	beq.n	40f8 <__aeabi_dmul+0x194>
    40b6:	2c00      	cmp	r4, #0
    40b8:	d100      	bne.n	40bc <__aeabi_dmul+0x158>
    40ba:	e157      	b.n	436c <__aeabi_dmul+0x408>
    40bc:	0020      	movs	r0, r4
    40be:	f000 faad 	bl	461c <__clzsi2>
    40c2:	0003      	movs	r3, r0
    40c4:	3b0b      	subs	r3, #11
    40c6:	2b1c      	cmp	r3, #28
    40c8:	dd00      	ble.n	40cc <__aeabi_dmul+0x168>
    40ca:	e149      	b.n	4360 <__aeabi_dmul+0x3fc>
    40cc:	211d      	movs	r1, #29
    40ce:	1acb      	subs	r3, r1, r3
    40d0:	4651      	mov	r1, sl
    40d2:	0002      	movs	r2, r0
    40d4:	40d9      	lsrs	r1, r3
    40d6:	4653      	mov	r3, sl
    40d8:	3a08      	subs	r2, #8
    40da:	4094      	lsls	r4, r2
    40dc:	4093      	lsls	r3, r2
    40de:	430c      	orrs	r4, r1
    40e0:	4a1b      	ldr	r2, [pc, #108]	; (4150 <__aeabi_dmul+0x1ec>)
    40e2:	1a12      	subs	r2, r2, r0
    40e4:	2000      	movs	r0, #0
    40e6:	e77a      	b.n	3fde <__aeabi_dmul+0x7a>
    40e8:	2501      	movs	r5, #1
    40ea:	9b01      	ldr	r3, [sp, #4]
    40ec:	4c14      	ldr	r4, [pc, #80]	; (4140 <__aeabi_dmul+0x1dc>)
    40ee:	401d      	ands	r5, r3
    40f0:	2300      	movs	r3, #0
    40f2:	2200      	movs	r2, #0
    40f4:	4699      	mov	r9, r3
    40f6:	e79c      	b.n	4032 <__aeabi_dmul+0xce>
    40f8:	2400      	movs	r4, #0
    40fa:	2200      	movs	r2, #0
    40fc:	2001      	movs	r0, #1
    40fe:	e76e      	b.n	3fde <__aeabi_dmul+0x7a>
    4100:	4653      	mov	r3, sl
    4102:	2003      	movs	r0, #3
    4104:	e76b      	b.n	3fde <__aeabi_dmul+0x7a>
    4106:	2300      	movs	r3, #0
    4108:	469b      	mov	fp, r3
    410a:	3301      	adds	r3, #1
    410c:	2704      	movs	r7, #4
    410e:	2600      	movs	r6, #0
    4110:	9302      	str	r3, [sp, #8]
    4112:	e74c      	b.n	3fae <__aeabi_dmul+0x4a>
    4114:	2303      	movs	r3, #3
    4116:	4681      	mov	r9, r0
    4118:	270c      	movs	r7, #12
    411a:	9302      	str	r3, [sp, #8]
    411c:	e747      	b.n	3fae <__aeabi_dmul+0x4a>
    411e:	2280      	movs	r2, #128	; 0x80
    4120:	2300      	movs	r3, #0
    4122:	2500      	movs	r5, #0
    4124:	0312      	lsls	r2, r2, #12
    4126:	4699      	mov	r9, r3
    4128:	4c05      	ldr	r4, [pc, #20]	; (4140 <__aeabi_dmul+0x1dc>)
    412a:	e782      	b.n	4032 <__aeabi_dmul+0xce>
    412c:	465c      	mov	r4, fp
    412e:	464b      	mov	r3, r9
    4130:	9802      	ldr	r0, [sp, #8]
    4132:	e76f      	b.n	4014 <__aeabi_dmul+0xb0>
    4134:	465c      	mov	r4, fp
    4136:	464b      	mov	r3, r9
    4138:	9501      	str	r5, [sp, #4]
    413a:	9802      	ldr	r0, [sp, #8]
    413c:	e76a      	b.n	4014 <__aeabi_dmul+0xb0>
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	000007ff 	.word	0x000007ff
    4144:	fffffc01 	.word	0xfffffc01
    4148:	0000484c 	.word	0x0000484c
    414c:	800fffff 	.word	0x800fffff
    4150:	fffffc0d 	.word	0xfffffc0d
    4154:	464a      	mov	r2, r9
    4156:	4649      	mov	r1, r9
    4158:	0c17      	lsrs	r7, r2, #16
    415a:	0c1a      	lsrs	r2, r3, #16
    415c:	041b      	lsls	r3, r3, #16
    415e:	0c1b      	lsrs	r3, r3, #16
    4160:	0408      	lsls	r0, r1, #16
    4162:	0019      	movs	r1, r3
    4164:	0c00      	lsrs	r0, r0, #16
    4166:	4341      	muls	r1, r0
    4168:	0015      	movs	r5, r2
    416a:	4688      	mov	r8, r1
    416c:	0019      	movs	r1, r3
    416e:	437d      	muls	r5, r7
    4170:	4379      	muls	r1, r7
    4172:	9503      	str	r5, [sp, #12]
    4174:	4689      	mov	r9, r1
    4176:	0029      	movs	r1, r5
    4178:	0015      	movs	r5, r2
    417a:	4345      	muls	r5, r0
    417c:	444d      	add	r5, r9
    417e:	9502      	str	r5, [sp, #8]
    4180:	4645      	mov	r5, r8
    4182:	0c2d      	lsrs	r5, r5, #16
    4184:	46aa      	mov	sl, r5
    4186:	9d02      	ldr	r5, [sp, #8]
    4188:	4455      	add	r5, sl
    418a:	45a9      	cmp	r9, r5
    418c:	d906      	bls.n	419c <__aeabi_dmul+0x238>
    418e:	468a      	mov	sl, r1
    4190:	2180      	movs	r1, #128	; 0x80
    4192:	0249      	lsls	r1, r1, #9
    4194:	4689      	mov	r9, r1
    4196:	44ca      	add	sl, r9
    4198:	4651      	mov	r1, sl
    419a:	9103      	str	r1, [sp, #12]
    419c:	0c29      	lsrs	r1, r5, #16
    419e:	9104      	str	r1, [sp, #16]
    41a0:	4641      	mov	r1, r8
    41a2:	0409      	lsls	r1, r1, #16
    41a4:	042d      	lsls	r5, r5, #16
    41a6:	0c09      	lsrs	r1, r1, #16
    41a8:	4688      	mov	r8, r1
    41aa:	0029      	movs	r1, r5
    41ac:	0c25      	lsrs	r5, r4, #16
    41ae:	0424      	lsls	r4, r4, #16
    41b0:	4441      	add	r1, r8
    41b2:	0c24      	lsrs	r4, r4, #16
    41b4:	9105      	str	r1, [sp, #20]
    41b6:	0021      	movs	r1, r4
    41b8:	4341      	muls	r1, r0
    41ba:	4688      	mov	r8, r1
    41bc:	0021      	movs	r1, r4
    41be:	4379      	muls	r1, r7
    41c0:	468a      	mov	sl, r1
    41c2:	4368      	muls	r0, r5
    41c4:	4641      	mov	r1, r8
    41c6:	4450      	add	r0, sl
    41c8:	4681      	mov	r9, r0
    41ca:	0c08      	lsrs	r0, r1, #16
    41cc:	4448      	add	r0, r9
    41ce:	436f      	muls	r7, r5
    41d0:	4582      	cmp	sl, r0
    41d2:	d903      	bls.n	41dc <__aeabi_dmul+0x278>
    41d4:	2180      	movs	r1, #128	; 0x80
    41d6:	0249      	lsls	r1, r1, #9
    41d8:	4689      	mov	r9, r1
    41da:	444f      	add	r7, r9
    41dc:	0c01      	lsrs	r1, r0, #16
    41de:	4689      	mov	r9, r1
    41e0:	0039      	movs	r1, r7
    41e2:	4449      	add	r1, r9
    41e4:	9102      	str	r1, [sp, #8]
    41e6:	4641      	mov	r1, r8
    41e8:	040f      	lsls	r7, r1, #16
    41ea:	9904      	ldr	r1, [sp, #16]
    41ec:	0c3f      	lsrs	r7, r7, #16
    41ee:	4688      	mov	r8, r1
    41f0:	0400      	lsls	r0, r0, #16
    41f2:	19c0      	adds	r0, r0, r7
    41f4:	4480      	add	r8, r0
    41f6:	4641      	mov	r1, r8
    41f8:	9104      	str	r1, [sp, #16]
    41fa:	4659      	mov	r1, fp
    41fc:	0c0f      	lsrs	r7, r1, #16
    41fe:	0409      	lsls	r1, r1, #16
    4200:	0c09      	lsrs	r1, r1, #16
    4202:	4688      	mov	r8, r1
    4204:	4359      	muls	r1, r3
    4206:	468a      	mov	sl, r1
    4208:	0039      	movs	r1, r7
    420a:	4351      	muls	r1, r2
    420c:	4689      	mov	r9, r1
    420e:	4641      	mov	r1, r8
    4210:	434a      	muls	r2, r1
    4212:	4651      	mov	r1, sl
    4214:	0c09      	lsrs	r1, r1, #16
    4216:	468b      	mov	fp, r1
    4218:	437b      	muls	r3, r7
    421a:	18d2      	adds	r2, r2, r3
    421c:	445a      	add	r2, fp
    421e:	4293      	cmp	r3, r2
    4220:	d903      	bls.n	422a <__aeabi_dmul+0x2c6>
    4222:	2380      	movs	r3, #128	; 0x80
    4224:	025b      	lsls	r3, r3, #9
    4226:	469b      	mov	fp, r3
    4228:	44d9      	add	r9, fp
    422a:	4651      	mov	r1, sl
    422c:	0409      	lsls	r1, r1, #16
    422e:	0c09      	lsrs	r1, r1, #16
    4230:	468a      	mov	sl, r1
    4232:	4641      	mov	r1, r8
    4234:	4361      	muls	r1, r4
    4236:	437c      	muls	r4, r7
    4238:	0c13      	lsrs	r3, r2, #16
    423a:	0412      	lsls	r2, r2, #16
    423c:	444b      	add	r3, r9
    423e:	4452      	add	r2, sl
    4240:	46a1      	mov	r9, r4
    4242:	468a      	mov	sl, r1
    4244:	003c      	movs	r4, r7
    4246:	4641      	mov	r1, r8
    4248:	436c      	muls	r4, r5
    424a:	434d      	muls	r5, r1
    424c:	4651      	mov	r1, sl
    424e:	444d      	add	r5, r9
    4250:	0c0f      	lsrs	r7, r1, #16
    4252:	197d      	adds	r5, r7, r5
    4254:	45a9      	cmp	r9, r5
    4256:	d903      	bls.n	4260 <__aeabi_dmul+0x2fc>
    4258:	2180      	movs	r1, #128	; 0x80
    425a:	0249      	lsls	r1, r1, #9
    425c:	4688      	mov	r8, r1
    425e:	4444      	add	r4, r8
    4260:	9f04      	ldr	r7, [sp, #16]
    4262:	9903      	ldr	r1, [sp, #12]
    4264:	46b8      	mov	r8, r7
    4266:	4441      	add	r1, r8
    4268:	468b      	mov	fp, r1
    426a:	4583      	cmp	fp, r0
    426c:	4180      	sbcs	r0, r0
    426e:	4241      	negs	r1, r0
    4270:	4688      	mov	r8, r1
    4272:	4651      	mov	r1, sl
    4274:	0408      	lsls	r0, r1, #16
    4276:	042f      	lsls	r7, r5, #16
    4278:	0c00      	lsrs	r0, r0, #16
    427a:	183f      	adds	r7, r7, r0
    427c:	4658      	mov	r0, fp
    427e:	9902      	ldr	r1, [sp, #8]
    4280:	1810      	adds	r0, r2, r0
    4282:	4689      	mov	r9, r1
    4284:	4290      	cmp	r0, r2
    4286:	4192      	sbcs	r2, r2
    4288:	444f      	add	r7, r9
    428a:	46ba      	mov	sl, r7
    428c:	4252      	negs	r2, r2
    428e:	4699      	mov	r9, r3
    4290:	4693      	mov	fp, r2
    4292:	44c2      	add	sl, r8
    4294:	44d1      	add	r9, sl
    4296:	44cb      	add	fp, r9
    4298:	428f      	cmp	r7, r1
    429a:	41bf      	sbcs	r7, r7
    429c:	45c2      	cmp	sl, r8
    429e:	4189      	sbcs	r1, r1
    42a0:	4599      	cmp	r9, r3
    42a2:	419b      	sbcs	r3, r3
    42a4:	4593      	cmp	fp, r2
    42a6:	4192      	sbcs	r2, r2
    42a8:	427f      	negs	r7, r7
    42aa:	4249      	negs	r1, r1
    42ac:	0c2d      	lsrs	r5, r5, #16
    42ae:	4252      	negs	r2, r2
    42b0:	430f      	orrs	r7, r1
    42b2:	425b      	negs	r3, r3
    42b4:	4313      	orrs	r3, r2
    42b6:	197f      	adds	r7, r7, r5
    42b8:	18ff      	adds	r7, r7, r3
    42ba:	465b      	mov	r3, fp
    42bc:	193c      	adds	r4, r7, r4
    42be:	0ddb      	lsrs	r3, r3, #23
    42c0:	9a05      	ldr	r2, [sp, #20]
    42c2:	0264      	lsls	r4, r4, #9
    42c4:	431c      	orrs	r4, r3
    42c6:	0243      	lsls	r3, r0, #9
    42c8:	4313      	orrs	r3, r2
    42ca:	1e5d      	subs	r5, r3, #1
    42cc:	41ab      	sbcs	r3, r5
    42ce:	465a      	mov	r2, fp
    42d0:	0dc0      	lsrs	r0, r0, #23
    42d2:	4303      	orrs	r3, r0
    42d4:	0252      	lsls	r2, r2, #9
    42d6:	4313      	orrs	r3, r2
    42d8:	01e2      	lsls	r2, r4, #7
    42da:	d556      	bpl.n	438a <__aeabi_dmul+0x426>
    42dc:	2001      	movs	r0, #1
    42de:	085a      	lsrs	r2, r3, #1
    42e0:	4003      	ands	r3, r0
    42e2:	4313      	orrs	r3, r2
    42e4:	07e2      	lsls	r2, r4, #31
    42e6:	4313      	orrs	r3, r2
    42e8:	0864      	lsrs	r4, r4, #1
    42ea:	485a      	ldr	r0, [pc, #360]	; (4454 <__aeabi_dmul+0x4f0>)
    42ec:	4460      	add	r0, ip
    42ee:	2800      	cmp	r0, #0
    42f0:	dd4d      	ble.n	438e <__aeabi_dmul+0x42a>
    42f2:	075a      	lsls	r2, r3, #29
    42f4:	d009      	beq.n	430a <__aeabi_dmul+0x3a6>
    42f6:	220f      	movs	r2, #15
    42f8:	401a      	ands	r2, r3
    42fa:	2a04      	cmp	r2, #4
    42fc:	d005      	beq.n	430a <__aeabi_dmul+0x3a6>
    42fe:	1d1a      	adds	r2, r3, #4
    4300:	429a      	cmp	r2, r3
    4302:	419b      	sbcs	r3, r3
    4304:	425b      	negs	r3, r3
    4306:	18e4      	adds	r4, r4, r3
    4308:	0013      	movs	r3, r2
    430a:	01e2      	lsls	r2, r4, #7
    430c:	d504      	bpl.n	4318 <__aeabi_dmul+0x3b4>
    430e:	2080      	movs	r0, #128	; 0x80
    4310:	4a51      	ldr	r2, [pc, #324]	; (4458 <__aeabi_dmul+0x4f4>)
    4312:	00c0      	lsls	r0, r0, #3
    4314:	4014      	ands	r4, r2
    4316:	4460      	add	r0, ip
    4318:	4a50      	ldr	r2, [pc, #320]	; (445c <__aeabi_dmul+0x4f8>)
    431a:	4290      	cmp	r0, r2
    431c:	dd00      	ble.n	4320 <__aeabi_dmul+0x3bc>
    431e:	e6e3      	b.n	40e8 <__aeabi_dmul+0x184>
    4320:	2501      	movs	r5, #1
    4322:	08db      	lsrs	r3, r3, #3
    4324:	0762      	lsls	r2, r4, #29
    4326:	431a      	orrs	r2, r3
    4328:	0264      	lsls	r4, r4, #9
    432a:	9b01      	ldr	r3, [sp, #4]
    432c:	4691      	mov	r9, r2
    432e:	0b22      	lsrs	r2, r4, #12
    4330:	0544      	lsls	r4, r0, #21
    4332:	0d64      	lsrs	r4, r4, #21
    4334:	401d      	ands	r5, r3
    4336:	e67c      	b.n	4032 <__aeabi_dmul+0xce>
    4338:	2280      	movs	r2, #128	; 0x80
    433a:	4659      	mov	r1, fp
    433c:	0312      	lsls	r2, r2, #12
    433e:	4211      	tst	r1, r2
    4340:	d008      	beq.n	4354 <__aeabi_dmul+0x3f0>
    4342:	4214      	tst	r4, r2
    4344:	d106      	bne.n	4354 <__aeabi_dmul+0x3f0>
    4346:	4322      	orrs	r2, r4
    4348:	0312      	lsls	r2, r2, #12
    434a:	0b12      	lsrs	r2, r2, #12
    434c:	4645      	mov	r5, r8
    434e:	4699      	mov	r9, r3
    4350:	4c43      	ldr	r4, [pc, #268]	; (4460 <__aeabi_dmul+0x4fc>)
    4352:	e66e      	b.n	4032 <__aeabi_dmul+0xce>
    4354:	465b      	mov	r3, fp
    4356:	431a      	orrs	r2, r3
    4358:	0312      	lsls	r2, r2, #12
    435a:	0b12      	lsrs	r2, r2, #12
    435c:	4c40      	ldr	r4, [pc, #256]	; (4460 <__aeabi_dmul+0x4fc>)
    435e:	e668      	b.n	4032 <__aeabi_dmul+0xce>
    4360:	0003      	movs	r3, r0
    4362:	4654      	mov	r4, sl
    4364:	3b28      	subs	r3, #40	; 0x28
    4366:	409c      	lsls	r4, r3
    4368:	2300      	movs	r3, #0
    436a:	e6b9      	b.n	40e0 <__aeabi_dmul+0x17c>
    436c:	f000 f956 	bl	461c <__clzsi2>
    4370:	3020      	adds	r0, #32
    4372:	e6a6      	b.n	40c2 <__aeabi_dmul+0x15e>
    4374:	0003      	movs	r3, r0
    4376:	3b28      	subs	r3, #40	; 0x28
    4378:	409f      	lsls	r7, r3
    437a:	2300      	movs	r3, #0
    437c:	46bb      	mov	fp, r7
    437e:	4699      	mov	r9, r3
    4380:	e68a      	b.n	4098 <__aeabi_dmul+0x134>
    4382:	f000 f94b 	bl	461c <__clzsi2>
    4386:	3020      	adds	r0, #32
    4388:	e674      	b.n	4074 <__aeabi_dmul+0x110>
    438a:	46b4      	mov	ip, r6
    438c:	e7ad      	b.n	42ea <__aeabi_dmul+0x386>
    438e:	2501      	movs	r5, #1
    4390:	1a2a      	subs	r2, r5, r0
    4392:	2a38      	cmp	r2, #56	; 0x38
    4394:	dd06      	ble.n	43a4 <__aeabi_dmul+0x440>
    4396:	9b01      	ldr	r3, [sp, #4]
    4398:	2400      	movs	r4, #0
    439a:	401d      	ands	r5, r3
    439c:	2300      	movs	r3, #0
    439e:	2200      	movs	r2, #0
    43a0:	4699      	mov	r9, r3
    43a2:	e646      	b.n	4032 <__aeabi_dmul+0xce>
    43a4:	2a1f      	cmp	r2, #31
    43a6:	dc21      	bgt.n	43ec <__aeabi_dmul+0x488>
    43a8:	2520      	movs	r5, #32
    43aa:	0020      	movs	r0, r4
    43ac:	1aad      	subs	r5, r5, r2
    43ae:	001e      	movs	r6, r3
    43b0:	40ab      	lsls	r3, r5
    43b2:	40a8      	lsls	r0, r5
    43b4:	40d6      	lsrs	r6, r2
    43b6:	1e5d      	subs	r5, r3, #1
    43b8:	41ab      	sbcs	r3, r5
    43ba:	4330      	orrs	r0, r6
    43bc:	4318      	orrs	r0, r3
    43be:	40d4      	lsrs	r4, r2
    43c0:	0743      	lsls	r3, r0, #29
    43c2:	d009      	beq.n	43d8 <__aeabi_dmul+0x474>
    43c4:	230f      	movs	r3, #15
    43c6:	4003      	ands	r3, r0
    43c8:	2b04      	cmp	r3, #4
    43ca:	d005      	beq.n	43d8 <__aeabi_dmul+0x474>
    43cc:	0003      	movs	r3, r0
    43ce:	1d18      	adds	r0, r3, #4
    43d0:	4298      	cmp	r0, r3
    43d2:	419b      	sbcs	r3, r3
    43d4:	425b      	negs	r3, r3
    43d6:	18e4      	adds	r4, r4, r3
    43d8:	0223      	lsls	r3, r4, #8
    43da:	d521      	bpl.n	4420 <__aeabi_dmul+0x4bc>
    43dc:	2501      	movs	r5, #1
    43de:	9b01      	ldr	r3, [sp, #4]
    43e0:	2401      	movs	r4, #1
    43e2:	401d      	ands	r5, r3
    43e4:	2300      	movs	r3, #0
    43e6:	2200      	movs	r2, #0
    43e8:	4699      	mov	r9, r3
    43ea:	e622      	b.n	4032 <__aeabi_dmul+0xce>
    43ec:	251f      	movs	r5, #31
    43ee:	0021      	movs	r1, r4
    43f0:	426d      	negs	r5, r5
    43f2:	1a28      	subs	r0, r5, r0
    43f4:	40c1      	lsrs	r1, r0
    43f6:	0008      	movs	r0, r1
    43f8:	2a20      	cmp	r2, #32
    43fa:	d01d      	beq.n	4438 <__aeabi_dmul+0x4d4>
    43fc:	355f      	adds	r5, #95	; 0x5f
    43fe:	1aaa      	subs	r2, r5, r2
    4400:	4094      	lsls	r4, r2
    4402:	4323      	orrs	r3, r4
    4404:	1e5c      	subs	r4, r3, #1
    4406:	41a3      	sbcs	r3, r4
    4408:	2507      	movs	r5, #7
    440a:	4303      	orrs	r3, r0
    440c:	401d      	ands	r5, r3
    440e:	2200      	movs	r2, #0
    4410:	2d00      	cmp	r5, #0
    4412:	d009      	beq.n	4428 <__aeabi_dmul+0x4c4>
    4414:	220f      	movs	r2, #15
    4416:	2400      	movs	r4, #0
    4418:	401a      	ands	r2, r3
    441a:	0018      	movs	r0, r3
    441c:	2a04      	cmp	r2, #4
    441e:	d1d6      	bne.n	43ce <__aeabi_dmul+0x46a>
    4420:	0003      	movs	r3, r0
    4422:	0765      	lsls	r5, r4, #29
    4424:	0264      	lsls	r4, r4, #9
    4426:	0b22      	lsrs	r2, r4, #12
    4428:	08db      	lsrs	r3, r3, #3
    442a:	432b      	orrs	r3, r5
    442c:	2501      	movs	r5, #1
    442e:	4699      	mov	r9, r3
    4430:	9b01      	ldr	r3, [sp, #4]
    4432:	2400      	movs	r4, #0
    4434:	401d      	ands	r5, r3
    4436:	e5fc      	b.n	4032 <__aeabi_dmul+0xce>
    4438:	2400      	movs	r4, #0
    443a:	e7e2      	b.n	4402 <__aeabi_dmul+0x49e>
    443c:	2280      	movs	r2, #128	; 0x80
    443e:	2501      	movs	r5, #1
    4440:	0312      	lsls	r2, r2, #12
    4442:	4322      	orrs	r2, r4
    4444:	9901      	ldr	r1, [sp, #4]
    4446:	0312      	lsls	r2, r2, #12
    4448:	0b12      	lsrs	r2, r2, #12
    444a:	400d      	ands	r5, r1
    444c:	4699      	mov	r9, r3
    444e:	4c04      	ldr	r4, [pc, #16]	; (4460 <__aeabi_dmul+0x4fc>)
    4450:	e5ef      	b.n	4032 <__aeabi_dmul+0xce>
    4452:	46c0      	nop			; (mov r8, r8)
    4454:	000003ff 	.word	0x000003ff
    4458:	feffffff 	.word	0xfeffffff
    445c:	000007fe 	.word	0x000007fe
    4460:	000007ff 	.word	0x000007ff

00004464 <__aeabi_f2d>:
    4464:	0041      	lsls	r1, r0, #1
    4466:	0e09      	lsrs	r1, r1, #24
    4468:	1c4b      	adds	r3, r1, #1
    446a:	b570      	push	{r4, r5, r6, lr}
    446c:	b2db      	uxtb	r3, r3
    446e:	0246      	lsls	r6, r0, #9
    4470:	0a75      	lsrs	r5, r6, #9
    4472:	0fc4      	lsrs	r4, r0, #31
    4474:	2b01      	cmp	r3, #1
    4476:	dd14      	ble.n	44a2 <__aeabi_f2d+0x3e>
    4478:	23e0      	movs	r3, #224	; 0xe0
    447a:	009b      	lsls	r3, r3, #2
    447c:	076d      	lsls	r5, r5, #29
    447e:	0b36      	lsrs	r6, r6, #12
    4480:	18cb      	adds	r3, r1, r3
    4482:	2100      	movs	r1, #0
    4484:	0d0a      	lsrs	r2, r1, #20
    4486:	0028      	movs	r0, r5
    4488:	0512      	lsls	r2, r2, #20
    448a:	4d1c      	ldr	r5, [pc, #112]	; (44fc <__aeabi_f2d+0x98>)
    448c:	4332      	orrs	r2, r6
    448e:	055b      	lsls	r3, r3, #21
    4490:	402a      	ands	r2, r5
    4492:	085b      	lsrs	r3, r3, #1
    4494:	4313      	orrs	r3, r2
    4496:	005b      	lsls	r3, r3, #1
    4498:	07e4      	lsls	r4, r4, #31
    449a:	085b      	lsrs	r3, r3, #1
    449c:	4323      	orrs	r3, r4
    449e:	0019      	movs	r1, r3
    44a0:	bd70      	pop	{r4, r5, r6, pc}
    44a2:	2900      	cmp	r1, #0
    44a4:	d114      	bne.n	44d0 <__aeabi_f2d+0x6c>
    44a6:	2d00      	cmp	r5, #0
    44a8:	d01e      	beq.n	44e8 <__aeabi_f2d+0x84>
    44aa:	0028      	movs	r0, r5
    44ac:	f000 f8b6 	bl	461c <__clzsi2>
    44b0:	280a      	cmp	r0, #10
    44b2:	dc1c      	bgt.n	44ee <__aeabi_f2d+0x8a>
    44b4:	230b      	movs	r3, #11
    44b6:	002a      	movs	r2, r5
    44b8:	1a1b      	subs	r3, r3, r0
    44ba:	40da      	lsrs	r2, r3
    44bc:	0003      	movs	r3, r0
    44be:	3315      	adds	r3, #21
    44c0:	409d      	lsls	r5, r3
    44c2:	4b0f      	ldr	r3, [pc, #60]	; (4500 <__aeabi_f2d+0x9c>)
    44c4:	0312      	lsls	r2, r2, #12
    44c6:	1a1b      	subs	r3, r3, r0
    44c8:	055b      	lsls	r3, r3, #21
    44ca:	0b16      	lsrs	r6, r2, #12
    44cc:	0d5b      	lsrs	r3, r3, #21
    44ce:	e7d8      	b.n	4482 <__aeabi_f2d+0x1e>
    44d0:	2d00      	cmp	r5, #0
    44d2:	d006      	beq.n	44e2 <__aeabi_f2d+0x7e>
    44d4:	0b32      	lsrs	r2, r6, #12
    44d6:	2680      	movs	r6, #128	; 0x80
    44d8:	0336      	lsls	r6, r6, #12
    44da:	076d      	lsls	r5, r5, #29
    44dc:	4316      	orrs	r6, r2
    44de:	4b09      	ldr	r3, [pc, #36]	; (4504 <__aeabi_f2d+0xa0>)
    44e0:	e7cf      	b.n	4482 <__aeabi_f2d+0x1e>
    44e2:	4b08      	ldr	r3, [pc, #32]	; (4504 <__aeabi_f2d+0xa0>)
    44e4:	2600      	movs	r6, #0
    44e6:	e7cc      	b.n	4482 <__aeabi_f2d+0x1e>
    44e8:	2300      	movs	r3, #0
    44ea:	2600      	movs	r6, #0
    44ec:	e7c9      	b.n	4482 <__aeabi_f2d+0x1e>
    44ee:	0003      	movs	r3, r0
    44f0:	002a      	movs	r2, r5
    44f2:	3b0b      	subs	r3, #11
    44f4:	409a      	lsls	r2, r3
    44f6:	2500      	movs	r5, #0
    44f8:	e7e3      	b.n	44c2 <__aeabi_f2d+0x5e>
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	800fffff 	.word	0x800fffff
    4500:	00000389 	.word	0x00000389
    4504:	000007ff 	.word	0x000007ff

00004508 <__aeabi_d2f>:
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}
    450a:	004c      	lsls	r4, r1, #1
    450c:	0d64      	lsrs	r4, r4, #21
    450e:	030b      	lsls	r3, r1, #12
    4510:	1c62      	adds	r2, r4, #1
    4512:	0f45      	lsrs	r5, r0, #29
    4514:	0a5b      	lsrs	r3, r3, #9
    4516:	0552      	lsls	r2, r2, #21
    4518:	432b      	orrs	r3, r5
    451a:	0fc9      	lsrs	r1, r1, #31
    451c:	00c5      	lsls	r5, r0, #3
    451e:	0d52      	lsrs	r2, r2, #21
    4520:	2a01      	cmp	r2, #1
    4522:	dd28      	ble.n	4576 <__aeabi_d2f+0x6e>
    4524:	4a3a      	ldr	r2, [pc, #232]	; (4610 <__aeabi_d2f+0x108>)
    4526:	18a6      	adds	r6, r4, r2
    4528:	2efe      	cmp	r6, #254	; 0xfe
    452a:	dc1b      	bgt.n	4564 <__aeabi_d2f+0x5c>
    452c:	2e00      	cmp	r6, #0
    452e:	dd3e      	ble.n	45ae <__aeabi_d2f+0xa6>
    4530:	0180      	lsls	r0, r0, #6
    4532:	0002      	movs	r2, r0
    4534:	1e50      	subs	r0, r2, #1
    4536:	4182      	sbcs	r2, r0
    4538:	0f6d      	lsrs	r5, r5, #29
    453a:	432a      	orrs	r2, r5
    453c:	00db      	lsls	r3, r3, #3
    453e:	4313      	orrs	r3, r2
    4540:	075a      	lsls	r2, r3, #29
    4542:	d004      	beq.n	454e <__aeabi_d2f+0x46>
    4544:	220f      	movs	r2, #15
    4546:	401a      	ands	r2, r3
    4548:	2a04      	cmp	r2, #4
    454a:	d000      	beq.n	454e <__aeabi_d2f+0x46>
    454c:	3304      	adds	r3, #4
    454e:	2280      	movs	r2, #128	; 0x80
    4550:	04d2      	lsls	r2, r2, #19
    4552:	401a      	ands	r2, r3
    4554:	d05a      	beq.n	460c <__aeabi_d2f+0x104>
    4556:	3601      	adds	r6, #1
    4558:	2eff      	cmp	r6, #255	; 0xff
    455a:	d003      	beq.n	4564 <__aeabi_d2f+0x5c>
    455c:	019b      	lsls	r3, r3, #6
    455e:	0a5b      	lsrs	r3, r3, #9
    4560:	b2f4      	uxtb	r4, r6
    4562:	e001      	b.n	4568 <__aeabi_d2f+0x60>
    4564:	24ff      	movs	r4, #255	; 0xff
    4566:	2300      	movs	r3, #0
    4568:	0258      	lsls	r0, r3, #9
    456a:	05e4      	lsls	r4, r4, #23
    456c:	0a40      	lsrs	r0, r0, #9
    456e:	07c9      	lsls	r1, r1, #31
    4570:	4320      	orrs	r0, r4
    4572:	4308      	orrs	r0, r1
    4574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4576:	2c00      	cmp	r4, #0
    4578:	d007      	beq.n	458a <__aeabi_d2f+0x82>
    457a:	431d      	orrs	r5, r3
    457c:	d0f2      	beq.n	4564 <__aeabi_d2f+0x5c>
    457e:	2080      	movs	r0, #128	; 0x80
    4580:	00db      	lsls	r3, r3, #3
    4582:	0480      	lsls	r0, r0, #18
    4584:	4303      	orrs	r3, r0
    4586:	26ff      	movs	r6, #255	; 0xff
    4588:	e7da      	b.n	4540 <__aeabi_d2f+0x38>
    458a:	432b      	orrs	r3, r5
    458c:	d003      	beq.n	4596 <__aeabi_d2f+0x8e>
    458e:	2305      	movs	r3, #5
    4590:	08db      	lsrs	r3, r3, #3
    4592:	2cff      	cmp	r4, #255	; 0xff
    4594:	d003      	beq.n	459e <__aeabi_d2f+0x96>
    4596:	025b      	lsls	r3, r3, #9
    4598:	0a5b      	lsrs	r3, r3, #9
    459a:	b2e4      	uxtb	r4, r4
    459c:	e7e4      	b.n	4568 <__aeabi_d2f+0x60>
    459e:	2b00      	cmp	r3, #0
    45a0:	d032      	beq.n	4608 <__aeabi_d2f+0x100>
    45a2:	2080      	movs	r0, #128	; 0x80
    45a4:	03c0      	lsls	r0, r0, #15
    45a6:	4303      	orrs	r3, r0
    45a8:	025b      	lsls	r3, r3, #9
    45aa:	0a5b      	lsrs	r3, r3, #9
    45ac:	e7dc      	b.n	4568 <__aeabi_d2f+0x60>
    45ae:	0032      	movs	r2, r6
    45b0:	3217      	adds	r2, #23
    45b2:	db14      	blt.n	45de <__aeabi_d2f+0xd6>
    45b4:	2280      	movs	r2, #128	; 0x80
    45b6:	271e      	movs	r7, #30
    45b8:	0412      	lsls	r2, r2, #16
    45ba:	4313      	orrs	r3, r2
    45bc:	1bbf      	subs	r7, r7, r6
    45be:	2f1f      	cmp	r7, #31
    45c0:	dc0f      	bgt.n	45e2 <__aeabi_d2f+0xda>
    45c2:	4a14      	ldr	r2, [pc, #80]	; (4614 <__aeabi_d2f+0x10c>)
    45c4:	4694      	mov	ip, r2
    45c6:	4464      	add	r4, ip
    45c8:	002a      	movs	r2, r5
    45ca:	40a5      	lsls	r5, r4
    45cc:	002e      	movs	r6, r5
    45ce:	40a3      	lsls	r3, r4
    45d0:	1e75      	subs	r5, r6, #1
    45d2:	41ae      	sbcs	r6, r5
    45d4:	40fa      	lsrs	r2, r7
    45d6:	4333      	orrs	r3, r6
    45d8:	4313      	orrs	r3, r2
    45da:	2600      	movs	r6, #0
    45dc:	e7b0      	b.n	4540 <__aeabi_d2f+0x38>
    45de:	2400      	movs	r4, #0
    45e0:	e7d5      	b.n	458e <__aeabi_d2f+0x86>
    45e2:	2202      	movs	r2, #2
    45e4:	4252      	negs	r2, r2
    45e6:	1b96      	subs	r6, r2, r6
    45e8:	001a      	movs	r2, r3
    45ea:	40f2      	lsrs	r2, r6
    45ec:	2f20      	cmp	r7, #32
    45ee:	d009      	beq.n	4604 <__aeabi_d2f+0xfc>
    45f0:	4809      	ldr	r0, [pc, #36]	; (4618 <__aeabi_d2f+0x110>)
    45f2:	4684      	mov	ip, r0
    45f4:	4464      	add	r4, ip
    45f6:	40a3      	lsls	r3, r4
    45f8:	432b      	orrs	r3, r5
    45fa:	1e5d      	subs	r5, r3, #1
    45fc:	41ab      	sbcs	r3, r5
    45fe:	2600      	movs	r6, #0
    4600:	4313      	orrs	r3, r2
    4602:	e79d      	b.n	4540 <__aeabi_d2f+0x38>
    4604:	2300      	movs	r3, #0
    4606:	e7f7      	b.n	45f8 <__aeabi_d2f+0xf0>
    4608:	2300      	movs	r3, #0
    460a:	e7ad      	b.n	4568 <__aeabi_d2f+0x60>
    460c:	0034      	movs	r4, r6
    460e:	e7bf      	b.n	4590 <__aeabi_d2f+0x88>
    4610:	fffffc80 	.word	0xfffffc80
    4614:	fffffc82 	.word	0xfffffc82
    4618:	fffffca2 	.word	0xfffffca2

0000461c <__clzsi2>:
    461c:	211c      	movs	r1, #28
    461e:	2301      	movs	r3, #1
    4620:	041b      	lsls	r3, r3, #16
    4622:	4298      	cmp	r0, r3
    4624:	d301      	bcc.n	462a <__clzsi2+0xe>
    4626:	0c00      	lsrs	r0, r0, #16
    4628:	3910      	subs	r1, #16
    462a:	0a1b      	lsrs	r3, r3, #8
    462c:	4298      	cmp	r0, r3
    462e:	d301      	bcc.n	4634 <__clzsi2+0x18>
    4630:	0a00      	lsrs	r0, r0, #8
    4632:	3908      	subs	r1, #8
    4634:	091b      	lsrs	r3, r3, #4
    4636:	4298      	cmp	r0, r3
    4638:	d301      	bcc.n	463e <__clzsi2+0x22>
    463a:	0900      	lsrs	r0, r0, #4
    463c:	3904      	subs	r1, #4
    463e:	a202      	add	r2, pc, #8	; (adr r2, 4648 <__clzsi2+0x2c>)
    4640:	5c10      	ldrb	r0, [r2, r0]
    4642:	1840      	adds	r0, r0, r1
    4644:	4770      	bx	lr
    4646:	46c0      	nop			; (mov r8, r8)
    4648:	02020304 	.word	0x02020304
    464c:	01010101 	.word	0x01010101
	...

00004658 <__libc_init_array>:
    4658:	b570      	push	{r4, r5, r6, lr}
    465a:	2600      	movs	r6, #0
    465c:	4d0c      	ldr	r5, [pc, #48]	; (4690 <__libc_init_array+0x38>)
    465e:	4c0d      	ldr	r4, [pc, #52]	; (4694 <__libc_init_array+0x3c>)
    4660:	1b64      	subs	r4, r4, r5
    4662:	10a4      	asrs	r4, r4, #2
    4664:	42a6      	cmp	r6, r4
    4666:	d109      	bne.n	467c <__libc_init_array+0x24>
    4668:	2600      	movs	r6, #0
    466a:	f000 f90f 	bl	488c <_init>
    466e:	4d0a      	ldr	r5, [pc, #40]	; (4698 <__libc_init_array+0x40>)
    4670:	4c0a      	ldr	r4, [pc, #40]	; (469c <__libc_init_array+0x44>)
    4672:	1b64      	subs	r4, r4, r5
    4674:	10a4      	asrs	r4, r4, #2
    4676:	42a6      	cmp	r6, r4
    4678:	d105      	bne.n	4686 <__libc_init_array+0x2e>
    467a:	bd70      	pop	{r4, r5, r6, pc}
    467c:	00b3      	lsls	r3, r6, #2
    467e:	58eb      	ldr	r3, [r5, r3]
    4680:	4798      	blx	r3
    4682:	3601      	adds	r6, #1
    4684:	e7ee      	b.n	4664 <__libc_init_array+0xc>
    4686:	00b3      	lsls	r3, r6, #2
    4688:	58eb      	ldr	r3, [r5, r3]
    468a:	4798      	blx	r3
    468c:	3601      	adds	r6, #1
    468e:	e7f2      	b.n	4676 <__libc_init_array+0x1e>
    4690:	00004898 	.word	0x00004898
    4694:	00004898 	.word	0x00004898
    4698:	00004898 	.word	0x00004898
    469c:	0000489c 	.word	0x0000489c

000046a0 <memcpy>:
    46a0:	2300      	movs	r3, #0
    46a2:	b510      	push	{r4, lr}
    46a4:	429a      	cmp	r2, r3
    46a6:	d100      	bne.n	46aa <memcpy+0xa>
    46a8:	bd10      	pop	{r4, pc}
    46aa:	5ccc      	ldrb	r4, [r1, r3]
    46ac:	54c4      	strb	r4, [r0, r3]
    46ae:	3301      	adds	r3, #1
    46b0:	e7f8      	b.n	46a4 <memcpy+0x4>
    46b2:	0000      	movs	r0, r0
    46b4:	454c4449 	.word	0x454c4449
    46b8:	00000000 	.word	0x00000000
    46bc:	000016d4 	.word	0x000016d4
    46c0:	000016d4 	.word	0x000016d4
    46c4:	000016d4 	.word	0x000016d4
    46c8:	00001650 	.word	0x00001650
    46cc:	00001716 	.word	0x00001716
    46d0:	00001730 	.word	0x00001730
    46d4:	000016d4 	.word	0x000016d4
    46d8:	000016d4 	.word	0x000016d4
    46dc:	00001650 	.word	0x00001650
    46e0:	00001716 	.word	0x00001716
    46e4:	20726d54 	.word	0x20726d54
    46e8:	00637653 	.word	0x00637653
    46ec:	00001864 	.word	0x00001864
    46f0:	00001844 	.word	0x00001844
    46f4:	00001844 	.word	0x00001844
    46f8:	000018d0 	.word	0x000018d0
    46fc:	00001856 	.word	0x00001856
    4700:	00001872 	.word	0x00001872
    4704:	00001848 	.word	0x00001848
    4708:	00001880 	.word	0x00001880
    470c:	000018c0 	.word	0x000018c0
    4710:	000026dc 	.word	0x000026dc
    4714:	00002706 	.word	0x00002706
    4718:	00002710 	.word	0x00002710
    471c:	0000271a 	.word	0x0000271a
    4720:	00002724 	.word	0x00002724
    4724:	0000272e 	.word	0x0000272e
    4728:	00002738 	.word	0x00002738
    472c:	00002742 	.word	0x00002742
    4730:	0000274c 	.word	0x0000274c
    4734:	00002756 	.word	0x00002756
    4738:	000027b2 	.word	0x000027b2
    473c:	000027be 	.word	0x000027be
    4740:	000027ca 	.word	0x000027ca
    4744:	000027d6 	.word	0x000027d6
    4748:	000027e2 	.word	0x000027e2
    474c:	000027ee 	.word	0x000027ee
    4750:	000027fa 	.word	0x000027fa
    4754:	00002806 	.word	0x00002806
    4758:	00002812 	.word	0x00002812
    475c:	00002820 	.word	0x00002820
    4760:	20444950 	.word	0x20444950
    4764:	746e6f43 	.word	0x746e6f43
    4768:	206c6f72 	.word	0x206c6f72
    476c:	6b736154 	.word	0x6b736154
    4770:	00000000 	.word	0x00000000
    4774:	7079654b 	.word	0x7079654b
    4778:	26206461 	.word	0x26206461
    477c:	73694420 	.word	0x73694420
    4780:	79616c70 	.word	0x79616c70
    4784:	73615420 	.word	0x73615420
    4788:	0000006b 	.word	0x0000006b
    478c:	00003098 	.word	0x00003098
    4790:	00003068 	.word	0x00003068
    4794:	0000307a 	.word	0x0000307a
    4798:	00002fbc 	.word	0x00002fbc
    479c:	0000307a 	.word	0x0000307a
    47a0:	0000305e 	.word	0x0000305e
    47a4:	0000307a 	.word	0x0000307a
    47a8:	00002fbc 	.word	0x00002fbc
    47ac:	00003068 	.word	0x00003068
    47b0:	00003068 	.word	0x00003068
    47b4:	0000305e 	.word	0x0000305e
    47b8:	00002fbc 	.word	0x00002fbc
    47bc:	00002fc4 	.word	0x00002fc4
    47c0:	00002fc4 	.word	0x00002fc4
    47c4:	00002fc4 	.word	0x00002fc4
    47c8:	00003080 	.word	0x00003080
    47cc:	00003068 	.word	0x00003068
    47d0:	00003068 	.word	0x00003068
    47d4:	0000303c 	.word	0x0000303c
    47d8:	00003120 	.word	0x00003120
    47dc:	0000303c 	.word	0x0000303c
    47e0:	0000305e 	.word	0x0000305e
    47e4:	0000303c 	.word	0x0000303c
    47e8:	00003120 	.word	0x00003120
    47ec:	00003068 	.word	0x00003068
    47f0:	00003068 	.word	0x00003068
    47f4:	0000305e 	.word	0x0000305e
    47f8:	00003120 	.word	0x00003120
    47fc:	00002fc4 	.word	0x00002fc4
    4800:	00002fc4 	.word	0x00002fc4
    4804:	00002fc4 	.word	0x00002fc4
    4808:	0000312a 	.word	0x0000312a
    480c:	00003418 	.word	0x00003418
    4810:	00003368 	.word	0x00003368
    4814:	00003368 	.word	0x00003368
    4818:	00003366 	.word	0x00003366
    481c:	0000340a 	.word	0x0000340a
    4820:	0000340a 	.word	0x0000340a
    4824:	00003400 	.word	0x00003400
    4828:	00003366 	.word	0x00003366
    482c:	0000340a 	.word	0x0000340a
    4830:	00003400 	.word	0x00003400
    4834:	0000340a 	.word	0x0000340a
    4838:	00003366 	.word	0x00003366
    483c:	00003410 	.word	0x00003410
    4840:	00003410 	.word	0x00003410
    4844:	00003410 	.word	0x00003410
    4848:	000034a0 	.word	0x000034a0
    484c:	00004154 	.word	0x00004154
    4850:	00004014 	.word	0x00004014
    4854:	00004014 	.word	0x00004014
    4858:	00004010 	.word	0x00004010
    485c:	0000412c 	.word	0x0000412c
    4860:	0000412c 	.word	0x0000412c
    4864:	0000411e 	.word	0x0000411e
    4868:	00004010 	.word	0x00004010
    486c:	0000412c 	.word	0x0000412c
    4870:	0000411e 	.word	0x0000411e
    4874:	0000412c 	.word	0x0000412c
    4878:	00004010 	.word	0x00004010
    487c:	00004134 	.word	0x00004134
    4880:	00004134 	.word	0x00004134
    4884:	00004134 	.word	0x00004134
    4888:	00004338 	.word	0x00004338

0000488c <_init>:
    488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4892:	bc08      	pop	{r3}
    4894:	469e      	mov	lr, r3
    4896:	4770      	bx	lr

00004898 <__init_array_start>:
    4898:	000000dd 	.word	0x000000dd

0000489c <_fini>:
    489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    489e:	46c0      	nop			; (mov r8, r8)
    48a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48a2:	bc08      	pop	{r3}
    48a4:	469e      	mov	lr, r3
    48a6:	4770      	bx	lr

000048a8 <__fini_array_start>:
    48a8:	000000b5 	.word	0x000000b5
